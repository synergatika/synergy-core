{
    "pipes": [],
    "interfaces": [
        {
            "name": "Activity",
            "id": "interface-Activity-84f13582d276acc0b841cb8a79adcf38",
            "file": "projects/sng-core/src/lib/model/activity.model.ts",
            "type": "interface",
            "sourceCode": "import { Content } from './content.model';\r\n\r\nexport interface Activity {\r\n  slug: number;\r\n  amount: number;\r\n  stores: number;\r\n  transactions: number;\r\n  rate: number;\r\n  badge: string;\r\n\r\n  image?: string;\r\n  text?: Content;\r\n  text_id?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "amount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "badge",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "image",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "rate",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "slug",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "stores",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "text",
                    "type": "Content",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "text_id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "transactions",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AuthUser",
            "id": "interface-AuthUser-c10dc00c6b444346372fdaf1a090e330",
            "file": "projects/sng-core/src/lib/model/auth/auth.model.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  _id: string;\r\n  email: string;\r\n  name: string;\r\n  imageURL: string;\r\n  access: 'admin' | 'partner' | 'member';\r\n}\r\n\r\nexport interface Token {\r\n  token: string;\r\n  expiresIn: number;\r\n}\r\n\r\nexport interface AuthUser {\r\n  user?: User;\r\n  token?: Token;\r\n  action?: 'need_password_verification' | 'need_email_verification' | 'need_account_activation';\r\n}\r\n",
            "properties": [
                {
                    "name": "action",
                    "type": "\"need_password_verification\" | \"need_email_verification\" | \"need_account_activation\"",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "token",
                    "type": "Token",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "user",
                    "type": "User",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Balance",
            "id": "interface-Balance-7756dc5f2ddcbdfe2fa368676c121992",
            "file": "projects/sng-core/src/lib/model/loyalty/balance.model.ts",
            "type": "interface",
            "sourceCode": "export interface Balance {\r\n  address: string;\r\n  points: number;\r\n  text?: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "address",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "points",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "text",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Content",
            "id": "interface-Content-fe77871ff642da3a56617365079761b1",
            "file": "projects/sng-core/src/lib/model/content.model.ts",
            "type": "interface",
            "sourceCode": "export interface Content {\r\n  _id: string;\r\n  name: string;\r\n  el_title: string;\r\n  en_title: string;\r\n  el_content: string;\r\n  en_content: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "el_content",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "el_title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "en_content",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "en_title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Event",
            "id": "interface-Event-54f5cf620711d5bfd18866e32321e9d9",
            "file": "projects/sng-core/src/lib/model/event.model.ts",
            "type": "interface",
            "sourceCode": "export interface Event {\r\n  partner_id: string;\r\n  partner_name: string;\r\n  partner_slug: string;\r\n  partner_imageURL: string;\r\n\r\n  event_id: string;\r\n  event_imageURL: string;\r\n  event_slug: string;\r\n  title: string;\r\n  subtitle: string;\r\n  description: string;\r\n  dateTime: number;\r\n  location: string;\r\n  access: string;\r\n\r\n  createdAt: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "access",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "createdAt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "dateTime",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "event_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "event_imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "event_slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "location",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "partner_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "partner_imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "partner_name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "partner_slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "subtitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "GeneralList",
            "id": "interface-GeneralList-5dc9457f79b84f073329743bef01bb91",
            "file": "projects/sng-core/src/lib/model/general-list.model.ts",
            "type": "interface",
            "sourceCode": "export interface GeneralList {\r\n    title: string;\r\n    value: string;\r\n}",
            "properties": [
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LanguageFlag",
            "id": "interface-LanguageFlag-f37b981ff28172730fbc7258fffb2691",
            "file": "projects/sng-core/src/lib/model/translate/language-flag.model.ts",
            "type": "interface",
            "sourceCode": "export interface LanguageFlag {\r\n  lang: string;\r\n  name: string;\r\n  flag: string;\r\n  active?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "active",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "flag",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lang",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Locale",
            "id": "interface-Locale-7c2fdf9cd9b0ace93804eebc3fc62dec",
            "file": "projects/sng-core/src/lib/model/translate/locale.model.ts",
            "type": "interface",
            "sourceCode": "export interface Locale {\r\n  lang: string;\r\n  data: object;\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "lang",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoyaltyTransaction",
            "id": "interface-LoyaltyTransaction-6d02ff23b72c3dff95ea07d9793ac54a",
            "file": "projects/sng-core/src/lib/model/loyalty/transaction.model.ts",
            "type": "interface",
            "sourceCode": "export interface LoyaltyTransaction {\r\n  _id: string;\r\n\r\n  member_id: string;\r\n  partner_id: string;\r\n\r\n  data: {\r\n    partner_name: string;\r\n    partner_email: string;\r\n    points: number,\r\n    amount: number,\r\n    offer_id: string;\r\n    offer_title: string\r\n  };\r\n\r\n  tx: string;\r\n  type: string;\r\n\r\n  createdAt: Date;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "createdAt",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "data",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "member_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "partner_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "tx",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Marker",
            "id": "interface-Marker-c130e4396984bec8364522f906fc5f21",
            "file": "projects/sng-core/src/lib/model/marker.model.ts",
            "type": "interface",
            "sourceCode": "export interface Marker {\r\n  lat: number;\r\n  lng: number;\r\n  img: string;\r\n  name: string;\r\n  address: string;\r\n  label?: string;\r\n  draggable: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "address",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "draggable",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "img",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "lat",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lng",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Member",
            "id": "interface-Member-8043d06e8768170e6f2ef941ecb00bd6",
            "file": "projects/sng-core/src/lib/model/member.model.ts",
            "type": "interface",
            "sourceCode": "export interface Member {\r\n  _id?: string;\r\n  email?: string;\r\n  createdAt?: Date;\r\n\r\n  name: string;\r\n  imageURL: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "createdAt",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Menu",
            "id": "interface-Menu-81499c06b4c6b8a855650f72b6758076",
            "file": "projects/sng-core/src/lib/model/menu.model.ts",
            "type": "interface",
            "sourceCode": "export interface Menu {\r\n  title: string;\r\n  link: string;\r\n  icon: string;\r\n  enable?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "enable",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "link",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Message",
            "id": "interface-Message-ee17e59846e186310864bcd94cac5665",
            "file": "projects/sng-core/src/lib/model/message.model.ts",
            "type": "interface",
            "sourceCode": "export interface Message {\r\n  message: string;\r\n  code: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "code",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "message",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MicrocreditCampaign",
            "id": "interface-MicrocreditCampaign-e26c17fbcc9ff7ea9a8999d07c1be81e",
            "file": "projects/sng-core/src/lib/model/microcredit/campaign.model.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  PartnerAddress,\r\n  PartnerContact,\r\n  PartnerPayment\r\n} from '../partner';\r\n\r\nimport { Statistics } from '../statistics.model';\r\n\r\ninterface Tokens {\r\n  _id: string;\r\n  initialTokens: number;\r\n  redeemedTokens: number;\r\n}\r\n\r\nexport interface MicrocreditCampaign {\r\n\r\n  partner_id: string;\r\n  partner_name: string;\r\n  partner_email: string;\r\n  partner_slug: string;\r\n  partner_imageURL: string;\r\n\r\n  partner_payments: PartnerPayment[];\r\n  partner_address: PartnerAddress;\r\n  partner_contact: PartnerContact;\r\n\r\n  _id?: string;\r\n  campaign_id: string;\r\n  campaign_slug: string;\r\n  campaign_imageURL: string;\r\n  title: string;\r\n  subtitle: string;\r\n  terms: string;\r\n  description: string;\r\n  category: string;\r\n  access: string;\r\n  status: string;\r\n\r\n  quantitative: boolean;\r\n  stepAmount: number;\r\n  minAllowed: number;\r\n  maxAllowed: number;\r\n  maxAmount: number;\r\n\r\n  redeemStarts: number;\r\n  redeemEnds: number;\r\n  startsAt: number;\r\n  expiresAt: number;\r\n\r\n  confirmationTokens: Tokens;\r\n  orderedTokens: Tokens;\r\n\r\n  statisticsPromise?: Statistics;\r\n  statisticsRedeem?: Statistics;\r\n\r\n  createdAt: Date;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "access",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "campaign_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "campaign_imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "campaign_slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "category",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "confirmationTokens",
                    "type": "Tokens",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "createdAt",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "expiresAt",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "maxAllowed",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "maxAmount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "minAllowed",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "orderedTokens",
                    "type": "Tokens",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "partner_address",
                    "type": "PartnerAddress",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "partner_contact",
                    "type": "PartnerContact",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "partner_email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "partner_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "partner_imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "partner_name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "partner_payments",
                    "type": "PartnerPayment[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "partner_slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "quantitative",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "redeemEnds",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "redeemStarts",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "startsAt",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "statisticsPromise",
                    "type": "Statistics",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "statisticsRedeem",
                    "type": "Statistics",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "stepAmount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "subtitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "terms",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MicrocreditSupport",
            "id": "interface-MicrocreditSupport-51b60680c662f979e0a132ff5854469b",
            "file": "projects/sng-core/src/lib/model/microcredit/support.model.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  PartnerAddress,\r\n  PartnerPayment\r\n} from '../partner';\r\n\r\nimport { MicrocreditTransaction } from './transaction.model';\r\n\r\nexport interface MicrocreditSupport {\r\n  partner_id: string;\r\n  partner_name: string;\r\n  partner_address: PartnerAddress;\r\n  partner_payments: PartnerPayment[];\r\n\r\n  campaign_id: string;\r\n  campaign_imageURL: string;\r\n  title: string;\r\n  terms: string;\r\n  redeemStarts: number;\r\n  redeemEnds: number;\r\n\r\n  support_id: string;\r\n  payment_id: string;\r\n  backer_id: string;\r\n  initialTokens: number;\r\n  redeemedTokens: number;\r\n  status: string;\r\n\r\n  amount: number;\r\n  method: string;\r\n\r\n  transactions: MicrocreditTransaction[];\r\n  createdAt: Date;\r\n  how: {\r\n    title: string,\r\n    value: string\r\n  };\r\n}\r\n",
            "properties": [
                {
                    "name": "amount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "backer_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "campaign_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "campaign_imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "createdAt",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "how",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "initialTokens",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "method",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "partner_address",
                    "type": "PartnerAddress",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "partner_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "partner_name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "partner_payments",
                    "type": "PartnerPayment[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "payment_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "redeemedTokens",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "redeemEnds",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "redeemStarts",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "support_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "terms",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "transactions",
                    "type": "MicrocreditTransaction[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MicrocreditTransaction",
            "id": "interface-MicrocreditTransaction-058ec410d3be52fbee4aa7b35df3ad58",
            "file": "projects/sng-core/src/lib/model/microcredit/transaction.model.ts",
            "type": "interface",
            "sourceCode": "export interface MicrocreditTransaction {\r\n  _id: string;\r\n\r\n  member_id: string;\r\n  partner_id: string;\r\n\r\n  data: {\r\n    campaign_id: string;\r\n    campaign_title: string;\r\n    support_id: string,\r\n    tokens: number,\r\n  };\r\n\r\n  tx: string;\r\n  type: string;\r\n\r\n  createdAt: Date;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "createdAt",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "data",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "member_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "partner_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "tx",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Offer",
            "id": "interface-Offer-387567d94dbf666e82a27dca5299af09",
            "file": "projects/sng-core/src/lib/model/offer.model.ts",
            "type": "interface",
            "sourceCode": "import { PartnerAddress } from './partner/address.model';\r\n\r\nexport interface Offer {\r\n  partner_id: string;\r\n  partner_name: string;\r\n  partner_slug: string;\r\n  partner_imageURL: string;\r\n  partner_address: PartnerAddress;\r\n\r\n  offer_id: string;\r\n  offer_imageURL: string;\r\n  offer_slug: string;\r\n  title: string;\r\n  subtitle: string;\r\n  description: string;\r\n  cost: number;\r\n  expiresAt: number;\r\n  createdAt: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "cost",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "createdAt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "expiresAt",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "offer_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "offer_imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "offer_slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "partner_address",
                    "type": "PartnerAddress",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "partner_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "partner_imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "partner_name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "partner_slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "subtitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "OneClickToken",
            "id": "interface-OneClickToken-5c7f69278718da0851d08d4df6330690",
            "file": "projects/sng-core/src/lib/model/auth/one_click_token.model.ts",
            "type": "interface",
            "sourceCode": "export interface OneClickToken {\r\n  registration: boolean;\r\n  oneClickToken: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "oneClickToken",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "registration",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Partner",
            "id": "interface-Partner-e81bf25fe6ad1fa09491a2956e28c0a0",
            "file": "projects/sng-core/src/lib/model/partner/partner.model.ts",
            "type": "interface",
            "sourceCode": "import { PartnerAddress } from './address.model';\r\nimport { PartnerContact } from './contact.model';\r\nimport { PartnerPayment } from './payment.model';\r\n\r\nexport interface Partner {\r\n  _id?: string;\r\n  email?: string;\r\n\r\n  name: string;\r\n  imageURL: string;\r\n  slug?: string;\r\n  subtitle?: string;\r\n  description?: string;\r\n  timetable?: string;\r\n  sector: string;\r\n\r\n  contact: PartnerContact;\r\n  address: PartnerAddress;\r\n  payments?: PartnerPayment[];\r\n\r\n  createdAt?: Date;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "address",
                    "type": "PartnerAddress",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "contact",
                    "type": "PartnerContact",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "createdAt",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "payments",
                    "type": "PartnerPayment[]",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "sector",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "slug",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "subtitle",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "timetable",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PartnerAddress",
            "id": "interface-PartnerAddress-cd64981f9915f6ab1ddfcac290cc68de",
            "file": "projects/sng-core/src/lib/model/partner/address.model.ts",
            "type": "interface",
            "sourceCode": "export interface PartnerAddress {\r\n  street: string;\r\n  city: string;\r\n  postCode: string;\r\n  coordinates: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "city",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "coordinates",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "postCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "street",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PartnerContact",
            "id": "interface-PartnerContact-7d70fcfd5a73134a57c67d844aa5ae40",
            "file": "projects/sng-core/src/lib/model/partner/contact.model.ts",
            "type": "interface",
            "sourceCode": "export interface PartnerContact {\r\n  phone: string;\r\n  websiteURL: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "phone",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "websiteURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PartnerPayment",
            "id": "interface-PartnerPayment-105063f715a25a4e92ae33825b5c625f",
            "file": "projects/sng-core/src/lib/model/partner/payment.model.ts",
            "type": "interface",
            "sourceCode": "export interface PartnerPayment {\r\n  bic: string;\r\n  name: string;\r\n  value: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "bic",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PaymentDetails",
            "id": "interface-PaymentDetails-71513f9af8459939cddce5b47dfddd1d",
            "file": "projects/sng-core/src/lib/model/payment/payment_details.model.ts",
            "type": "interface",
            "sourceCode": "export interface PaymentDetails {\r\n  support_id: string;\r\n  payment_id: string;\r\n  method: string;\r\n  how?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "how",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "method",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "payment_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "support_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PaymentList",
            "id": "interface-PaymentList-b1a2e88de88d9272c02536e7de1ee4fd",
            "file": "projects/sng-core/src/lib/model/payment/payment-list.model.ts",
            "type": "interface",
            "sourceCode": "export interface PaymentList {\r\n  bic: string;\r\n  title: string;\r\n  name: string;\r\n  value: string;\r\n  description: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "bic",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Points",
            "id": "interface-Points-2e8a801f2c6fba96f3ab48498152ad78",
            "file": "projects/sng-core/src/lib/model/loyalty/points.model.ts",
            "type": "interface",
            "sourceCode": "export interface Points {\r\n  address: string;\r\n  points: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "address",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "points",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Post",
            "id": "interface-Post-9008c7460e50c643738a3d8ee7ca68b8",
            "file": "projects/sng-core/src/lib/model/post/post.model.ts",
            "type": "interface",
            "sourceCode": "export interface Post {\r\n  partner_id: string;\r\n  partner_name: string;\r\n  partner_slug: string;\r\n  partner_imageURL: string;\r\n\r\n  post_id: string;\r\n  post_slug: string;\r\n  post_imageURL: string;\r\n  title: string;\r\n  subtitle: string;\r\n  content: string;\r\n  access: string;\r\n  createdAt: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "access",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "content",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "createdAt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "partner_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "partner_imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "partner_name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "partner_slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "post_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "post_imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "post_slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "subtitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PostEvent",
            "id": "interface-PostEvent-917e947e03a543be13bee3c6128fbd76",
            "file": "projects/sng-core/src/lib/model/post/event.model.ts",
            "type": "interface",
            "sourceCode": "export interface PostEvent {\r\n\r\n  partner_id: string;\r\n  partner_name: string;\r\n  partner_slug: string;\r\n  partner_imageURL: string;\r\n\r\n  post_event_id: string;\r\n  post_event_imageURL: string;\r\n  post_event_slug: string;\r\n  title: string;\r\n  subtitle: string;\r\n  content: string;\r\n  access: string;\r\n  type: string;\r\n\r\n  location: string;\r\n  dateTime: string;\r\n\r\n  createdAt: string;\r\n\r\n  post_imageURL?: string;\r\n  event_imageURL?: string;\r\n  description?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "access",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "content",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "createdAt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "dateTime",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "event_imageURL",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "location",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "partner_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "partner_imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "partner_name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "partner_slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "post_event_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "post_event_imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "post_event_slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "post_imageURL",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "subtitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RegistrationStatus",
            "id": "interface-RegistrationStatus-4fc7bff7bd1ceb73b14f4f58e98d3bf4",
            "file": "projects/sng-core/src/lib/model/auth/registration_status.model.ts",
            "type": "interface",
            "sourceCode": "export interface RegistrationStatus {\r\n  status: 'email_both' | 'email_none' | 'email_no_card' | 'card_both' | 'card_none' | 'card_no_email';\r\n}\r\n",
            "properties": [
                {
                    "name": "status",
                    "type": "\"email_both\" | \"email_none\" | \"email_no_card\" | \"card_both\" | \"card_none\" | \"card_no_email\"",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Statistics",
            "id": "interface-Statistics-112515e7a5d8c9fb61b4a05a65615441",
            "file": "projects/sng-core/src/lib/model/statistics.model.ts",
            "type": "interface",
            "sourceCode": "export interface Statistics {\r\n  _id: string;\r\n  count: number;\r\n  users: number;\r\n  usersArray?: string[];\r\n\r\n  tokens?: number;\r\n  amount?: number;\r\n  points?: number;\r\n\r\n  byDate?: Statistics[];\r\n  date?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "amount",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "byDate",
                    "type": "Statistics[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "date",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "points",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tokens",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "users",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "usersArray",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Token",
            "id": "interface-Token-c10dc00c6b444346372fdaf1a090e330",
            "file": "projects/sng-core/src/lib/model/auth/auth.model.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  _id: string;\r\n  email: string;\r\n  name: string;\r\n  imageURL: string;\r\n  access: 'admin' | 'partner' | 'member';\r\n}\r\n\r\nexport interface Token {\r\n  token: string;\r\n  expiresIn: number;\r\n}\r\n\r\nexport interface AuthUser {\r\n  user?: User;\r\n  token?: Token;\r\n  action?: 'need_password_verification' | 'need_email_verification' | 'need_account_activation';\r\n}\r\n",
            "properties": [
                {
                    "name": "expiresIn",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "token",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Tokens",
            "id": "interface-Tokens-e26c17fbcc9ff7ea9a8999d07c1be81e",
            "file": "projects/sng-core/src/lib/model/microcredit/campaign.model.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  PartnerAddress,\r\n  PartnerContact,\r\n  PartnerPayment\r\n} from '../partner';\r\n\r\nimport { Statistics } from '../statistics.model';\r\n\r\ninterface Tokens {\r\n  _id: string;\r\n  initialTokens: number;\r\n  redeemedTokens: number;\r\n}\r\n\r\nexport interface MicrocreditCampaign {\r\n\r\n  partner_id: string;\r\n  partner_name: string;\r\n  partner_email: string;\r\n  partner_slug: string;\r\n  partner_imageURL: string;\r\n\r\n  partner_payments: PartnerPayment[];\r\n  partner_address: PartnerAddress;\r\n  partner_contact: PartnerContact;\r\n\r\n  _id?: string;\r\n  campaign_id: string;\r\n  campaign_slug: string;\r\n  campaign_imageURL: string;\r\n  title: string;\r\n  subtitle: string;\r\n  terms: string;\r\n  description: string;\r\n  category: string;\r\n  access: string;\r\n  status: string;\r\n\r\n  quantitative: boolean;\r\n  stepAmount: number;\r\n  minAllowed: number;\r\n  maxAllowed: number;\r\n  maxAmount: number;\r\n\r\n  redeemStarts: number;\r\n  redeemEnds: number;\r\n  startsAt: number;\r\n  expiresAt: number;\r\n\r\n  confirmationTokens: Tokens;\r\n  orderedTokens: Tokens;\r\n\r\n  statisticsPromise?: Statistics;\r\n  statisticsRedeem?: Statistics;\r\n\r\n  createdAt: Date;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "initialTokens",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "redeemedTokens",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-c10dc00c6b444346372fdaf1a090e330",
            "file": "projects/sng-core/src/lib/model/auth/auth.model.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  _id: string;\r\n  email: string;\r\n  name: string;\r\n  imageURL: string;\r\n  access: 'admin' | 'partner' | 'member';\r\n}\r\n\r\nexport interface Token {\r\n  token: string;\r\n  expiresIn: number;\r\n}\r\n\r\nexport interface AuthUser {\r\n  user?: User;\r\n  token?: Token;\r\n  action?: 'need_password_verification' | 'need_email_verification' | 'need_account_activation';\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "access",
                    "type": "\"admin\" | \"partner\" | \"member\"",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-e697fbf06725fbd3b194d38c6a85645f-1",
            "file": "projects/sng-core/src/lib/model/auth/user.model.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  _id?: string;\r\n  email?: string;\r\n  card?: string;\r\n  createdAt?: Date;\r\n\r\n  name: string;\r\n  imageURL: string;\r\n  activated?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "activated",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "card",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "createdAt",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "imageURL",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        },
        {
            "name": "VerificationRequired",
            "id": "interface-VerificationRequired-df3c7fc750e8e157dd9a2c7c0bdd0a84",
            "file": "projects/sng-core/src/lib/model/auth/verification_required.model.ts",
            "type": "interface",
            "sourceCode": "export interface VerificationRequired {\r\n  action: 'need_password_verification' | 'need_email_verification' | 'need_account_activation';\r\n}\r\n",
            "properties": [
                {
                    "name": "action",
                    "type": "\"need_password_verification\" | \"need_email_verification\" | \"need_account_activation\"",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [],
    "classes": [
        {
            "name": "IAuthenticationService",
            "id": "class-IAuthenticationService-2dc714961385a6477921a9133c9a9acc",
            "file": "projects/sng-core/src/lib/services/authentication.interface.ts",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nimport { AuthUser } from '../model';\r\n\r\nexport abstract class IAuthenticationService {\r\n\r\n  public currentUser: Observable<AuthUser>;\r\n\r\n  public abstract get currentUserValue(): AuthUser;\r\n\r\n  public abstract logout(): void;\r\n}\r\n",
            "properties": [
                {
                    "name": "currentUser",
                    "type": "Observable<AuthUser>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        114,
                        117
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "currentUserValue": {
                    "name": "currentUserValue",
                    "getSignature": {
                        "name": "currentUserValue",
                        "type": "",
                        "returnType": "AuthUser",
                        "line": 9
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IContentService",
            "id": "class-IContentService-6e01f940230dc3a5c9c26e0d6cae5772",
            "file": "projects/sng-core/src/lib/services/content.interface.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { Content, Message } from '../model';\r\n\r\nexport abstract class IContentService {\r\n\r\n  abstract readContent():\r\n    Observable<Content[]>;\r\n\r\n  abstract readContentById(contentId: string):\r\n    Observable<Content>;\r\n\r\n  abstract createContent(name: string, elTitle: string, enTitle: string, elContent: string, enContent: string):\r\n    Observable<Message>;\r\n\r\n  abstract updateContent(contentId: string, name: string, elTitle: string, enTitle: string, elContent: string, enContent: string):\r\n    Observable<Message>;\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "createContent",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "elTitle",
                            "type": "string"
                        },
                        {
                            "name": "enTitle",
                            "type": "string"
                        },
                        {
                            "name": "elContent",
                            "type": "string"
                        },
                        {
                            "name": "enContent",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "elTitle",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enTitle",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "elContent",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enContent",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readContent",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Content[]>",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "readContentById",
                    "args": [
                        {
                            "name": "contentId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Content>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "contentId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateContent",
                    "args": [
                        {
                            "name": "contentId",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "name": "elTitle",
                            "type": "string"
                        },
                        {
                            "name": "enTitle",
                            "type": "string"
                        },
                        {
                            "name": "elContent",
                            "type": "string"
                        },
                        {
                            "name": "enContent",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "contentId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "elTitle",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enTitle",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "elContent",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "enContent",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IEnvironmentService",
            "id": "class-IEnvironmentService-129c82bbcb5f29c512ce09f1c9a0405e",
            "file": "projects/sng-core/src/lib/services/enviroment.interface.ts",
            "type": "class",
            "sourceCode": "export abstract class IEnvironmentService {\r\n  abstract get mapOptions(): any;\r\n\r\n  abstract get fixedMicrocreditCampaign(): any;\r\n\r\n  abstract get access(): Array<any>;\r\n\r\n  abstract get subAccess(): Array<any>;\r\n\r\n  abstract get version(): string;\r\n\r\n  abstract get mapApiKey(): string;\r\n\r\n  abstract get apiUrl(): string;\r\n\r\n  abstract get openUrl(): string;\r\n\r\n  abstract get staticUrl(): string;\r\n\r\n  abstract get authTimeOuter(): number;\r\n}\r\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "mapOptions": {
                    "name": "mapOptions",
                    "getSignature": {
                        "name": "mapOptions",
                        "type": "any",
                        "returnType": "any",
                        "line": 2
                    }
                },
                "fixedMicrocreditCampaign": {
                    "name": "fixedMicrocreditCampaign",
                    "getSignature": {
                        "name": "fixedMicrocreditCampaign",
                        "type": "any",
                        "returnType": "any",
                        "line": 4
                    }
                },
                "access": {
                    "name": "access",
                    "getSignature": {
                        "name": "access",
                        "type": "",
                        "returnType": "Array<any>",
                        "line": 6
                    }
                },
                "subAccess": {
                    "name": "subAccess",
                    "getSignature": {
                        "name": "subAccess",
                        "type": "",
                        "returnType": "Array<any>",
                        "line": 8
                    }
                },
                "version": {
                    "name": "version",
                    "getSignature": {
                        "name": "version",
                        "type": "string",
                        "returnType": "string",
                        "line": 10
                    }
                },
                "mapApiKey": {
                    "name": "mapApiKey",
                    "getSignature": {
                        "name": "mapApiKey",
                        "type": "string",
                        "returnType": "string",
                        "line": 12
                    }
                },
                "apiUrl": {
                    "name": "apiUrl",
                    "getSignature": {
                        "name": "apiUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 14
                    }
                },
                "openUrl": {
                    "name": "openUrl",
                    "getSignature": {
                        "name": "openUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 16
                    }
                },
                "staticUrl": {
                    "name": "staticUrl",
                    "getSignature": {
                        "name": "staticUrl",
                        "type": "string",
                        "returnType": "string",
                        "line": 18
                    }
                },
                "authTimeOuter": {
                    "name": "authTimeOuter",
                    "getSignature": {
                        "name": "authTimeOuter",
                        "type": "number",
                        "returnType": "number",
                        "line": 20
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IItemsService",
            "id": "class-IItemsService-dfb2e32bfabd38ce4e9d6bd5b3a6d3fb",
            "file": "projects/sng-core/src/lib/services/item.interface.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport {\r\n  Offer,\r\n  Event,\r\n  Message,\r\n  Post,\r\n  MicrocreditCampaign,\r\n  PostEvent\r\n} from '../model';\r\n\r\nexport abstract class IItemsService {\r\n\r\n  abstract readAllOffers(offset: string): Observable<Offer[]>;\r\n\r\n  abstract readOffersByStore(partnerId: string, offset: string): Observable<Offer[]>;\r\n\r\n  abstract createOffer(formData: FormData): Observable<Message>;\r\n\r\n  abstract editOffer(partnerId: string, offerId: string, formData: FormData): Observable<Message>;\r\n\r\n  abstract readOffer(partnerId: string, offerId: string): Observable<Offer>;\r\n\r\n  abstract deleteOffer(partnerId: string, offerId: string): Observable<Offer>;\r\n\r\n  /**\r\n   * Events\r\n   */\r\n  abstract readAllPrivateEvents(offset: string): Observable<Event[]>;\r\n\r\n  abstract readPrivateEventsByStore(partnerId: string, offset: string): Observable<Event[]>;\r\n\r\n  abstract createEvent(formData: FormData): Observable<Message>;\r\n\r\n  abstract readEvent(partnerId: string, postId: string): Observable<Event>;\r\n\r\n  abstract editEvent(partnerId: string, eventId: string, formData: FormData): Observable<Message>;\r\n\r\n  abstract deleteEvent(partnerId: string, eventId: string): Observable<Offer>;\r\n\r\n  /**\r\n   * Posts\r\n   */\r\n  abstract readAllPrivatePosts(offset: string): Observable<Post[]>;\r\n\r\n  abstract readPrivatePostsByStore(partnerId: string, offset: string): Observable<Post[]>;\r\n\r\n  abstract createPost(formData: FormData): Observable<Message[]>;\r\n\r\n  abstract readPost(partnerId: string, postId: string): Observable<Post>;\r\n\r\n  abstract editPost(partnerId: string, postId: string, formData: FormData): Observable<Message>;\r\n\r\n  abstract deletePost(partnerId: string, postId: string): Observable<Offer>;\r\n\r\n  /**\r\n   * Posts & Events\r\n   */\r\n  abstract readAllPrivatePostsEvents(offset: string): Observable<PostEvent[]>;\r\n\r\n  abstract readPrivatePostsEventsByStore(partnerId: string, offset: string): Observable<PostEvent[]>;\r\n\r\n  /**\r\n   * Microcredit Campaigns\r\n   */\r\n  abstract readAllPrivateMicrocreditCampaigns(offset: string): Observable<MicrocreditCampaign[]>;\r\n\r\n  abstract readPrivateMicrocreditCampaignsByStore(partnerId: string, offset: string): Observable<MicrocreditCampaign[]>;\r\n\r\n  abstract oneClickCreateMicrocreditCampaign(formData: FormData, token: string): Observable<Message>;\r\n\r\n  abstract createMicrocreditCampaign(formData: FormData): Observable<MicrocreditCampaign>;\r\n\r\n  abstract editCampaign(partnerId: string, campaignId: string, formData: FormData): Observable<Message>;\r\n\r\n  abstract publishCampaign(partnerId: string, campaignId: string, formData: FormData): Observable<Message>;\r\n\r\n  abstract readCampaign(partnerId: string, campaignId: string): Observable<MicrocreditCampaign>;\r\n\r\n  abstract deleteCampaign(partnerId: string, campaignId: string): Observable<Message>;\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "createEvent",
                    "args": [
                        {
                            "name": "formData",
                            "type": "FormData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 33,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "FormData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createMicrocreditCampaign",
                    "args": [
                        {
                            "name": "formData",
                            "type": "FormData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MicrocreditCampaign>",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "FormData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createOffer",
                    "args": [
                        {
                            "name": "formData",
                            "type": "FormData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "FormData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPost",
                    "args": [
                        {
                            "name": "formData",
                            "type": "FormData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message[]>",
                    "typeParameters": [],
                    "line": 48,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "FormData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCampaign",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "campaignId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 80,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "campaignId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteEvent",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "eventId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Offer>",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteOffer",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "offerId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Offer>",
                    "typeParameters": [],
                    "line": 24,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePost",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "postId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Offer>",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editCampaign",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "campaignId",
                            "type": "string"
                        },
                        {
                            "name": "formData",
                            "type": "FormData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "campaignId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formData",
                            "type": "FormData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editEvent",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "eventId",
                            "type": "string"
                        },
                        {
                            "name": "formData",
                            "type": "FormData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "eventId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formData",
                            "type": "FormData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editOffer",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "offerId",
                            "type": "string"
                        },
                        {
                            "name": "formData",
                            "type": "FormData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formData",
                            "type": "FormData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editPost",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "postId",
                            "type": "string"
                        },
                        {
                            "name": "formData",
                            "type": "FormData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 52,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formData",
                            "type": "FormData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "oneClickCreateMicrocreditCampaign",
                    "args": [
                        {
                            "name": "formData",
                            "type": "FormData"
                        },
                        {
                            "name": "token",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 70,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "FormData",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "publishCampaign",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "campaignId",
                            "type": "string"
                        },
                        {
                            "name": "formData",
                            "type": "FormData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "campaignId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formData",
                            "type": "FormData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readAllOffers",
                    "args": [
                        {
                            "name": "offset",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Offer[]>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readAllPrivateEvents",
                    "args": [
                        {
                            "name": "offset",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Event[]>",
                    "typeParameters": [],
                    "line": 29,
                    "description": "<p>Events</p>\n",
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readAllPrivateMicrocreditCampaigns",
                    "args": [
                        {
                            "name": "offset",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MicrocreditCampaign[]>",
                    "typeParameters": [],
                    "line": 66,
                    "description": "<p>Microcredit Campaigns</p>\n",
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readAllPrivatePosts",
                    "args": [
                        {
                            "name": "offset",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Post[]>",
                    "typeParameters": [],
                    "line": 44,
                    "description": "<p>Posts</p>\n",
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readAllPrivatePostsEvents",
                    "args": [
                        {
                            "name": "offset",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PostEvent[]>",
                    "typeParameters": [],
                    "line": 59,
                    "description": "<p>Posts &amp; Events</p>\n",
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readCampaign",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "campaignId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MicrocreditCampaign>",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "campaignId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readEvent",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "postId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Event>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readOffer",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "offerId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Offer>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readOffersByStore",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "offset",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Offer[]>",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readPost",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "postId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Post>",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "postId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readPrivateEventsByStore",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "offset",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Event[]>",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readPrivateMicrocreditCampaignsByStore",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "offset",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MicrocreditCampaign[]>",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readPrivatePostsByStore",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "offset",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Post[]>",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readPrivatePostsEventsByStore",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "offset",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PostEvent[]>",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ILoyaltyService",
            "id": "class-ILoyaltyService-3968f7ffc97d84f639eb773ddb97f2d8",
            "file": "projects/sng-core/src/lib/services/loyalty.interface.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport { Points, Activity, Message, LoyaltyTransaction } from '../model';\r\n\r\nexport abstract class ILoyaltyService {\r\n\r\n  abstract readBalance(): Observable<Points>;\r\n\r\n  abstract readBadge(): Observable<Activity>;\r\n\r\n  abstract readBalanceByPartner(to: string):\r\n    Observable<Points>;\r\n\r\n  abstract readBadgeByPartner(to: string):\r\n    Observable<Activity>;\r\n\r\n  abstract readTransactions(offset: string):\r\n    Observable<LoyaltyTransaction[]>;\r\n\r\n  abstract earnPoints(to: string, password: string, amount: number):\r\n    Observable<Message>;\r\n\r\n  abstract redeemPoints(to: string, password: string, points: number):\r\n    Observable<Message>;\r\n\r\n  abstract redeemOffer(partnerId: string, offerId: string, to: string, password: string, points: number, quantity: number):\r\n    Observable<Message>;\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "earnPoints",
                    "args": [
                        {
                            "name": "to",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        },
                        {
                            "name": "amount",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "to",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readBadge",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Activity>",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "readBadgeByPartner",
                    "args": [
                        {
                            "name": "to",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Activity>",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "to",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readBalance",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Points>",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "readBalanceByPartner",
                    "args": [
                        {
                            "name": "to",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Points>",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "to",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readTransactions",
                    "args": [
                        {
                            "name": "offset",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LoyaltyTransaction[]>",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redeemOffer",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "offerId",
                            "type": "string"
                        },
                        {
                            "name": "to",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        },
                        {
                            "name": "points",
                            "type": "number"
                        },
                        {
                            "name": "quantity",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "points",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redeemPoints",
                    "args": [
                        {
                            "name": "to",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        },
                        {
                            "name": "points",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "to",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "points",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IMenuService",
            "id": "class-IMenuService-32afe61f186f9c8f4cd3b5f901a028b5",
            "file": "projects/sng-core/src/lib/services/menu.interface.ts",
            "type": "class",
            "sourceCode": "import { Menu } from '../model';\r\n\r\nexport abstract class IMenuService {\r\n  abstract openNav(): void;\r\n\r\n  abstract closeNav(): void;\r\n\r\n  abstract toggleNav(): void;\r\n\r\n  abstract get getUserMenu(): Menu[];\r\n\r\n  abstract get getPartnerMenu(): Menu[];\r\n\r\n  abstract get getAdminMenu(): Menu[];\r\n\r\n  abstract get getMemberMenu(): Menu[];\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "closeNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "openNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "toggleNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        117
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "getUserMenu": {
                    "name": "getUserMenu",
                    "getSignature": {
                        "name": "getUserMenu",
                        "type": "[]",
                        "returnType": "Menu[]",
                        "line": 10
                    }
                },
                "getPartnerMenu": {
                    "name": "getPartnerMenu",
                    "getSignature": {
                        "name": "getPartnerMenu",
                        "type": "[]",
                        "returnType": "Menu[]",
                        "line": 12
                    }
                },
                "getAdminMenu": {
                    "name": "getAdminMenu",
                    "getSignature": {
                        "name": "getAdminMenu",
                        "type": "[]",
                        "returnType": "Menu[]",
                        "line": 14
                    }
                },
                "getMemberMenu": {
                    "name": "getMemberMenu",
                    "getSignature": {
                        "name": "getMemberMenu",
                        "type": "[]",
                        "returnType": "Menu[]",
                        "line": 16
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IMicrocreditService",
            "id": "class-IMicrocreditService-49475802e52ff136c377986fc44ee16c",
            "file": "projects/sng-core/src/lib/services/microcredit.interface.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport { Activity, MicrocreditSupport, PaymentDetails, MicrocreditTransaction, Message } from '../model';\r\n\r\nexport abstract class IMicrocreditService {\r\n\r\n  abstract readBadge():\r\n    Observable<Activity>;\r\n\r\n  abstract readAllBackerSupports(offset: string):\r\n    Observable<MicrocreditSupport[]>;\r\n\r\n  abstract readAllSupportsByMicrocreditCampaign(partnerId: string, campaignId: string):\r\n    Observable<MicrocreditSupport[]>;\r\n\r\n  abstract readBackerSupportsByMicrocreditCampaign(partnerId: string, campaignId: string, identifier: string):\r\n    Observable<MicrocreditSupport[]>;\r\n\r\n  abstract confirmPayment(partnerId: string, campaignId: string, supportId: string):\r\n    Observable<PaymentDetails>;\r\n\r\n  abstract readTransactions(offset: string):\r\n    Observable<MicrocreditTransaction[]>;\r\n\r\n  abstract earnTokens(partnerId: string, campaignId: string, amount: number, method: string, paid: boolean):\r\n    Observable<PaymentDetails>;\r\n\r\n  abstract earnTokensByPartner(partnerId: string, campaignId: string, identifier: string, amount: number, method: string, paid: boolean):\r\n    Observable<PaymentDetails>;\r\n\r\n  abstract redeemTokens(partnerId: string, campaignId: string, to: string, tokens: number, password: string, supportId: string):\r\n    Observable<Message>;\r\n\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "confirmPayment",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "campaignId",
                            "type": "string"
                        },
                        {
                            "name": "supportId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PaymentDetails>",
                    "typeParameters": [],
                    "line": 19,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "campaignId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "supportId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "earnTokens",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "campaignId",
                            "type": "string"
                        },
                        {
                            "name": "amount",
                            "type": "number"
                        },
                        {
                            "name": "method",
                            "type": "string"
                        },
                        {
                            "name": "paid",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PaymentDetails>",
                    "typeParameters": [],
                    "line": 25,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "campaignId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "method",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paid",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "earnTokensByPartner",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "campaignId",
                            "type": "string"
                        },
                        {
                            "name": "identifier",
                            "type": "string"
                        },
                        {
                            "name": "amount",
                            "type": "number"
                        },
                        {
                            "name": "method",
                            "type": "string"
                        },
                        {
                            "name": "paid",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PaymentDetails>",
                    "typeParameters": [],
                    "line": 28,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "campaignId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "identifier",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "method",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paid",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readAllBackerSupports",
                    "args": [
                        {
                            "name": "offset",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MicrocreditSupport[]>",
                    "typeParameters": [],
                    "line": 10,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readAllSupportsByMicrocreditCampaign",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "campaignId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MicrocreditSupport[]>",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "campaignId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readBackerSupportsByMicrocreditCampaign",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "campaignId",
                            "type": "string"
                        },
                        {
                            "name": "identifier",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MicrocreditSupport[]>",
                    "typeParameters": [],
                    "line": 16,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "campaignId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "identifier",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readBadge",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Activity>",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "readTransactions",
                    "args": [
                        {
                            "name": "offset",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MicrocreditTransaction[]>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redeemTokens",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "campaignId",
                            "type": "string"
                        },
                        {
                            "name": "to",
                            "type": "string"
                        },
                        {
                            "name": "tokens",
                            "type": "number"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        },
                        {
                            "name": "supportId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Message>",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "campaignId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tokens",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "supportId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IPartnersService",
            "id": "class-IPartnersService-c2da66ad6df056f3ff6ed1ab58935dd8",
            "file": "projects/sng-core/src/lib/services/partners.interface.ts",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\n\r\nimport { Partner } from '../model';\r\n\r\nexport abstract class IPartnersService {\r\n\r\n  abstract readPartners(offset: string): Observable<Partner[]>;\r\n\r\n  abstract readPartnerInfo(partnerId: string): Observable<Partner>;\r\n\r\n  abstract updatePartnerInfo(partnerId: string, formData: FormData): Observable<Partner>;\r\n\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "readPartnerInfo",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Partner>",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readPartners",
                    "args": [
                        {
                            "name": "offset",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Partner[]>",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePartnerInfo",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        },
                        {
                            "name": "formData",
                            "type": "FormData"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Partner>",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formData",
                            "type": "FormData",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IStaticDataService",
            "id": "class-IStaticDataService-04824081b498006a96bacbc92a53d1f3",
            "file": "projects/sng-core/src/lib/services/static-data.interface.ts",
            "type": "class",
            "sourceCode": "import { PaymentList } from '../model';\r\n\r\nimport { OwlOptions } from 'ngx-owl-carousel-o';\r\n\r\nexport abstract class IStaticDataService {\r\n  abstract get getOwlOptionsTwo(): OwlOptions;\r\n\r\n  abstract get getMapPinStyle(): any;\r\n\r\n  abstract get getOwlOptionsThree(): OwlOptions;\r\n\r\n  abstract get getPaymentsList(): PaymentList[];\r\n\r\n  abstract get getBadgesImages(): any;\r\n}\r\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "getOwlOptionsTwo": {
                    "name": "getOwlOptionsTwo",
                    "getSignature": {
                        "name": "getOwlOptionsTwo",
                        "type": "",
                        "returnType": "OwlOptions",
                        "line": 6
                    }
                },
                "getMapPinStyle": {
                    "name": "getMapPinStyle",
                    "getSignature": {
                        "name": "getMapPinStyle",
                        "type": "any",
                        "returnType": "any",
                        "line": 8
                    }
                },
                "getOwlOptionsThree": {
                    "name": "getOwlOptionsThree",
                    "getSignature": {
                        "name": "getOwlOptionsThree",
                        "type": "",
                        "returnType": "OwlOptions",
                        "line": 10
                    }
                },
                "getPaymentsList": {
                    "name": "getPaymentsList",
                    "getSignature": {
                        "name": "getPaymentsList",
                        "type": "[]",
                        "returnType": "PaymentList[]",
                        "line": 12
                    }
                },
                "getBadgesImages": {
                    "name": "getBadgesImages",
                    "getSignature": {
                        "name": "getBadgesImages",
                        "type": "any",
                        "returnType": "any",
                        "line": 14
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ITranslationService",
            "id": "class-ITranslationService-daddfff3d8ecc3351d943ff11662cb9b",
            "file": "projects/sng-core/src/lib/services/translation.interface.ts",
            "type": "class",
            "sourceCode": "import { Locale, LanguageFlag } from '../model';\r\n\r\nexport abstract class ITranslationService {\r\n\r\n  abstract setLanguage(lang: string): void;\r\n\r\n  abstract getSelectedLanguage(): string;\r\n\r\n  abstract loadTranslations(...args: Locale[]): void;\r\n\r\n  abstract getAvailableLanguages(): LanguageFlag[];\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getAvailableLanguages",
                    "args": [],
                    "optional": false,
                    "returnType": "LanguageFlag[]",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "getSelectedLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        117
                    ]
                },
                {
                    "name": "loadTranslations",
                    "args": [
                        {
                            "name": "args",
                            "type": "Locale[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "Locale[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-3a2e510010fc1c8b28236fbb2171827b",
            "file": "projects/sng-core/src/lib/components/layout/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentRouteUrl",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "menu",
                    "type": "Menu[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getItemCssClasses",
                    "args": [
                        {
                            "name": "item",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { filter } from 'rxjs/operators';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\n\r\n// Models\r\nimport { Menu } from '../../../model';\r\n// Services\r\nimport { IMenuService, IAuthenticationService } from '../../../services';\r\n\r\n@Component({\r\n  selector: 'sng-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.scss']\r\n})\r\nexport class FooterComponent implements OnInit {\r\n  currentRouteUrl: string = '';\r\n  public menu: Menu[];\r\n\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n    private router: Router,\r\n    private menuService: IMenuService,\r\n    private authenticationService: IAuthenticationService\r\n  ) {\r\n    const currentUser = this.authenticationService.currentUserValue;\r\n    this.menu = (currentUser.user['access'] === 'member') ? this.menuService.getMemberMenu : [];\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.currentRouteUrl = this.router.url.split(/[?#]/)[0];\r\n    this.router.events\r\n      .pipe(filter(event => event instanceof NavigationEnd))\r\n      .subscribe(event => {\r\n        this.currentRouteUrl = this.router.url.split(/[?#]/)[0];\r\n        this.cdr.markForCheck();\r\n      });\r\n  }\r\n\r\n  getItemCssClasses(item: string): string {\r\n    let classes = 'footer-menu-item';\r\n    if (this.currentRouteUrl.indexOf(item) !== -1) {\r\n      classes += ' footer-menu-item-active';\r\n    }\r\n    return classes;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".footer-wrapper {\r\n  -webkit-box-shadow: 17px 22px 45px 8px rgba(0, 0, 0, 0.2);\r\n  -moz-box-shadow: 17px 22px 45px 8px rgba(0, 0, 0, 0.2);\r\n  box-shadow: 17px 22px 45px 8px rgba(0, 0, 0, 0.2);\r\n\r\n\tposition: fixed;\r\n\tbottom: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbackground-color: #fff;\r\n\twidth: 100%;\r\n\tpadding: 10px;\r\n  z-index: 1000;\r\n\r\n\t.footer-content {\r\n\t\tmax-width: 350px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: space-around;\r\n    margin: 0 auto;\r\n\r\n\t\ta {\r\n\t\t\ttext-align: center;\r\n\t\t\tdisplay: block;\r\n\t\t\tfont-weight: 600;\r\n\t\t\tcolor: #000;\r\n\r\n      &:hover {\r\n\t\t\t\ttext-decoration: none;\r\n\t\t\t}\r\n\r\n      .mdi {\r\n\t\t\t\tfont-size: 40px;\r\n\t\t\t\tline-height: 1;\r\n\t\t\t}\r\n    }\r\n\r\n    .footer-menu-item {\r\n\t\t\topacity: 0.5;\r\n\t\t\tmargin: 5px 5px;\r\n\t\t\ttransition: opacity 0.3s;\r\n\r\n      &-active {\r\n\t\t\t\topacity: 1;\r\n\t\t\t\ta {\r\n\t\t\t\t\tcolor: var(--font-primary-color);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n      &:hover {\r\n\t\t\t\topacity: 1;\r\n\t\t\t\ta {\r\n\t\t\t\t\tcolor: var(--font-primary-color);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "menuService",
                        "type": "IMenuService"
                    },
                    {
                        "name": "authenticationService",
                        "type": "IAuthenticationService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuService",
                        "type": "IMenuService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "IAuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"footer-wrapper\">\r\n  <div class=\"footer-content\">\r\n    <div *ngFor=\"let item of menu\" [ngClass]=\"getItemCssClasses(item.link)\">\r\n      <a [routerLink]=\"['/'+item.link]\">\r\n        <span class=\"mdi mdi-{{item.icon}}\"></span>\r\n        <div>\r\n          {{item.title | translate}}\r\n        </div>\r\n      </a>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LanguageSwitcherComponent",
            "id": "component-LanguageSwitcherComponent-abb1346b3cb2effca3815b660b743e3b",
            "file": "projects/sng-core/src/lib/components/layout/language-switcher/language-switcher.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-language-switcher",
            "styleUrls": [
                "./language-switcher.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./language-switcher.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "iconType",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "language",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "languages",
                    "type": "LanguageFlag[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "setLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "description": "<p>Set language</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1054,
                                "end": 1058,
                                "flags": 0,
                                "escapedText": "lang"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1048,
                                "end": 1053,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>: string</p>\n"
                        }
                    ]
                },
                {
                    "name": "setSelectedLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "description": "<p>Set selected language</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { NavigationStart, Router } from '@angular/router';\r\n// RxJS\r\nimport { filter } from 'rxjs/operators';\r\n// Translate\r\nimport { ITranslationService } from '../../../services/translation.interface';\r\n\r\nimport { LanguageFlag } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-language-switcher',\r\n  templateUrl: './language-switcher.component.html',\r\n  styleUrls: ['./language-switcher.component.scss'],\r\n})\r\nexport class LanguageSwitcherComponent implements OnInit {\r\n  language: any;\r\n  iconType: any;\r\n  languages: LanguageFlag[];\r\n\r\n  constructor(\r\n    private translationService: ITranslationService,\r\n    private router: Router\r\n  ) {\r\n    this.languages = translationService.getAvailableLanguages();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.setSelectedLanguage();\r\n    this.router.events\r\n      .pipe(filter((event) => event instanceof NavigationStart))\r\n      .subscribe((event) => {\r\n        this.setSelectedLanguage();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Set language\r\n   *\r\n   * @param lang: string\r\n   */\r\n  setLanguage(lang: string): void {\r\n    this.languages.forEach((language: LanguageFlag) => {\r\n      if (language.lang === lang) {\r\n        language.active = true;\r\n        this.language = language;\r\n      } else {\r\n        language.active = false;\r\n      }\r\n    });\r\n    this.translationService.setLanguage(lang);\r\n  }\r\n\r\n  /**\r\n   * Set selected language\r\n   */\r\n  setSelectedLanguage(): void {\r\n    this.setLanguage(this.translationService.getSelectedLanguage());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@mixin language-switcher() {\r\n  margin-right: 10px;\r\n\t.toggler {\r\n\t\twidth: 30px;\r\n\t\tcursor: pointer;\r\n\t\timg {\r\n\t\t\tmax-width: 100%;\r\n\t\t\tborder-radius: 50%;\r\n\t\t}\r\n\t}\r\n\t.dropdown-menu {\r\n\t\tpadding: 10px 0 0;\r\n\t\tul {\r\n\t\t\tlist-style: none;\r\n\t\t\tpadding: 0;\r\n\t\t\ta {\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tjustify-content: space-apart;\r\n\t\t\t\tmargin-bottom: 2px;\r\n\t\t\t\tpadding: 7px 9px;\r\n\t\t\t\timg {\r\n\t\t\t\t\tmax-width: 30px;\r\n\t\t\t\t\tmargin-right: 10px;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t.lang-active {\r\n\t\t\tbackground-color: var(--background-default);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.language-switcher {\r\n  @include language-switcher();\r\n}\r\n",
                    "styleUrl": "./language-switcher.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translationService",
                        "type": "ITranslationService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "translationService",
                        "type": "ITranslationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div ngbDropdown placement=\"bottom-right\" class=\"language-switcher\" autoClose=\"true\">\r\n  <div ngbDropdownToggle class=\"toggler\">\r\n    <span class=\"\" [ngClass]=\"{ 'header_topbar-icon--brand' : iconType === 'brand' }\">\r\n      <img class=\"\" src=\"{{language?.flag}}\" alt=\"\" />\r\n    </span>\r\n  </div>\r\n  <div ngbDropdownMenu aria-labelledby=\"dropdownBasic1\"\r\n    class=\"dropdown-menu dropdown-menu-fit dropdown-menu-right dropdown-menu-anim dropdown-menu-top-unround\">\r\n    <ul class=\"\">\r\n      <ng-container *ngFor=\"let language of languages\">\r\n        <li ngbDropdownItem class=\"\" [ngClass]=\"{'item-active': language.active}\">\r\n          <a href=\"javascript:;\" (click)=\"setLanguage(language.lang)\" [ngClass]=\"{'lang-active': language.active}\"\r\n            class=\"\">\r\n            <span class=\"\">\r\n              <img src=\"{{language.flag}}\">\r\n            </span>\r\n            <span class=\"\">{{language.name}}</span>\r\n          </a>\r\n        </li>\r\n      </ng-container>\r\n    </ul>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "LoyaltyBadgeCardComponent",
            "id": "component-LoyaltyBadgeCardComponent-62bfc445251442cb0547d572889e70a1",
            "file": "projects/sng-core/src/lib/components/cards/loyalty_badge-card/loyalty_badge-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-loyalty_badge-card",
            "styleUrls": [
                "./loyalty_badge-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loyalty_badge-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "badgesImages",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "loyalty_badge",
                    "type": "Activity",
                    "optional": false,
                    "description": "<p>Content Variables</p>\n",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "translate",
                    "type": "TranslateService",
                    "optional": false,
                    "description": ": TranslateService",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchBadgeContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92
                },
                {
                    "name": "fetchLoyaltyBadgeData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "description": "<p>Fetch Loyalty Badge</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "description": "<p>On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "description": "<p>On Init</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ChangeDetectorRef, ViewChild, HostListener } from '@angular/core';\r\nimport { tap, finalize, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport {\r\n  IStaticDataService,\r\n  IContentService,\r\n  ILoyaltyService\r\n} from '../../../services';\r\n\r\nimport { Activity } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-loyalty_badge-card',\r\n  templateUrl: './loyalty_badge-card.component.html',\r\n  styleUrls: ['./loyalty_badge-card.component.scss']\r\n})\r\nexport class LoyaltyBadgeCardComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Content Variables\r\n   */\r\n  public loyalty_badge: Activity; //The loyalty badge of member\r\n  badgesImages: any;\r\n\r\n  loading: boolean = false;\r\n  private unsubscribe: Subject<any>;\r\n\r\n  /**\r\n   * Component Constructor\r\n   *\r\n   * @param cdRef: ChangeDetectorRef\r\n   * @param translate: TranslateService\r\n   * @param contentService: ContentService\r\n   * @param loyaltyService: LoyaltyService\r\n   */\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    public translate: TranslateService,\r\n    private staticDataService: IStaticDataService,\r\n    private contentService: IContentService,\r\n    private loyaltyService: ILoyaltyService,\r\n  ) {\r\n    this.badgesImages = this.staticDataService.getBadgesImages;\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    this.fetchLoyaltyBadgeData();\r\n  }\r\n\r\n  /**\r\n   * On Destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch Loyalty Badge\r\n   */\r\n  fetchLoyaltyBadgeData(): void {\r\n    this.loyaltyService.readBadge()\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.loyalty_badge = data;\r\n            console.log('On Fetch Loyalty Badge', data);\r\n            this.fetchBadgeContent();\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }),\r\n        takeUntil(this.unsubscribe),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n\r\n  fetchBadgeContent(): void {\r\n    // Set Data for Badge based On Level\r\n    switch (this.loyalty_badge.slug) {\r\n      case 1:\r\n        this.loyalty_badge.image = this.badgesImages.supporter;\r\n        // this.badge.text_id = 5;\r\n        this.loyalty_badge.text_id = 'Supporter';\r\n        break;\r\n      case 2:\r\n        this.loyalty_badge.image = this.badgesImages.helper;\r\n        // this.badge.text_id = 7;\r\n        this.loyalty_badge.text_id = 'Helper';\r\n        break;\r\n      case 3:\r\n        this.loyalty_badge.image = this.badgesImages.one_of_us;\r\n        // this.badge.text_id = 9;\r\n        this.loyalty_badge.text_id = 'One of Us';\r\n        break;\r\n    }\r\n    // Get static content of Badge\r\n    this.contentService.readContentById(this.loyalty_badge.text_id)\r\n      // this.staticContentService.readText(this.badge.text_id)\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.loyalty_badge.text = data;\r\n            console.log(this.translate.currentLang)\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }\r\n        ),\r\n        takeUntil(this.unsubscribe),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      ).subscribe();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n\r\n.badge-container {\r\n  display: flex;\r\n  margin-top: 1.2rem;\r\n  margin-bottom: 2rem;\r\n\r\n  img {\r\n    max-width: 100px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./loyalty_badge-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "staticDataService",
                        "type": "IStaticDataService"
                    },
                    {
                        "name": "contentService",
                        "type": "IContentService"
                    },
                    {
                        "name": "loyaltyService",
                        "type": "ILoyaltyService"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 922,
                            "end": 927,
                            "flags": 0,
                            "escapedText": "cdRef"
                        },
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "pos": 916,
                            "end": 921,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ChangeDetectorRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 960,
                            "end": 969,
                            "flags": 0,
                            "escapedText": "translate"
                        },
                        "type": "TranslateService",
                        "tagName": {
                            "pos": 954,
                            "end": 959,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: TranslateService</p>\n"
                    },
                    {
                        "name": "staticDataService",
                        "type": "IStaticDataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 1001,
                            "end": 1015,
                            "flags": 0,
                            "escapedText": "contentService"
                        },
                        "type": "IContentService",
                        "tagName": {
                            "pos": 995,
                            "end": 1000,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ContentService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1045,
                            "end": 1059,
                            "flags": 0,
                            "escapedText": "loyaltyService"
                        },
                        "type": "ILoyaltyService",
                        "tagName": {
                            "pos": 1039,
                            "end": 1044,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: LoyaltyService</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!-- <div class=\"dashboard\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-6\"> -->\r\n\r\n<!--begin::Loyalty Badge-->\r\n<div class=\"row\">\r\n  <div *ngIf=\"loyalty_badge\" class=\"badge-container\">\r\n    <div class=\"mr-4\">\r\n      <img *ngIf=\"loyalty_badge.image\" [src]=\"loyalty_badge.image\">\r\n    </div>\r\n    <div *ngIf=\"loyalty_badge.text\" class=\"bagde-text\">\r\n      <div *ngIf=\"translate.currentLang == 'en'\">\r\n        <h2>{{loyalty_badge.text.en_title}}</h2>\r\n        <p [innerHTML]=\"loyalty_badge.text.en_content\"></p>\r\n      </div>\r\n      <div *ngIf=\"translate.currentLang == 'el'\">\r\n        <h2>{{loyalty_badge.text.el_title}}</h2>\r\n        <p [innerHTML]=\"loyalty_badge.text.el_content\"></p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!--end::Loyalty Badge-->\r\n"
        },
        {
            "name": "LoyaltyBalanceCardComponent",
            "id": "component-LoyaltyBalanceCardComponent-9fb1978addad71b8b98079f5835e3a5d",
            "file": "projects/sng-core/src/lib/components/cards/loyalty_balance-card/loyalty_balance-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-loyalty_balance-card",
            "styleUrls": [
                "./loyalty_balance-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loyalty_balance-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "balance",
                    "type": "Balance",
                    "optional": false,
                    "description": "<p>Content Variables</p>\n",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "balanceModal",
                    "type": "NgbModalRef",
                    "optional": false,
                    "description": "<p>Children Modals</p>\n",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'balanceModal'"
                        }
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "translate",
                    "type": "TranslateService",
                    "optional": false,
                    "description": ": TranslateService",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "controlModalState",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "description": "<p>Close Modal on Browser Back Button</p>\n",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchLoyaltyBalanceData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "description": "<p>Fetch Loyalty Balance</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "description": "<p>On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "description": "<p>On Init</p>\n"
                },
                {
                    "name": "openBalance",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>Open Wallet Modal</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:popstate",
                    "args": [],
                    "argsDecorator": [],
                    "line": 96
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ChangeDetectorRef, ViewChild, HostListener } from '@angular/core';\r\nimport { tap, finalize, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n/**\r\n * Services\r\n */\r\nimport {\r\n  IStaticDataService,\r\n  IContentService,\r\n  ILoyaltyService\r\n} from '../../../services';\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { Balance } from '../../../model';\r\n\r\n\r\n@Component({\r\n  selector: 'sng-loyalty_balance-card',\r\n  templateUrl: './loyalty_balance-card.component.html',\r\n  styleUrls: ['./loyalty_balance-card.component.scss']\r\n})\r\nexport class LoyaltyBalanceCardComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Children Modals\r\n   */\r\n  @ViewChild('balanceModal') balanceModal: NgbModalRef;\r\n\r\n  /**\r\n   * Content Variables\r\n   */\r\n  public balance: Balance; // The loyalty badge of member\r\n\r\n  loading = false;\r\n  private unsubscribe: Subject<any>;\r\n\r\n  /**\r\n   * Component Constructor\r\n   *\r\n   * @param cdRef: ChangeDetectorRef\r\n   * @param modalService: NgbModal\r\n   * @param translate: TranslateService\r\n   * @param contentService: ContentService\r\n   * @param loyaltyService: LoyaltyService\r\n   */\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private modalService: NgbModal,\r\n    public translate: TranslateService,\r\n    private contentService: IContentService,\r\n    private loyaltyService: ILoyaltyService,\r\n  ) {\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    this.fetchLoyaltyBalanceData();\r\n  }\r\n\r\n  /**\r\n   * On Destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n  /**\r\n   * Close Modal on Browser Back Button\r\n   */\r\n  controlModalState(state: boolean): void {\r\n    if (state) {\r\n      const modalState = {\r\n        modal: true,\r\n        desc: 'MemberDashboardModals'\r\n      };\r\n      history.pushState(modalState, null);\r\n    } else {\r\n      if (window.history.state.modal) {\r\n        history.back();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('window:popstate')\r\n  dismissModal(): void {\r\n    if (this.modalService.hasOpenModals()) {\r\n      this.modalService.dismissAll();\r\n      this.controlModalState(false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch Loyalty Balance\r\n   */\r\n  fetchLoyaltyBalanceData(): void {\r\n    this.loyaltyService.readBalance()\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.balance = { points: parseInt(data.points, 16), address: data.address };\r\n            // Get static content of Balance Points\r\n            console.log(this.balance)\r\n            this.contentService.readContentById('Synergy Points')\r\n              // this.staticContentService.readText('18')\r\n              .pipe(\r\n                tap(\r\n                  data => {\r\n                    this.balance['text'] = data;\r\n                    console.log(this.balance);\r\n                  },\r\n                  error => {\r\n                    console.log(error);\r\n                  }\r\n                ),\r\n                takeUntil(this.unsubscribe),\r\n                finalize(() => {\r\n                  this.loading = false;\r\n                  this.cdRef.markForCheck();\r\n                })\r\n              ).subscribe();\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }),\r\n        takeUntil(this.unsubscribe),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Open Wallet Modal\r\n   */\r\n  openBalance(): void {\r\n    this.controlModalState(true);\r\n    this.modalService.open(this.balanceModal)\r\n      .result.then(\r\n        () => { this.controlModalState(false); console.log('closed'); },\r\n        () => { this.controlModalState(false); console.log('dismissed'); });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n\r\n.badge-container {\r\n  display: flex;\r\n  margin-top: 1.2rem;\r\n  margin-bottom: 2rem;\r\n\r\n  img {\r\n    max-width: 100px;\r\n  }\r\n}\r\n\r\n.dashboard-card {\r\n  margin-bottom: 2rem;\r\n  margin-top: 1rem;\r\n\r\n  &.offer-card {\r\n    padding-top: 0;\r\n  }\r\n}\r\n\r\n.wallet-card {\r\n  &-header {\r\n    border-bottom: 2px solid #eee;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  &-icon {\r\n    position: absolute;\r\n    top: -25px;\r\n    right: -8px;\r\n    cursor: pointer;\r\n    border-radius: 50%;\r\n    transition: box-shadow 0.3s;\r\n    color: #fff;\r\n    background-color: var(--tertiary-color);\r\n    font-size: 51px;\r\n    width: 75px;\r\n    height: 75px;\r\n    text-align: center;\r\n\r\n    &:hover {\r\n      box-shadow: 0 3px 11px -2px #d1cbcb;\r\n    }\r\n  }\r\n}\r\n\r\n.single {\r\n  //border-bottom: 1px solid #eee;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  margin-bottom: 20px;\r\n\r\n  &-content {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  .wallet-img {\r\n    margin-right: 20px;\r\n    width: 60px;\r\n\r\n    img {\r\n      width: 60px;\r\n      height: 60px;\r\n      object-fit: cover;\r\n      border-radius: 50%;\r\n    }\r\n  }\r\n\r\n  &-title {\r\n    font-size: 18px;\r\n    margin-bottom: 5px;\r\n  }\r\n\r\n  &-status {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    &.mat-warn {\r\n      background-color: var(--tertiary-color);\r\n    }\r\n\r\n    &.mat-primary {\r\n      background-color: var(--primary-color);\r\n    }\r\n  }\r\n\r\n  &-subtitle {\r\n    font-size: 14px;\r\n    margin-bottom: 5px;\r\n    color: #8b8b8b;\r\n\r\n    img {\r\n      position: relative;\r\n      top: -2px;\r\n      margin-right: 5px;\r\n    }\r\n  }\r\n\r\n  &-amount {\r\n    justify-content: flex-end;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    .points {\r\n      font-size: 1.4rem;\r\n    }\r\n  }\r\n}\r\n\r\n.balance {\r\n  &-title {\r\n    color: var(-font-dark-color);\r\n    margin-bottom: 0px;\r\n  }\r\n\r\n  &-amount {\r\n    .points {\r\n      color: var(--amount-color);\r\n    }\r\n  }\r\n}\r\n\r\n.wallet-coop,\r\n.wallet-row {\r\n  cursor: pointer;\r\n  transition: background-color 0.4s;\r\n\r\n  &:hover {\r\n    background-color: #f0f2f4;\r\n  }\r\n}\r\n\r\n.wallet-popup {\r\n  padding: 20px;\r\n\r\n  .row-flex {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n\r\n  .points {\r\n    font-size: 24px;\r\n  }\r\n}\r\n\r\n.qr-code-text {\r\n  background: #fff;\r\n  padding: 15px;\r\n}\r\n",
                    "styleUrl": "./loyalty_balance-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "contentService",
                        "type": "IContentService"
                    },
                    {
                        "name": "loyaltyService",
                        "type": "ILoyaltyService"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1114,
                            "end": 1119,
                            "flags": 0,
                            "escapedText": "cdRef"
                        },
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "pos": 1108,
                            "end": 1113,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ChangeDetectorRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1152,
                            "end": 1164,
                            "flags": 0,
                            "escapedText": "modalService"
                        },
                        "type": "NgbModal",
                        "tagName": {
                            "pos": 1146,
                            "end": 1151,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: NgbModal</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1188,
                            "end": 1197,
                            "flags": 0,
                            "escapedText": "translate"
                        },
                        "type": "TranslateService",
                        "tagName": {
                            "pos": 1182,
                            "end": 1187,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: TranslateService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1229,
                            "end": 1243,
                            "flags": 0,
                            "escapedText": "contentService"
                        },
                        "type": "IContentService",
                        "tagName": {
                            "pos": 1223,
                            "end": 1228,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ContentService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1273,
                            "end": 1287,
                            "flags": 0,
                            "escapedText": "loyaltyService"
                        },
                        "type": "ILoyaltyService",
                        "tagName": {
                            "pos": 1267,
                            "end": 1272,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: LoyaltyService</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"wallet_single_wrapper\">\r\n  <!--begin::Loyalty Points (Balance)-->\r\n  <!-- <div *ngIf=\"configAccess[1]\"> -->\r\n  <div *ngIf=\"balance\" class=\"single row wallet-row\" (click)=\"openBalance()\">\r\n    <div class=\"col-9 single-content\" *ngIf=\"balance.text\">\r\n      <span class=\"wallet-img\">\r\n        <img src=\"../../../assets/media/images/Synergy-Icon.png\" alt=\"Synergy\" />\r\n      </span>\r\n      <div class=\"\" *ngIf=\"translate.currentLang == 'en'\">\r\n        <div class=\"single-title\">{{balance.text.en_title}}</div>\r\n        <div class=\"single-subtitle\"><span\r\n            class=\"mdi mdi-shopping\"></span>{{'MEMBER.DASHBOARD.WALLET_SUBTITLE' | translate}}\r\n        </div>\r\n      </div>\r\n      <div class=\"\" *ngIf=\"translate.currentLang == 'el'\">\r\n        <div class=\"single-title\">{{balance.text.el_title}}</div>\r\n        <div class=\"single-subtitle\"><span\r\n            class=\"mdi mdi-shopping\"></span>{{'MEMBER.DASHBOARD.WALLET_SUBTITLE' | translate}}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-3 single-amount\">\r\n      <div *ngIf=\"balance\">\r\n        <span class=\"points\">{{balance.points}}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!-- </div> -->\r\n</div>\r\n\r\n<!--begin::Loyalty Balance Modal-->\r\n<ng-template #balanceModal let-c=\" close\" let-d=\"dismiss\">\r\n  <div class=\"container wallet-popup\">\r\n    <button type=\"button\" class=\"close-btn\" aria-label=\"Close\" (click)=\"d('Cross click')\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n    <div class=\"single row-flex\">\r\n      <div class=\"\">\r\n        <span class=\"wallet-img\">\r\n          <img src=\"../../../assets/media/images/Synergy-Icon.png\" alt=\"Synergy\" />\r\n        </span>\r\n      </div>\r\n      <div *ngIf=\"balance.text\" class=\"\">\r\n        <h3 *ngIf=\"translate.currentLang == 'en'\" class=\"balance-title\">{{balance.text.en_title}}</h3>\r\n        <h3 *ngIf=\"translate.currentLang == 'el'\" class=\"balance-title\">{{balance.text.el_title}}</h3>\r\n      </div>\r\n      <div *ngIf=\"balance.points\" class=\"balance-amount\">\r\n        <div>\r\n          <span class=\"points\">{{balance.points}}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"balance.text\" class=\"balance-text mt-3\">\r\n      <p *ngIf=\"translate.currentLang == 'en'\" [innerHTML]=\"balance.text.en_content\"></p>\r\n      <p *ngIf=\"translate.currentLang == 'el'\" [innerHTML]=\"balance.text.el_content\"></p>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<!--end::Loyalty Balance Modal-->\r\n"
        },
        {
            "name": "MapComponent",
            "id": "component-MapComponent-9ecc2381baa9d13a666e822d0e7f466d",
            "file": "projects/sng-core/src/lib/components/widgets/map/map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-map",
            "styleUrls": [
                "./map.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./map.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "partner_id",
                    "line": 27,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "latitude",
                    "defaultValue": "this.enviromentService.mapOptions.latitude",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "longitude",
                    "defaultValue": "this.enviromentService.mapOptions.longitude",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "mapStyle",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "<p>Map Variables</p>\n",
                    "line": 52
                },
                {
                    "name": "markers",
                    "defaultValue": "new Array()",
                    "type": "Marker[]",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "openUrl",
                    "defaultValue": "this.enviromentService.openUrl",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Configuration and Static Data</p>\n",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "partner",
                    "type": "Partner",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pin",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "zoom",
                    "defaultValue": "this.enviromentService.mapOptions.zoom",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "addressToMap",
                    "args": [
                        {
                            "name": "partner",
                            "type": "Partner"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "partner",
                            "type": "Partner",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchPartnerData",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "description": "<p>Fetch Partner Data</p>\n",
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "description": "<p>On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "description": "<p>On Init</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ChangeDetectorRef, Input } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { tap, takeUntil, finalize } from 'rxjs/operators';\r\n\r\n/**\r\n * Services\r\n */\r\nimport {\r\n  IStaticDataService,\r\n  IPartnersService,\r\n  IEnvironmentService\r\n} from '../../../services';\r\n\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { Marker, Partner } from '../../../model';\r\n\r\n\r\n@Component({\r\n  selector: 'sng-map',\r\n  templateUrl: './map.component.html',\r\n  styleUrls: ['./map.component.scss']\r\n})\r\nexport class MapComponent implements OnInit, OnDestroy {\r\n  @Input() partner_id: string;\r\n\r\n  /**\r\n   * Configuration and Static Data\r\n   */\r\n  public openUrl: string = this.enviromentService.openUrl;\r\n\r\n  // singlePartner: boolean = false;\r\n  // list: any;\r\n\r\n  latitude: number = this.enviromentService.mapOptions.latitude;\r\n  longitude: number = this.enviromentService.mapOptions.longitude;\r\n  zoom: number = this.enviromentService.mapOptions.zoom;\r\n  loading = false;\r\n\r\n  markers: Marker[] = new Array();\r\n\r\n  public partner: Partner;\r\n  // public partners: Partner[];\r\n\r\n  private unsubscribe: Subject<any>;\r\n\r\n  /**\r\n   * Map Variables\r\n   */\r\n  mapStyle = [];\r\n  pin = {};\r\n\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private staticDataService: IStaticDataService,\r\n    private partnersService: IPartnersService,\r\n    private enviromentService: IEnvironmentService,\r\n  ) {\r\n    this.mapStyle = this.staticDataService.getMapPinStyle.mapStyle;\r\n    this.pin = this.staticDataService.getMapPinStyle.pin;\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    this.fetchPartnerData(this.partner_id);\r\n  }\r\n\r\n  /**\r\n   * On Destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n  addressToMap(partner: Partner): any {\r\n    return {\r\n      lat: parseFloat(partner.address.coordinates[0]),\r\n      lng: parseFloat(partner.address.coordinates[1]),\r\n      img: partner.imageURL,\r\n      name: partner.name,\r\n      slug: partner.slug,\r\n      address: `${partner.address.street}, ${partner.address.city}`,\r\n      // label: '0',\r\n      draggable: false\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fetch Partner Data\r\n   */\r\n  fetchPartnerData(partnerId: string): void {\r\n    this.partnersService.readPartnerInfo(partnerId)\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.partner = data;\r\n            console.log('Partner in Map Widget', this.partner);\r\n\r\n            if (this.partner.address) {\r\n              this.markers = [this.addressToMap(this.partner)];\r\n              this.latitude = this.markers[0].lat;\r\n              this.longitude = this.markers[0].lng;\r\n              this.zoom = 15;\r\n            }\r\n          },\r\n          error => {\r\n          }),\r\n        takeUntil(this.unsubscribe),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".map-container {\r\n\t.map {\r\n\t\twidth: 100%;\r\n\t\tmin-height: 400px;\r\n\t\theight: 400px;\r\n\t\t.info-container {\r\n\t\t\ttext-align: center;\r\n\t\t\timg {\r\n\t\t\t\tmax-width: 110px;\r\n\t\t\t\tmax-height: 60px;\r\n\t\t\t\tmargin-bottom: 10px;\r\n\t\t\t}\r\n\t\t\ta {\r\n\t\t\t\tdisplay: block;\r\n\t\t\t\t.partner-name {\r\n\t\t\t\t\tmargin-bottom: 5px;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./map.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "staticDataService",
                        "type": "IStaticDataService"
                    },
                    {
                        "name": "partnersService",
                        "type": "IPartnersService"
                    },
                    {
                        "name": "enviromentService",
                        "type": "IEnvironmentService"
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "staticDataService",
                        "type": "IStaticDataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "partnersService",
                        "type": "IPartnersService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "enviromentService",
                        "type": "IEnvironmentService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"map-container\">\r\n  <agm-map class=\"map\" [zoom]='zoom' [latitude]='latitude' [longitude]='longitude' [styles]=\"mapStyle\">\r\n    <ng-template [ngIf]=\"markers\">\r\n      <agm-marker *ngFor=\"let m of markers; let i = index\" [latitude]=\"m.lat\" [longitude]=\"m.lng\" [iconUrl]=\"pin\"\r\n        [markerDraggable]=\"m.draggable\">\r\n        <agm-info-window [disableAutoPan]=\"false\" [isOpen]=\"true\" #infoWindow>\r\n          <div class=\"info-container\">\r\n            <img src={{m.img}}>\r\n            <div>\r\n              <a href=\"{{openUrl}}/partner/{{m.slug}}\">\r\n                <!-- <a [routerLink]=\"['/partner/', m.slug]\"> -->\r\n                <div class=\"partner-name\">\r\n                  <strong>{{m.name}}</strong>\r\n                </div>\r\n                <div>{{m.address}}</div>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </agm-info-window>\r\n      </agm-marker>\r\n    </ng-template>\r\n  </agm-map>\r\n</div>\r\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-0b55c1bb8e682bb140672426f36cc855",
            "file": "projects/sng-core/src/lib/components/layout/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentRouteUrl",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "menu",
                    "type": "Menu[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "getItemCssClasses",
                    "args": [
                        {
                            "name": "item",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "openNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "toggleNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { filter } from 'rxjs/operators';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n// Models\r\nimport { Menu } from '../../../model';\r\n// Services\r\nimport { IMenuService, IAuthenticationService } from '../../../services';\r\n\r\n@Component({\r\n  selector: 'sng-menu',\r\n  templateUrl: './menu.component.html',\r\n  styleUrls: ['./menu.component.scss'],\r\n})\r\nexport class MenuComponent implements OnInit {\r\n  currentRouteUrl: string = '';\r\n  public menu: Menu[];\r\n\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n    private router: Router,\r\n    private translate: TranslateService,\r\n    private menuService: IMenuService,\r\n    private authenticationService: IAuthenticationService\r\n  ) {\r\n    const currentUser = this.authenticationService.currentUserValue;\r\n    this.menu =\r\n      currentUser.user['access'] === 'partner'\r\n        ? this.menuService.getPartnerMenu\r\n        : this.menuService.getAdminMenu;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.currentRouteUrl = this.router.url.split(/[?#]/)[0];\r\n    this.router.events\r\n      .pipe(filter((event) => event instanceof NavigationEnd))\r\n      .subscribe((event) => {\r\n        this.currentRouteUrl = this.router.url.split(/[?#]/)[0];\r\n        this.cdr.markForCheck();\r\n      });\r\n  }\r\n\r\n  openNav(): void {\r\n    this.menuService.openNav();\r\n    /*document.getElementById('mySidenav').style.width = '250px';\r\n\t\tdocument.getElementById('main').style.marginLeft = '250px';\r\n\t\t//document.body.style.backgroundColor = 'rgba(0,0,0,0.4)';\r\n\t\tdocument.body.classList.add('menu-overlay');*/\r\n  }\r\n\r\n  /* Set the width of the side navigation to 0 and the left margin of the page content to 0 */\r\n  closeNav(): void {\r\n    this.menuService.closeNav();\r\n    /*\r\n\t\tdocument.getElementById('mySidenav').style.width = '0';\r\n\t\tdocument.getElementById('main').style.marginLeft = '0';\r\n\t\t//document.body.classList.replace('menu-overlay', '');\r\n\t\tdocument.body.classList.remove('menu-overlay');\r\n\t\t*/\r\n  }\r\n\r\n  toggleNav(): void {\r\n    this.menuService.toggleNav();\r\n    /*\r\n\t\tdocument.getElementById('mySidenav').style.width = '0';\r\n\t\tdocument.getElementById('main').style.marginLeft = '0';\r\n\t\t//document.body.classList.replace('menu-overlay', '');\r\n\t\tdocument.body.classList.remove('menu-overlay');\r\n\t\t*/\r\n  }\r\n\r\n  getItemCssClasses(item: string): string {\r\n    let classes = '';\r\n    if (this.currentRouteUrl.indexOf(item) !== -1) {\r\n      classes = 'side-menu-item-active';\r\n    }\r\n    return classes;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".nav {\r\n\t.side-menu-item-active {\r\n\t\ta {\r\n\t\t\tcolor: #fff;\r\n\t\t}\r\n  }\r\n\r\n\ta {\r\n\t\t//padding: 8px 8px 8px 32px;\r\n\t\tmin-width: 240px;\r\n\t\ttext-decoration: none;\r\n\t\tfont-size: 24px;\r\n\t\tcolor: #aaa;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\ttransition: all 0.3s;\r\n\r\n    .mdi {\r\n\t\t\tmargin-right: 20px;\r\n\t\t\ttransition: color 0.2s;\r\n\t\t}\r\n\r\n    .menu-text {\r\n\t\t\tfont-size: 18px;\r\n\t\t\ttransition: opacity 0.3s ease-out;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.nav {\r\n  a {\r\n    &:hover {\r\n      color: var(--menu-font-color);\r\n      .mdi {\r\n        color: var(--secondary-color);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.closebtn,\r\n.togglebtn {\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tright: 25px;\r\n\tfont-size: 36px;\r\n\tmargin-left: 50px;\r\n\tcolor: var(--menu-font-color);\r\n\ttext-decoration: none;\r\n\t&:hover {\r\n\t\topacity: 0.7;\r\n\t}\r\n}\r\n\r\n.togglebtn {\r\n\tright: 15px;\r\n\ttransition: transform 0.3s, opacity 0.3s;\r\n}\r\n\r\n@media screen and (max-width: 1024px) {\r\n\t.togglebtn {\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n}\r\n\r\n@media screen and (min-width: 1025px) {\r\n\t.closebtn {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "menuService",
                        "type": "IMenuService"
                    },
                    {
                        "name": "authenticationService",
                        "type": "IAuthenticationService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuService",
                        "type": "IMenuService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "IAuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a href=\"javascript:void(0)\" class=\"closebtn\" (click)=\"closeNav()\">&times;</a>\r\n<a href=\"javascript:void(0)\" class=\"togglebtn\" (click)=\"toggleNav()\"><span\r\n    class=\"mdi mdi-chevron-double-left\"></span></a>\r\n<ul class=\"nav flex-column\">\r\n  <li *ngFor=\"let item of menu\" class=\"nav-item\" [ngClass]=\"getItemCssClasses('/'+item.link)\">\r\n    <a class=\"nav-link\" [routerLink]=\"['/'+item.link]\" (click)=\"closeNav()\"><span\r\n        class=\"mdi mdi-{{item.icon}}\"></span><span class=\"menu-text\">{{item.title | translate}}</span></a>\r\n  </li>\r\n</ul>\r\n"
        },
        {
            "name": "MicrocreditBadgeCardComponent",
            "id": "component-MicrocreditBadgeCardComponent-3e79a56376a81823eda976b968e2f7a9",
            "file": "projects/sng-core/src/lib/components/cards/microcredit_badge-card/microcredit_badge-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-microcredit_badge-card",
            "styleUrls": [
                "./microcredit_badge-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./microcredit_badge-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "badgesImages",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "microcredit_badge",
                    "type": "Activity",
                    "optional": false,
                    "description": "<p>Content Variables</p>\n",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "translate",
                    "type": "TranslateService",
                    "optional": false,
                    "description": ": TranslateService",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchBadgeContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94
                },
                {
                    "name": "fetchMicrocreditBadgeData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "description": "<p>Fetch Microcredit Badge</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "description": "<p>On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "description": "<p>On Init</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ChangeDetectorRef, ViewChild, HostListener } from '@angular/core';\r\nimport { tap, finalize, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n/**\r\n * Services\r\n */\r\nimport { IStaticDataService, IContentService, IMicrocreditService } from '../../../services';\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { Activity } from '../../../model';\r\n\r\n\r\n@Component({\r\n  selector: 'sng-microcredit_badge-card',\r\n  templateUrl: './microcredit_badge-card.component.html',\r\n  styleUrls: ['./microcredit_badge-card.component.scss']\r\n})\r\nexport class MicrocreditBadgeCardComponent implements OnInit, OnDestroy {\r\n\r\n\t/**\r\n\t * Content Variables\r\n\t */\r\n  public microcredit_badge: Activity; //The loyalty badge of member\r\n  badgesImages: any;\r\n\r\n  loading = false;\r\n  private unsubscribe: Subject<any>;\r\n\r\n\t/**\r\n\t * Component Constructor\r\n\t *\r\n\t * @param cdRef: ChangeDetectorRef\r\n\t * @param translate: TranslateService\r\n\t * @param contentService: ContentService\r\n\t * @param microcreditService: MicrocreditService\r\n\t */\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    public translate: TranslateService,\r\n    private staticDataService: IStaticDataService,\r\n    private contentService: IContentService,\r\n    private microcreditService: IMicrocreditService,\r\n  ) {\r\n    this.badgesImages = this.staticDataService.getBadgesImages;\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    this.fetchMicrocreditBadgeData();\r\n  }\r\n\r\n  /**\r\n   * On Destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch Microcredit Badge\r\n   */\r\n  fetchMicrocreditBadgeData(): void {\r\n    this.microcreditService.readBadge()\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.microcredit_badge = data;\r\n            console.log('On Fetch Microcredit Badge', data);\r\n            this.fetchBadgeContent();\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }),\r\n        takeUntil(this.unsubscribe),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  fetchBadgeContent(): void {\r\n    // Set Data for Badge based On Level\r\n    switch (this.microcredit_badge.slug) {\r\n      case 1:\r\n        this.microcredit_badge.image = this.badgesImages.supporter;\r\n        // this.badge.text_id = 5;\r\n        this.microcredit_badge.text_id = 'Supporter';\r\n        break;\r\n      case 2:\r\n        this.microcredit_badge.image = this.badgesImages.helper;\r\n        // this.badge.text_id = 7;\r\n        this.microcredit_badge.text_id = 'Helper';\r\n        break;\r\n      case 3:\r\n        this.microcredit_badge.image = this.badgesImages.one_of_us;\r\n        // this.badge.text_id = 9;\r\n        this.microcredit_badge.text_id = 'One of Us';\r\n        break;\r\n    }\r\n    // Get static content of Badge\r\n    this.contentService.readContentById(this.microcredit_badge.text_id)\r\n      // this.staticContentService.readText(this.badge.text_id)\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.microcredit_badge.text = data;\r\n            console.log(this.translate.currentLang)\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }\r\n        ),\r\n        takeUntil(this.unsubscribe),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      ).subscribe();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n\r\n.badge-container {\r\n  display: flex;\r\n  margin-top: 1.2rem;\r\n  margin-bottom: 2rem;\r\n\r\n  img {\r\n    max-width: 100px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./microcredit_badge-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "staticDataService",
                        "type": "IStaticDataService"
                    },
                    {
                        "name": "contentService",
                        "type": "IContentService"
                    },
                    {
                        "name": "microcreditService",
                        "type": "IMicrocreditService"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 978,
                            "end": 983,
                            "flags": 0,
                            "escapedText": "cdRef"
                        },
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "pos": 972,
                            "end": 977,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ChangeDetectorRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1015,
                            "end": 1024,
                            "flags": 0,
                            "escapedText": "translate"
                        },
                        "type": "TranslateService",
                        "tagName": {
                            "pos": 1009,
                            "end": 1014,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: TranslateService</p>\n"
                    },
                    {
                        "name": "staticDataService",
                        "type": "IStaticDataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 1055,
                            "end": 1069,
                            "flags": 0,
                            "escapedText": "contentService"
                        },
                        "type": "IContentService",
                        "tagName": {
                            "pos": 1049,
                            "end": 1054,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ContentService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1098,
                            "end": 1116,
                            "flags": 0,
                            "escapedText": "microcreditService"
                        },
                        "type": "IMicrocreditService",
                        "tagName": {
                            "pos": 1092,
                            "end": 1097,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: MicrocreditService</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!-- <div class=\"dashboard\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-6\"> -->\r\n\r\n<!--begin::Microcredit Badge-->\r\n<div class=\"row\">\r\n  <div *ngIf=\"microcredit_badge\" class=\"badge-container\">\r\n    <div class=\"mr-4\">\r\n      <img *ngIf=\"microcredit_badge.image\" [src]=\"microcredit_badge.image\">\r\n    </div>\r\n    <div *ngIf=\"microcredit_badge.text\" class=\"bagde-text\">\r\n      <div *ngIf=\"translate.currentLang == 'en'\">\r\n        <h2>{{microcredit_badge.text.en_title}}</h2>\r\n        <p [innerHTML]=\"microcredit_badge.text.en_content\"></p>\r\n      </div>\r\n      <div *ngIf=\"translate.currentLang == 'el'\">\r\n        <h2>{{microcredit_badge.text.el_title}}</h2>\r\n        <p [innerHTML]=\"microcredit_badge.text.el_content\"></p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!--end::Microcredit Badge-->\r\n"
        },
        {
            "name": "MicrocreditCampaignCardComponent",
            "id": "component-MicrocreditCampaignCardComponent-b56a967de51d73ba566fd95f3f4a332c",
            "file": "projects/sng-core/src/lib/components/cards/microcredit_campaign-card/microcredit_campaign-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-microcredit_campaign-card",
            "styleUrls": [
                "./microcredit_campaign-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./microcredit_campaign-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "campaign",
                    "description": "<p>Imported Variables</p>\n",
                    "line": 24,
                    "type": "MicrocreditCampaign"
                },
                {
                    "name": "type",
                    "line": 25,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "canRedeem",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "canSupport",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "flag",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "seconds",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n/**\r\n * Services\r\n */\r\nimport { IAuthenticationService } from '../../../services';\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { MicrocreditCampaign } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-microcredit_campaign-card',\r\n  templateUrl: './microcredit_campaign-card.component.html',\r\n  styleUrls: ['./microcredit_campaign-card.component.scss']\r\n})\r\nexport class MicrocreditCampaignCardComponent implements OnInit {\r\n\r\n  /**\r\n   * Imported Variables\r\n   */\r\n  @Input() campaign: MicrocreditCampaign;\r\n  @Input() type: any;\r\n\r\n  seconds = 0;\r\n  public flag: string = '';\r\n  public canSupport = false;\r\n  public canRedeem = false;\r\n\r\n  constructor(\r\n    private translate: TranslateService,\r\n    private authenticationService: IAuthenticationService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    console.log('Campaign in Card', this.campaign)\r\n    console.log('Single or All', this.type);\r\n\r\n    const now = new Date();\r\n    this.seconds = parseInt(now.getTime().toString());\r\n    // console.log('Campaign')\r\n    // console.log(this.microcredit);\r\n    const currentUser = this.authenticationService.currentUserValue;\r\n    const access = currentUser.user.access;\r\n\r\n    if (this.campaign.status === 'draft') {\r\n      this.canSupport = false;\r\n      this.flag = this.translate.instant('CAMPAIGN.STATUS.DRAFT');\r\n    } else if (this.campaign.startsAt > this.seconds) {\r\n      this.canSupport = false;\r\n      this.canRedeem = false;\r\n      this.flag = this.translate.instant('CAMPAIGN.STATUS.EXPECTED');\r\n    } else if ((this.campaign.expiresAt > this.seconds) && (this.seconds > this.campaign.startsAt)) {\r\n      this.canSupport = true;\r\n      this.flag = this.translate.instant('GENERAL.TO');\r\n    } else if (this.seconds > this.campaign.expiresAt) {\r\n      this.canSupport = false;\r\n      this.flag = this.translate.instant('CAMPAIGN.STATUS.REDEEM_TO');\r\n      this.canRedeem = (access == 'partner') ? true : false;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n\r\n// .synergy-card {\r\n//     height: calc(100% - 20px);\r\n//     padding-top: 0;\r\n\r\n//     .microcredit-card {\r\n//         height: 100%;\r\n//         padding-top: 0;\r\n\r\n//         .s_archive {\r\n//             &-points {\r\n//                 .from {\r\n//                     font-size: 10px;\r\n//                     color: #000;\r\n//                     text-transform: uppercase;\r\n//                     margin-top: 13px;\r\n//                     display: block;\r\n//                     line-height: 3px;\r\n//                 }\r\n//             }\r\n//             cursor: pointer;\r\n//         }\r\n//     }\r\n// }\r\n",
                    "styleUrl": "./microcredit_campaign-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "authenticationService",
                        "type": "IAuthenticationService"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "IAuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"synergy-card\">\r\n\r\n  <mat-card class=\"item-card\" *ngIf=\"campaign\">\r\n    <mat-card-content>\r\n\r\n      <!--begin::Content-->\r\n      <div class=\"wallet_microcredit_wrapper s_archive_wrapper\">\r\n        <div class=\"microcredit s_archive row\">\r\n          <div class=\"col-md-12\">\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-12 s_archive-img-container\">\r\n                <div class=\"s_archive-img\">\r\n                  <img src={{campaign.campaign_imageURL}} alt={{campaign.title}} />\r\n                  <div class=\"s_archive-date\">\r\n                    {{flag}}\r\n                    <span *ngIf=\"canSupport\"> {{campaign.expiresAt | date: 'd.M'}}</span>\r\n                    <span *ngIf=\"canRedeem\"> {{campaign.redeemEnds | date: 'd.M'}}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"s_archive-content container-fluid\">\r\n              <div class=\"s_archive-heading row\">\r\n                <h4 class=\"s_archive-title col-9\">{{campaign.title}}</h4>\r\n                <div class=\"s_archive-points col-3\">\r\n                  <span class=\"from\" *ngIf=\"campaign.quantitative==true\">\r\n                    {{'GENERAL.FROM' | translate}}\r\n                  </span>\r\n                  <span class=\"amount\">\r\n                    {{campaign.minAllowed | currency:'EUR' }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div class=\"s_archive-subtitle row\">\r\n                <div class=\"col-md-12\">\r\n                  <p [innerHTML]=\"campaign.subtitle\"></p>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12 s_archive-info\">\r\n                  <div class=\"s_archive-partner\" *ngIf=\"type!='single'\">\r\n                    <div class=\"s_archive-merch-name\">\r\n                      <span class=\"mdi mdi-shopping\"></span> {{campaign.partner_name}}\r\n                    </div>\r\n                    <div class=\"s_archive-merch-adress\" *ngIf=\"campaign.partner_address\">\r\n                      <span class=\"mdi mdi-pin\"></span> {{campaign.partner_address.street}} ,\r\n                      {{campaign.partner_address.city}}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!--end::Content-->\r\n\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>"
        },
        {
            "name": "MicrocreditCampaignSingleComponent",
            "id": "component-MicrocreditCampaignSingleComponent-ce030f417478a601481aeead51bc7dfc",
            "file": "projects/sng-core/src/lib/components/single-items/microcredit_campaign-single/microcredit_campaign-single.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-microcredit_campaign-single",
            "styleUrls": [
                "./microcredit_campaign-single.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./microcredit_campaign-single.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "campaign",
                    "description": "<p>Imported Variables</p>\n",
                    "line": 20,
                    "type": "MicrocreditCampaign"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "canSupportCampaign",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "componentOrTemplateRef",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "matDialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "seconds",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "description": "<p>On destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "description": "<p>On Init</p>\n"
                },
                {
                    "name": "pledgeModal",
                    "args": [
                        {
                            "name": "campaign",
                            "type": "MicrocreditCampaign"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "campaign",
                            "type": "MicrocreditCampaign",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollTo",
                    "args": [
                        {
                            "name": "selectorName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "selectorName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setComponent",
                    "args": [
                        {
                            "name": "componentOrTemplateRef",
                            "type": "ComponentType<T> | TemplateRef<T>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "componentOrTemplateRef",
                            "type": "ComponentType<T> | TemplateRef<T>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ComponentType } from '@angular/cdk/portal';\r\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\nimport { Component, OnInit, OnDestroy, Input, TemplateRef } from '@angular/core';\r\n\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { MicrocreditCampaign } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-microcredit_campaign-single',\r\n  templateUrl: './microcredit_campaign-single.component.html',\r\n  styleUrls: ['./microcredit_campaign-single.component.scss']\r\n})\r\nexport class MicrocreditCampaignSingleComponent implements OnInit, OnDestroy {\r\n  private componentOrTemplateRef: any;\r\n\r\n  /**\r\n   * Imported Variables\r\n   */\r\n  @Input() campaign: MicrocreditCampaign;\r\n\r\n  seconds = 0;\r\n  public canSupportCampaign = false;\r\n\r\n  private unsubscribe: Subject<any>;\r\n  loading = false;\r\n\r\n  /**\r\n   * Component Constructor\r\n   */\r\n  constructor(\r\n    public matDialog: MatDialog\r\n  ) {\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    console.log('Campaign in SingleMicrocredit', this.campaign);\r\n\r\n    const now = new Date();\r\n    this.seconds = parseInt(now.getTime().toString());\r\n\r\n    this.canSupportCampaign = ((this.campaign.startsAt < this.seconds) && (this.campaign.expiresAt > this.seconds)) ? true : false;\r\n  }\r\n\r\n\t/**\r\n\t * On destroy\r\n\t */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n  scrollTo(selectorName: string): void {\r\n    document.getElementById(selectorName).scrollIntoView();\r\n  }\r\n\r\n  pledgeModal(campaign: MicrocreditCampaign) {\r\n    const dialogConfig = new MatDialogConfig();\r\n    // The user can't close the dialog by clicking outside its body\r\n    dialogConfig.disableClose = true;\r\n    dialogConfig.id = 'modal-component';\r\n    dialogConfig.height = 'auto';\r\n    dialogConfig.width = '600px';\r\n    dialogConfig.data = {\r\n      campaign: campaign\r\n    };\r\n    const modalDialog = this.matDialog.open(this.componentOrTemplateRef, dialogConfig);\r\n  }\r\n\r\n  setComponent <T> (componentOrTemplateRef: ComponentType<T> | TemplateRef<T>): void {\r\n    this.componentOrTemplateRef = componentOrTemplateRef;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n\r\n.info-addess {\r\n  cursor: pointer;\r\n}\r\n// .s_single {\r\n//   &-info {\r\n//     .tag {\r\n//       color: #000;\r\n//     }\r\n//     .desc {\r\n//       font-size: 12px;\r\n//       font-style: italic;\r\n//     }\r\n//   }\r\n//   .terms {\r\n//     margin-left: 15px;\r\n//     border-left: 2px solid $tertiary;\r\n//     padding-left: 15px;\r\n//     h4 {\r\n//       font-size: 1.3rem;\r\n//       color: #000;\r\n//       margin-bottom: 12px;\r\n//     }\r\n//   }\r\n//   &-credit {\r\n//     text-align: right;\r\n//     .hypertitle {\r\n//       font-size: 10px;\r\n//       color: #000;\r\n//       text-transform: uppercase;\r\n//       margin-top: 13px;\r\n//       display: block;\r\n//       line-height: 3px;\r\n//     }\r\n//     .min-amount {\r\n//       .amount {\r\n//         font-size: 1.3rem;\r\n//         color: $amount-color;\r\n//         margin-bottom: 20px;\r\n//       }\r\n//     }\r\n//     .price-item {\r\n//       color: $primary-light;\r\n//       font-size: 1.6rem;\r\n//     }\r\n//     .plegde-button {\r\n//       margin-top: 20px;\r\n//       background-color: $primary;\r\n//       font-size: 18px;\r\n//       color: #fff;\r\n//       padding: 6px 20px 6px 20px;\r\n//     }\r\n//   }\r\n//   &-description {\r\n//     .partner-info {\r\n//       padding-right: 15px;\r\n//       padding-left: 15px;\r\n//       padding-top: 0px;\r\n//       border-bottom: 0px;\r\n//       h6 {\r\n//         text-transform: uppercase;\r\n//         color: $primary;\r\n//         font-size: 0.8rem;\r\n//       }\r\n//       img {\r\n//         max-width: 100%;\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n",
                    "styleUrl": "./microcredit_campaign-single.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"wallet_s_single_wrapper synergy-single microcredit-single row\">\r\n  <div class=\"s_single col-md-12\">\r\n\r\n    <div appSticky position=\"top\" class=\"row s_single-title-container\">\r\n      <div class=\"col-md-12\">\r\n        <h1 class=\"s_single-title\">{{campaign.title}}</h1>\r\n      </div>\r\n    </div>\r\n    <div class=\"row s_single-img-area\">\r\n      <div class=\"col-md-12 s_single-img-container\">\r\n        <div class=\"s_single-img\">\r\n          <img src={{campaign.campaign_imageURL}} alt={{campaign.title}} />\r\n        </div>\r\n        <div *ngIf=\"campaign.expiresAt>seconds||seconds>campaign.startsAt\" class=\"s_archive-date\">\r\n          {{'GENERAL.TO' | translate}}\r\n          {{campaign.expiresAt | date: 'd.M'}}</div>\r\n        <div *ngIf=\"seconds>campaign.expiresAt\" class=\"s_archive-date\">\r\n          {{'CAMPAIGN.STATUS.EXPIRED' | translate}}</div>\r\n        <div *ngIf=\"campaign.startsAt>seconds\" class=\"s_archive-date\">\r\n          {{'CAMPAIGN.STATUS.EXPECTED' | translate}}</div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row s_single-details\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"row s_single-info-container\">\r\n          <div class=\"col-md-8 s_single-info\">\r\n            <div class=\"info-row terms\">\r\n              <h4>{{'CAMPAIGN.TERMS' | translate}}</h4>\r\n              <p [innerHTML]=\"campaign.terms\"></p>\r\n            </div>\r\n            <div class=\"info-row\">\r\n              <span class=\"tag\">{{'CAMPAIGN.REDEEM_PERIOD' | translate}}:</span>\r\n              {{campaign.redeemStarts | date: 'd.M.y'}} -\r\n              {{campaign.redeemEnds | date: 'd.M.y'}}<br>\r\n              <span class=\"desc\">{{'CAMPAIGN.REDEEM_PERIOD_SUB' | translate}}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-4 s_single-credit\">\r\n            <div class=\"min-amount\" *ngIf=\"campaign.quantitative==true\">\r\n              <span class=\"hypertitle\">\r\n                {{'GENERAL.FROM' | translate}}\r\n              </span>\r\n              <span>\r\n                {{campaign.minAllowed | currency:'EUR' }}\r\n              </span>\r\n            </div>\r\n            <div class=\"price-item\">\r\n              <span class=\"hypertitle\" *ngIf=\"campaign.quantitative!=true\">{{'CAMPAIGN.PRICE' | translate}}</span>\r\n              <span class=\"hypertitle\"\r\n                *ngIf=\"campaign.quantitative==true&&campaign.stepAmount>0\">{{'CAMPAIGN.PRICE_PER_ITEM' | translate}}</span>\r\n              <span\r\n                *ngIf=\"campaign.quantitative==true&&campaign.stepAmount>0\">{{campaign.stepAmount | currency:'EUR' }}</span>\r\n              <span *ngIf=\"campaign.quantitative!=true\">{{campaign.minAllowed | currency:'EUR' }}</span>\r\n            </div>\r\n            <div>\r\n              <button mat-raised-button class=\"plegde-button\" (click)=\"pledgeModal(campaign)\"\r\n                [disabled]=\"!canSupportCampaign\">\r\n                <span matTooltip=\"{{'CAMPAIGN.PLEDGE_DISABLE' | translate}}\" [matTooltipPosition]=\"'left'\"\r\n                  [matTooltipDisabled]=\"canSupportCampaign\">{{'CAMPAIGN.PLEDGE' | translate}}</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"row s_single-description\">\r\n          <div class=\"col-md-4 partner-info s_single-info-container \">\r\n            <h6>{{'CAMPAIGN.PARTNER' | translate}}</h6>\r\n            <h5>{{campaign.partner_name}}</h5>\r\n            <img src=\"{{campaign.partner_imageURL}}\" alt=\"{{campaign.partner_name}}\">\r\n            <div *ngIf=\"campaign.partner_address\" class=\"info-row info-addess\"\r\n              (click)=\"scrollTo('map-widget-campaign')\">\r\n              <span class=\"mdi mdi-pin\"></span>\r\n              {{campaign.partner_address.street}}, {{campaign.partner_address.city}}\r\n            </div>\r\n            <div *ngIf=\"campaign.partner_contact\" class=\"info-row\"><span\r\n                class=\"mdi mdi-phone\"></span>{{campaign.partner_contact.phone}}</div>\r\n            <div class=\"info-row\"><span class=\"mdi mdi-email\"></span>{{campaign.partner_email}}</div>\r\n          </div>\r\n          <div class=\"col-md-8\">\r\n            <p [innerHTML]=\"campaign.description\"></p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!--begin::Map Widget-->\r\n    <sng-map id=\"map-widget-campaign\" [partner_id]='campaign.partner_id'></sng-map>\r\n    <!--end::Map Widget-->\r\n\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "MicrocreditCampaignsListCarouselComponent",
            "id": "component-MicrocreditCampaignsListCarouselComponent-fb56b101d316b7912c51483e005d315f",
            "file": "projects/sng-core/src/lib/components/lists/microcredit_campaigns-list-carousel/microcredit_campaigns-list-carousel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-microcredit_campaigns-list-carousel",
            "styleUrls": [
                "./microcredit_campaigns-list-carousel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./microcredit_campaigns-list-carousel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "partner",
                    "description": "<p>Imported Variables</p>\n",
                    "line": 27,
                    "type": "Partner"
                },
                {
                    "name": "type",
                    "line": 28,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "campaign",
                    "type": "MicrocreditCampaign",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "campaignModal",
                    "type": "NgbModal",
                    "optional": false,
                    "description": "<p>Children Modals</p>\n",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'campaignModal'"
                        }
                    ]
                },
                {
                    "name": "campaigns",
                    "type": "MicrocreditCampaign[]",
                    "optional": false,
                    "description": "<p>Content Variables</p>\n",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "customOptions",
                    "type": "OwlOptions",
                    "optional": false,
                    "description": "<p>Carousel &amp; Modal Variables</p>\n",
                    "line": 44
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "moved",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "controlModalState",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "description": "<p>Close Modal on Browser Back Button</p>\n",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchStoreMicrocreditCampaignsData",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "description": "<p>Fetch Microcredit Campaigns List (for One Partner)</p>\n",
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mousedown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "description": "<p>Actions to Open Modals from Carousel</p>\n"
                },
                {
                    "name": "mousemove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171
                },
                {
                    "name": "mouseup",
                    "args": [
                        {
                            "name": "data",
                            "type": "MicrocreditCampaign"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "MicrocreditCampaign",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "description": "<p>On destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "description": "<p>On Init</p>\n"
                },
                {
                    "name": "openMicrocredit",
                    "args": [
                        {
                            "name": "campaign",
                            "type": "MicrocreditCampaign"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "description": "<p>Open Microcredit Campaign Modal</p>\n",
                    "jsdoctags": [
                        {
                            "name": "campaign",
                            "type": "MicrocreditCampaign",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shuffle",
                    "args": [
                        {
                            "name": "array",
                            "type": "MicrocreditCampaign[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<any>",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>Randomize Data</p>\n",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "MicrocreditCampaign[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:popstate",
                    "args": [],
                    "argsDecorator": [],
                    "line": 102
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Input, Component, OnInit, OnDestroy, ChangeDetectorRef, ViewChild, HostListener } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { tap, finalize } from 'rxjs/operators';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { OwlOptions } from 'ngx-owl-carousel-o';\r\n\r\n/**\r\n * Services\r\n */\r\nimport { IStaticDataService, IItemsService } from '../../../services';\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { Partner, MicrocreditCampaign } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-microcredit_campaigns-list-carousel',\r\n  templateUrl: './microcredit_campaigns-list-carousel.component.html',\r\n  styleUrls: ['./microcredit_campaigns-list-carousel.component.scss']\r\n})\r\nexport class MicrocreditCampaignsListCarouselComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Imported Variables\r\n   */\r\n  @Input() partner: Partner;\r\n  @Input() type: string; // 'single' Or 'all'\r\n\r\n  /**\r\n   * Children Modals\r\n   */\r\n  @ViewChild('campaignModal') campaignModal: NgbModal;\r\n\r\n  /**\r\n   * Content Variables\r\n   */\r\n  public campaigns: MicrocreditCampaign[]; //Used to store microcredits\r\n  public campaign: MicrocreditCampaign; //Used for the Microcreit to open in modal\r\n\r\n  /**\r\n   * Carousel & Modal Variables\r\n   */\r\n  customOptions: OwlOptions;\r\n  moved: boolean;\r\n\r\n  private unsubscribe: Subject<any>;\r\n  loading = false;\r\n\r\n  /**\r\n   * Component Constructor\r\n   *\r\n   * @param cdRef: ChangeDetectorRef\r\n   * @param modalService: NgbModal\r\n   * @param staticDataService: StaticDataService\r\n   * @param itemsService: ItemsService\r\n   */\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private modalService: NgbModal,\r\n    private staticDataService: IStaticDataService,\r\n    private itemsService: IItemsService,\r\n  ) {\r\n    this.customOptions = this.staticDataService.getOwlOptionsTwo;\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    this.fetchStoreMicrocreditCampaignsData(this.partner._id);\r\n  }\r\n\r\n  /**\r\n   * On destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n  /**\r\n   * Close Modal on Browser Back Button\r\n   */\r\n  controlModalState(state: boolean): void {\r\n    if (state) {\r\n      const modalState = {\r\n        modal: true,\r\n        desc: 'MemberDashboardModals'\r\n      };\r\n      history.pushState(modalState, null);\r\n    } else {\r\n      if (window.history.state.modal) {\r\n        history.back();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('window:popstate')\r\n  dismissModal(): void {\r\n    if (this.modalService.hasOpenModals()) {\r\n      this.modalService.dismissAll();\r\n      this.controlModalState(false);\r\n    }\r\n  }\r\n\r\n\t/**\r\n\t * Fetch Microcredit Campaigns List (for One Partner)\r\n\t */\r\n  fetchStoreMicrocreditCampaignsData(partnerId: string): void {\r\n    this.campaign = null;\r\n    this.itemsService.readPrivateMicrocreditCampaignsByStore(partnerId, '0-0-1')\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.campaigns = this.shuffle(data);\r\n\r\n            //TEMP FOR DEMO\r\n            if (this.campaigns.length && this.campaigns.length < 3) {\r\n              this.campaigns.push(this.campaigns[0]);\r\n              this.campaigns.push(this.campaigns[0]);\r\n            }\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Randomize Data\r\n   */\r\n  shuffle(array: MicrocreditCampaign[]): Array<any> {\r\n    return array.sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n\r\n  /**\r\n   * Open Microcredit Campaign Modal\r\n   */\r\n  openMicrocredit(campaign: MicrocreditCampaign): void {\r\n    console.log('Microcredit Campaign on Open Modal in Carousel', campaign);\r\n    this.campaign = campaign;\r\n    this.controlModalState(true);\r\n    this.modalService.open(\r\n      this.campaignModal,\r\n      {\r\n        ariaLabelledBy: 'modal-basic-title',\r\n        size: 'lg',\r\n        backdropClass: 'fullscrenn-backdrop',\r\n        backdrop: 'static',\r\n        windowClass: 'fullscreen-modal',\r\n      }\r\n    ).result.then(\r\n      () => { console.log('closed'); },\r\n      () => { console.log('dismissed'); });\r\n  }\r\n\r\n\r\n\t/**\r\n\t * Actions to Open Modals from Carousel\r\n\t */\r\n  mousedown() { this.moved = false; }\r\n  mousemove() { this.moved = true; }\r\n  mouseup(data: MicrocreditCampaign) {\r\n    if (!this.moved) {\r\n      this.openMicrocredit(data);\r\n    }\r\n    this.moved = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n",
                    "styleUrl": "./microcredit_campaigns-list-carousel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "staticDataService",
                        "type": "IStaticDataService"
                    },
                    {
                        "name": "itemsService",
                        "type": "IItemsService"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1427,
                            "end": 1432,
                            "flags": 0,
                            "escapedText": "cdRef"
                        },
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "pos": 1421,
                            "end": 1426,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ChangeDetectorRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1465,
                            "end": 1477,
                            "flags": 0,
                            "escapedText": "modalService"
                        },
                        "type": "NgbModal",
                        "tagName": {
                            "pos": 1459,
                            "end": 1464,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: NgbModal</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1501,
                            "end": 1518,
                            "flags": 0,
                            "escapedText": "staticDataService"
                        },
                        "type": "IStaticDataService",
                        "tagName": {
                            "pos": 1495,
                            "end": 1500,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: StaticDataService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1551,
                            "end": 1563,
                            "flags": 0,
                            "escapedText": "itemsService"
                        },
                        "type": "IItemsService",
                        "tagName": {
                            "pos": 1545,
                            "end": 1550,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ItemsService</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!--begin::Microcredit Campaigns List-->\r\n<div *ngIf=\"campaigns && campaigns.length\" class=\"row section-list\">\r\n  <div class=\"col-md-12\">\r\n    <h3 class=\"list-tiltle\">{{'CAMPAIGN.PLURAL' | translate }}</h3>\r\n    <owl-carousel-o [options]=\"customOptions\">\r\n      <ng-template carouselSlide *ngFor=\"let campaign of (campaigns)\">\r\n        <sng-microcredit_campaign-card [campaign]=\"campaign\" type='single' (mousedown)=\"mousedown()\"\r\n          (mousemove)=\"mousemove()\" (mouseup)=\"mouseup(campaign)\">\r\n        </sng-microcredit_campaign-card>\r\n      </ng-template>\r\n    </owl-carousel-o>\r\n  </div>\r\n</div>\r\n<!--end::Microcredit Campaigns List-->\r\n\r\n<!--begin::Microcredit Campaign Modal-->\r\n<ng-template #campaignModal let-c=\"close\" let-d=\"dismiss\">\r\n  <button type=\"button\" class=\"close-btn\" aria-label=\"Close\" (click)=\"d('Cross click')\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <sng-microcredit_campaign-single [campaign]=\"campaign\"></sng-microcredit_campaign-single>\r\n</ng-template>\r\n<!--end::Microcredit Campaign Modal-->\r\n"
        },
        {
            "name": "MicrocreditCampaignsListScrollComponent",
            "id": "component-MicrocreditCampaignsListScrollComponent-0affe84a28f12f0d9002ebed32629a37",
            "file": "projects/sng-core/src/lib/components/lists/microcredit_campaigns-list-scroll/microcredit_campaigns-list-scroll.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-microcredit_campaigns-list-scroll",
            "styleUrls": [
                "./microcredit_campaigns-list-scroll.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./microcredit_campaigns-list-scroll.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "campaign",
                    "type": "MicrocreditCampaign",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "campaignModal",
                    "type": "NgbModalRef",
                    "optional": false,
                    "description": "<p>Children Modals</p>\n",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'campaignModal'"
                        }
                    ]
                },
                {
                    "name": "campaigns",
                    "defaultValue": "[]",
                    "type": "MicrocreditCampaign[]",
                    "optional": false,
                    "description": "<p>Content Variables</p>\n",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Scroll &amp; Modal Variables</p>\n",
                    "line": 37
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "matDialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": ": MatDialog",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "moved",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "scroll",
                    "defaultValue": "6",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "controlModalState",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "description": "<p>Close Modal on Browser Back Button</p>\n",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchMicrocreditCampaignsData",
                    "args": [
                        {
                            "name": "counter",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "description": "<p>Fetch Microcredit Campaigns List</p>\n",
                    "jsdoctags": [
                        {
                            "name": "counter",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mousedown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "description": "<p>Actions to Open Modals from Carousel</p>\n"
                },
                {
                    "name": "mousemove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159
                },
                {
                    "name": "mouseup",
                    "args": [
                        {
                            "name": "data",
                            "type": "MicrocreditCampaign"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "MicrocreditCampaign",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "description": "<p>On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "description": "<p>On Init</p>\n"
                },
                {
                    "name": "onScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "description": "<p>On Scroll</p>\n"
                },
                {
                    "name": "openMicrocredit",
                    "args": [
                        {
                            "name": "campaign",
                            "type": "MicrocreditCampaign"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "description": "<p>Open Microcredit Campaign Modal</p>\n",
                    "jsdoctags": [
                        {
                            "name": "campaign",
                            "type": "MicrocreditCampaign",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:popstate",
                    "args": [],
                    "argsDecorator": [],
                    "line": 95
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ChangeDetectorRef, ViewChild, HostListener } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { tap, takeUntil, finalize } from 'rxjs/operators'; import { MatDialog } from '@angular/material/dialog';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n/**\r\n * Services\r\n */\r\nimport { IItemsService } from '../../../services';\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { MicrocreditCampaign } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-microcredit_campaigns-list-scroll',\r\n  templateUrl: './microcredit_campaigns-list-scroll.component.html',\r\n  styleUrls: ['./microcredit_campaigns-list-scroll.component.scss']\r\n})\r\nexport class MicrocreditCampaignsListScrollComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Children Modals\r\n   */\r\n  @ViewChild('campaignModal') campaignModal: NgbModalRef;\r\n\r\n  /**\r\n   * Content Variables\r\n   */\r\n  public campaigns: MicrocreditCampaign[] = [];\r\n  public campaign: MicrocreditCampaign;\r\n\r\n  /**\r\n   * Scroll & Modal Variables\r\n   */\r\n  counter = 0;\r\n  scroll = 6;\r\n  moved: boolean;\r\n\r\n  loading = false;\r\n  private unsubscribe: Subject<any>;\r\n\r\n  /**\r\n   * Component Constructor\r\n   *\r\n   * @param cdRef: ChangeDetectorRef\r\n   * @param modalService: NgbModal\r\n   * @param matDialog: MatDialog\r\n   * @param itemsService: ItemsService\r\n   */\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private modalService: NgbModal,\r\n    public matDialog: MatDialog,\r\n    private itemsService: IItemsService,\r\n  ) {\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    this.fetchMicrocreditCampaignsData(this.counter);\r\n  }\r\n\r\n  /**\r\n   * On Destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n  /**\r\n   * Close Modal on Browser Back Button\r\n   */\r\n  controlModalState(state: boolean): void {\r\n    if (state) {\r\n      const modalState = {\r\n        modal: true,\r\n        desc: 'MemberDashboardModals'\r\n      };\r\n      history.pushState(modalState, null);\r\n    } else {\r\n      if (window.history.state.modal) {\r\n        history.back();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('window:popstate')\r\n  dismissModal(): void {\r\n    if (this.modalService.hasOpenModals()) {\r\n      this.modalService.dismissAll();\r\n      this.controlModalState(false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch Microcredit Campaigns List\r\n   */\r\n  fetchMicrocreditCampaignsData(counter: number): void {\r\n    this.itemsService.readAllPrivateMicrocreditCampaigns(`${this.scroll.toString()}-${counter.toString()}-1`)\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.campaigns = this.campaigns.concat(data);\r\n          },\r\n          () => {\r\n          }),\r\n        takeUntil(this.unsubscribe),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * On Scroll\r\n   */\r\n  onScroll(): void {\r\n    this.counter = this.counter + 1;\r\n    this.fetchMicrocreditCampaignsData(this.counter);\r\n    console.log('scrolled!!');\r\n    this.cdRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Open Microcredit Campaign Modal\r\n   */\r\n  openMicrocredit(campaign: MicrocreditCampaign): void {\r\n    console.log('Microcredit Campaign on Open Modal in Scroll', campaign);\r\n    this.campaign = campaign;\r\n    this.controlModalState(true);\r\n    this.modalService.open(\r\n      this.campaignModal,\r\n      {\r\n        ariaLabelledBy: 'modal-basic-title',\r\n        size: 'lg',\r\n        backdropClass: 'fullscrenn-backdrop',\r\n        backdrop: 'static',\r\n        windowClass: 'fullscreen-modal',\r\n      }\r\n    ).result.then(\r\n      () => { console.log('closed'); },\r\n      () => { console.log('dismissed'); });\r\n  }\r\n\r\n\r\n  /**\r\n   * Actions to Open Modals from Carousel\r\n   */\r\n  mousedown(): void { this.moved = false; }\r\n  mousemove(): void { this.moved = true; }\r\n  mouseup(data: MicrocreditCampaign): void {\r\n    if (!this.moved) {\r\n      this.openMicrocredit(data);\r\n    }\r\n    this.moved = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n",
                    "styleUrl": "./microcredit_campaigns-list-scroll.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "itemsService",
                        "type": "IItemsService"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1228,
                            "end": 1233,
                            "flags": 0,
                            "escapedText": "cdRef"
                        },
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "pos": 1222,
                            "end": 1227,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ChangeDetectorRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1266,
                            "end": 1278,
                            "flags": 0,
                            "escapedText": "modalService"
                        },
                        "type": "NgbModal",
                        "tagName": {
                            "pos": 1260,
                            "end": 1265,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: NgbModal</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1302,
                            "end": 1311,
                            "flags": 0,
                            "escapedText": "matDialog"
                        },
                        "type": "MatDialog",
                        "tagName": {
                            "pos": 1296,
                            "end": 1301,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: MatDialog</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1336,
                            "end": 1348,
                            "flags": 0,
                            "escapedText": "itemsService"
                        },
                        "type": "IItemsService",
                        "tagName": {
                            "pos": 1330,
                            "end": 1335,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ItemsService</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!--begin::Microcredit Campaigns List-->\r\n<div *ngIf=\"campaigns && campaigns.length\" class=\"row section-list\" infiniteScroll [infiniteScrollDistance]=\"2\"\r\n  [infiniteScrollThrottle]=\"50\" (scrolled)=\"onScroll()\">\r\n  <div class=\"col-md-4 item-wrapper\" *ngFor=\"let campaign of (campaigns)\">\r\n    <sng-microcredit_campaign-card [campaign]=\" campaign\" type=\"all\" (mousedown)=\"mousedown()\" (mousemove)=\"mousemove()\"\r\n      (mouseup)=\"mouseup(campaign)\">\r\n    </sng-microcredit_campaign-card>\r\n  </div>\r\n</div>\r\n<!--end::Microcredit Campaigns List-->\r\n\r\n<!--begin::Microcredit Campaign Modal-->\r\n<ng-template #campaignModal let-c=\"close\" let-d=\"dismiss\">\r\n  <button type=\"button\" class=\"close-btn\" aria-label=\"Close\" (click)=\"d('Cross click')\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <sng-microcredit_campaign-single [campaign]=\"campaign\"></sng-microcredit_campaign-single>\r\n</ng-template>\r\n<!--end::Microcredit Campaign Modal-->\r\n"
        },
        {
            "name": "MicrocreditSupportCardComponent",
            "id": "component-MicrocreditSupportCardComponent-37de8a80321fe840ce6b9cfc0764f075",
            "file": "projects/sng-core/src/lib/components/cards/microcredit_support-card/microcredit_support-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-microcredit_support-card",
            "styleUrls": [
                "./microcredit_support-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./microcredit_support-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "support",
                    "description": "<p>Imported Variables</p>\n",
                    "line": 17,
                    "type": "MicrocreditSupport"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "type",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { MicrocreditSupport } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-microcredit_support-card',\r\n  templateUrl: './microcredit_support-card.component.html',\r\n  styleUrls: ['./microcredit_support-card.component.scss']\r\n})\r\nexport class MicrocreditSupportCardComponent implements OnInit {\r\n  /**\r\n   * Imported Variables\r\n   */\r\n  @Input() support: MicrocreditSupport;\r\n  type: any;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n\r\n.hypertitle {\r\n\tfont-size: 10px;\r\n\tcolor: #000;\r\n\ttext-transform: uppercase;\r\n\tmargin-top: 13px;\r\n\tdisplay: block;\r\n\tline-height: 3px;\r\n}\r\n.s_archive-points {\r\n\tfont-size: 1.1rem;\r\n}\r\n.init-amount {\r\n\t.amount {\r\n\t\tfont-size: 1.3rem;\r\n\t\tcolor: var(--amount-color);\r\n\t\tmargin-bottom: 20px;\r\n\t}\r\n}\r\n.current-amount {\r\n\tcolor: var(--primary-light-color);\r\n\tfont-size: 1.6rem;\r\n}\r\n\r\n.tag {\r\n\tcolor: #000;\r\n}\r\n.desc {\r\n\tfont-size: 12px;\r\n\tfont-style: italic;\r\n}\r\n.s_archive-subtitle {\r\n\tmargin-top: 25px;\r\n}\r\n\r\n.modal-content {\r\n\tbackground: none;\r\n}\r\n",
                    "styleUrl": "./microcredit_support-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"synergy-card\">\r\n  <mat-card class=\"supports-card\" *ngIf=\"support\">\r\n    <mat-card-content>\r\n      <!--begin::Content-->\r\n      <div class=\"wallet_microcredit_wrapper s_archive_wrapper\">\r\n        <div class=\"microcredit s_archive row\">\r\n          <div class=\"col-md-12\">\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-12 s_archive-img-container\">\r\n                <div class=\"s_archive-img\">\r\n                  <img src={{support.campaign_imageURL}} alt={{support.title}} />\r\n                  <div class=\"s_archive-date\" *ngIf=\"support.status=='completed'\">\r\n                    <span matTooltip=\"{{'SUPPORT.STATUS.COMPLETED_TOOLTIP' | translate}}\">\r\n                      {{'SUPPORT.STATUS.COMPLETED' | translate}}</span>\r\n                  </div>\r\n                  <div class=\"s_archive-date\" *ngIf=\"support.status=='order'\">\r\n                    <span matTooltip=\"{{'SUPPORT.STATUS.PENDING_TOOLTIP' | translate}}\">\r\n                      {{'SUPPORT.STATUS.PENDING' | translate}}</span>\r\n                  </div>\r\n                  <div class=\"s_archive-date\" *ngIf=\"support.status=='confirmation'\">\r\n                    <span matTooltip=\"{{'SUPPORT.STATUS.CONFIRMED_TOOLTIP' | translate}}\">\r\n                      {{'SUPPORT.STATUS.CONFIRMED' | translate}}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\" s_archive-content container-fluid\">\r\n              <div class=\"s_archive-heading row\">\r\n                <h4 class=\"s_archive-title col-12\">{{support.title}}</h4>\r\n\r\n              </div>\r\n              <div class=\"s_archive-credit-info row\">\r\n                <div class=\"s_archive-dates col-8\">\r\n                  <span class=\"tag\">{{'CAMPAIGN.REDEEM_PERIOD' | translate}}:</span>\r\n                  {{support.redeemStarts | date: 'd.M.y'}} -\r\n                  {{support.redeemEnds | date: 'd.M.y'}}<br>\r\n                  <span class=\"desc\">{{'CAMPAIGN.REDEEM_PERIOD_SUB' | translate}}</span>\r\n                </div>\r\n                <div class=\"s_archive-points col-4\">\r\n                  <div class=\"init-amount\">\r\n                    <span class=\"hypertitle\">\r\n                      {{'GENERAL.FROM' | translate}}\r\n                    </span>\r\n                    <span>\r\n                      {{support.initialTokens | currency:'EUR'}}\r\n                    </span>\r\n                  </div>\r\n                  <div class=\"current-amount\">\r\n                    <span class=\"hypertitle\">\r\n                      {{'SUPPORT.REMAINING' | translate}}\r\n                    </span>\r\n                    <span>{{ support.initialTokens - support.redeemedTokens | currency:'EUR'}}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"s_archive-subtitle row\">\r\n                <div class=\"col-md-12\">\r\n                  <p [innerHTML]=\"support.terms\"></p>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12 s_archive-info\">\r\n                  <div class=\"s_archive-partner\" *ngIf=\"type!='single'\">\r\n                    <div class=\"s_archive-merch-name\">\r\n                      <span class=\"mdi mdi-handshake\"></span>\r\n                      {{'SUPPORT.ARRAY.PAYMENT_ID' | translate}}: {{support.payment_id}}\r\n                      <br>\r\n                    </div>\r\n                    <div class=\"s_archive-merch-name\" *ngIf=\"support.method!='store'\">\r\n                      <span class=\"mdi mdi-cash\"></span>\r\n                      {{'SUPPORT.PAYMENT_METHOD' | translate}}: {{'SUPPORT.PAYMENT.BANK' | translate}}\r\n                      <br>\r\n                      <span class=\"mdi mdi-cash\"></span>\r\n                      {{'SUPPORT.PAYMENT_DETAILS' | translate}}: {{support.how.title | translate}},\r\n                      {{support.how.value}}\r\n                    </div>\r\n                    <div class=\"s_archive-merch-name\" *ngIf=\"support.method=='store'\">\r\n                      <span class=\"mdi mdi-cash\"></span>\r\n                      {{'SUPPORT.PAYMENT_METHOD' | translate}}: {{'SUPPORT.PAYMENT.STORE' | translate}}\r\n                    </div>\r\n                    <div class=\"s_archive-merch-name\">\r\n                      <span class=\"mdi mdi-shopping\"></span> {{support.partner_name}}\r\n                    </div>\r\n                    <div class=\"s_archive-merch-adress\" *ngIf=\"support.partner_address\">\r\n                      <span class=\"mdi mdi-pin\"></span> {{support.partner_address.street}},\r\n                      {{support.partner_address.city}}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!--end::Content-->\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "MicrocreditSupportsListPaginationComponent",
            "id": "component-MicrocreditSupportsListPaginationComponent-2e72789fb8c3c16fe3a0ed2414220555",
            "file": "projects/sng-core/src/lib/components/lists/microcredit_supports-list-pagination/microcredit_supports-list-pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-microcredit_supports-list-pagination",
            "styleUrls": [
                "./microcredit_supports-list-pagination.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./microcredit_supports-list-pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "p",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "paymentsList",
                    "type": "PaymentList[]",
                    "optional": false,
                    "description": "<p>Configuration and Static Data</p>\n",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "support",
                    "type": "MicrocreditSupport",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "supportModal",
                    "type": "NgbModalRef",
                    "optional": false,
                    "description": "<p>Children Modals</p>\n",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'supportModal'"
                        }
                    ]
                },
                {
                    "name": "supports",
                    "type": "MicrocreditSupport[]",
                    "optional": false,
                    "description": "<p>Content Variables</p>\n",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "controlModalState",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "description": "<p>Close Modal on Browser Back Button</p>\n",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchMicrocreditSupportsData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "description": "<p>Fetch Microcredit Supports List (for One Member)</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "description": "<p>On destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "description": "<p>On Init</p>\n"
                },
                {
                    "name": "openSupport",
                    "args": [
                        {
                            "name": "support",
                            "type": "MicrocreditSupport"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "description": "<p>Open Support Modal</p>\n",
                    "jsdoctags": [
                        {
                            "name": "support",
                            "type": "MicrocreditSupport",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:popstate",
                    "args": [],
                    "argsDecorator": [],
                    "line": 98
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Input, Component, OnInit, OnDestroy, ChangeDetectorRef, ViewChild, ElementRef, HostListener } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { tap, takeUntil, finalize } from 'rxjs/operators';\r\nimport { NgbModal, NgbActiveModal, ModalDismissReasons, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { OwlOptions } from 'ngx-owl-carousel-o';\r\n\r\n/**\r\n * Services\r\n */\r\nimport { IStaticDataService, IMicrocreditService } from '../../../services';\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { MicrocreditSupport, PaymentList } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-microcredit_supports-list-pagination',\r\n  templateUrl: './microcredit_supports-list-pagination.component.html',\r\n  styleUrls: ['./microcredit_supports-list-pagination.component.scss']\r\n})\r\nexport class MicrocreditSupportsListPaginationComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Children Modals\r\n   */\r\n  @ViewChild('supportModal') supportModal: NgbModalRef;\r\n\r\n  /**\r\n   * Configuration and Static Data\r\n   */\r\n  // public configAccess: Boolean[] = environment.access;\r\n  public paymentsList: PaymentList[];\r\n\r\n  /**\r\n   * Content Variables\r\n   */\r\n  public supports: MicrocreditSupport[]; //Used to store microcredits\r\n  public support: MicrocreditSupport; //Used for the Microcreit to open in modal\r\n\r\n  p = 1;\r\n\r\n  private unsubscribe: Subject<any>;\r\n  loading = false;\r\n\r\n  /**\r\n   * Component Constructor\r\n   *\r\n   * @param cdRef: ChangeDetectorRef\r\n   * @param modalService: NgbModal\r\n   * @param staticDataService: StaticDataService\r\n   * @param itemsService: ItemsService\r\n   */\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private modalService: NgbModal,\r\n    private staticDataService: IStaticDataService,\r\n    private microcreditService: IMicrocreditService,\r\n  ) {\r\n    this.paymentsList = this.staticDataService.getPaymentsList;\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    this.fetchMicrocreditSupportsData();\r\n  }\r\n\r\n  /**\r\n   * On destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n  /**\r\n   * Close Modal on Browser Back Button\r\n   */\r\n  controlModalState(state: boolean): void {\r\n    if (state) {\r\n      const modalState = {\r\n        modal: true,\r\n        desc: 'MemberDashboardModals'\r\n      };\r\n      history.pushState(modalState, null);\r\n    } else {\r\n      if (window.history.state.modal) {\r\n        history.back();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('window:popstate')\r\n  dismissModal(): void {\r\n    if (this.modalService.hasOpenModals()) {\r\n      this.modalService.dismissAll();\r\n      this.controlModalState(false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch Microcredit Supports List (for One Member)\r\n   */\r\n  fetchMicrocreditSupportsData(): void {\r\n    this.microcreditService.readAllBackerSupports('0-0-1')\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.supports = data;\r\n            console.log('On Microcredit Support List Pagination', this.supports)\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }),\r\n        takeUntil(this.unsubscribe),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n\r\n  /**\r\n   * Open Support Modal\r\n   */\r\n  openSupport(support: MicrocreditSupport): void {\r\n    this.support = {\r\n      ...support,\r\n      status: (support.initialTokens == support.redeemedTokens) ? 'completed' : support.status,\r\n      how: (support.method == 'store') ? { title: '', value: null } : {\r\n        title: this.paymentsList.filter((el) => {\r\n          return el.bic == support.method\r\n        })[0].title,\r\n        value: support.partner_payments.filter((el) => {\r\n          return el.bic == support.method\r\n        })[0].value\r\n      }\r\n    };\r\n\r\n    this.controlModalState(true);\r\n    this.modalService.open(this.supportModal)\r\n      .result.then(\r\n        (result) => { this.controlModalState(false); console.log('closed'); },\r\n        (reason) => { this.controlModalState(false); console.log('dismissed'); });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".badge-container {\r\n  display: flex;\r\n  margin-top: 1.2rem;\r\n  margin-bottom: 2rem;\r\n\r\n  img {\r\n    max-width: 100px;\r\n  }\r\n}\r\n\r\n.dashboard-card {\r\n  margin-bottom: 2rem;\r\n  margin-top: 1rem;\r\n\r\n  &.offer-card {\r\n    padding-top: 0;\r\n  }\r\n}\r\n\r\n.wallet-card {\r\n  &-header {\r\n    border-bottom: 2px solid #eee;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  &-icon {\r\n    position: absolute;\r\n    top: -25px;\r\n    right: -8px;\r\n    cursor: pointer;\r\n    border-radius: 50%;\r\n    transition: box-shadow 0.3s;\r\n    color: #fff;\r\n    background-color: var(--tertiary-color);\r\n    font-size: 51px;\r\n    width: 75px;\r\n    height: 75px;\r\n    text-align: center;\r\n\r\n    &:hover {\r\n      box-shadow: 0 3px 11px -2px #d1cbcb;\r\n    }\r\n  }\r\n}\r\n\r\n.single {\r\n  //border-bottom: 1px solid #eee;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  margin-bottom: 20px;\r\n\r\n  &-content {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  .wallet-img {\r\n    margin-right: 20px;\r\n    width: 60px;\r\n\r\n    img {\r\n      width: 60px;\r\n      height: 60px;\r\n      object-fit: cover;\r\n      border-radius: 50%;\r\n    }\r\n  }\r\n\r\n  &-title {\r\n    font-size: 18px;\r\n    margin-bottom: 5px;\r\n  }\r\n\r\n  &-status {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    &.mat-warn {\r\n      background-color: var(--tertiary-color);\r\n    }\r\n\r\n    &.mat-primary {\r\n      background-color: var(--primary-color);\r\n    }\r\n  }\r\n\r\n  &-subtitle {\r\n    font-size: 14px;\r\n    margin-bottom: 5px;\r\n    color: #8b8b8b;\r\n\r\n    img {\r\n      position: relative;\r\n      top: -2px;\r\n      margin-right: 5px;\r\n    }\r\n  }\r\n\r\n  &-amount {\r\n    justify-content: flex-end;\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    .points {\r\n      font-size: 1.4rem;\r\n    }\r\n  }\r\n}\r\n\r\n.balance {\r\n  &-title {\r\n    color: var(--font-dark-color);\r\n    margin-bottom: 0px;\r\n  }\r\n\r\n  &-amount {\r\n    .points {\r\n      color: var(--amount-color);\r\n    }\r\n  }\r\n}\r\n\r\n.wallet-coop,\r\n.wallet-row {\r\n  cursor: pointer;\r\n  transition: background-color 0.4s;\r\n\r\n  &:hover {\r\n    background-color: #f0f2f4;\r\n  }\r\n}\r\n\r\n.wallet-popup {\r\n  padding: 20px;\r\n\r\n  .row-flex {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n\r\n  .points {\r\n    font-size: 24px;\r\n  }\r\n}\r\n\r\n.qr-code-text {\r\n  background: #fff;\r\n  padding: 15px;\r\n}\r\n",
                    "styleUrl": "./microcredit_supports-list-pagination.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "staticDataService",
                        "type": "IStaticDataService"
                    },
                    {
                        "name": "microcreditService",
                        "type": "IMicrocreditService"
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1456,
                            "end": 1461,
                            "flags": 0,
                            "escapedText": "cdRef"
                        },
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "pos": 1450,
                            "end": 1455,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ChangeDetectorRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1494,
                            "end": 1506,
                            "flags": 0,
                            "escapedText": "modalService"
                        },
                        "type": "NgbModal",
                        "tagName": {
                            "pos": 1488,
                            "end": 1493,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: NgbModal</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1530,
                            "end": 1547,
                            "flags": 0,
                            "escapedText": "staticDataService"
                        },
                        "type": "IStaticDataService",
                        "tagName": {
                            "pos": 1524,
                            "end": 1529,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: StaticDataService</p>\n"
                    },
                    {
                        "name": "microcreditService",
                        "type": "IMicrocreditService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!--begin::Microcredit Supports List-->\r\n<div class=\"single row wallet-coop\"\r\n  *ngFor=\"let support of (supports) | paginate: { id: 'tr_paginator', itemsPerPage: 3, currentPage: p }\"\r\n  (click)=\"openSupport(support)\">\r\n  <div class=\"col-sm-9 single-content\">\r\n    <div *ngIf=\"support.status=='order'\" class=\"wallet-img\">\r\n      <img src={{support.campaign_imageURL}} alt={{support.title}} style=\"opacity:0.5;\"\r\n        matTooltip=\"{{'SUPPORT.STATUS.PENDING_TOOLTIP' | translate}}\" [matTooltipPosition]=\"'right'\" />\r\n    </div>\r\n    <div *ngIf=\"support.status!='order'\" class=\"wallet-img\">\r\n      <img src={{support.campaign_imageURL}} alt={{support.title}} style=\"opacity:1.0;\"\r\n        matTooltip=\"{{'SUPPORT.STATUS.CONFIRMED_TOOLTIP' | translate}}\" [matTooltipPosition]=\"'right'\" />\r\n    </div>\r\n    <div class=\"\">\r\n      <!-- <div class=\"single-title\">{{support.title}}\r\n        <button mat-mini-fab color=\"warn\" class=\"single-status\" *ngIf=\"support.status=='order'\"\r\n          matTooltip=\"{{'SUPPORT.STATUS.PENDING_TOOLTIP' | translate}}\" [matTooltipPosition]=\"'right'\">\r\n        </button>\r\n        <button mat-mini-fab color=\"primary\" class=\"single-status\" *ngIf=\"support.status!='order'\"\r\n          matTooltip=\"{{'SUPPORT.STATUS.CONFIRMED_TOOLTIP' | translate}}\" [matTooltipPosition]=\"'right'\">\r\n        </button>\r\n      </div> -->\r\n      <div class=\"single-subtitle\"><span class=\"mdi mdi-shopping\"></span>{{support.partner_name}}</div>\r\n      <div class=\"single-subtitle\">\r\n        {{'GENERAL.FROM' | translate}} {{support.redeemStarts | date: 'd.M.y' }}\r\n        {{'GENERAL.TO' | translate}} {{support.redeemEnds | date: 'd.M.y' }}</div>\r\n    </div>\r\n  </div>\r\n  <div class=\"col-sm-3 single-amount\">\r\n    <div>\r\n      <span class=\"points\">{{ support.initialTokens - support.redeemedTokens | currency:'EUR' }}</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"pagination-wrapper\">\r\n  <pagination-controls autoHide=\"true\" id='tr_paginator' (pageChange)=\"p=$event\"></pagination-controls>\r\n</div>\r\n<!--end::Microcredit Supports List-->\r\n\r\n<!--begin::Microcredit Support Modal-->\r\n<ng-template #supportModal let-c=\"close\" let-d=\"dismiss\">\r\n  <button type=\"button\" class=\"close-btn\" aria-label=\"Close\" (click)=\"d('Cross click')\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <sng-microcredit_support-card [support]=\"support\"> </sng-microcredit_support-card>\r\n</ng-template>\r\n<!--end::Microcredit Support Modal-->\r\n"
        },
        {
            "name": "OfferCardComponent",
            "id": "component-OfferCardComponent-120ee8a2157da12abe74cd00db442f9d",
            "file": "projects/sng-core/src/lib/components/cards/offer-card/offer-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-offer-card",
            "styleUrls": [
                "./offer-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./offer-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "offer",
                    "line": 10,
                    "type": "Offer"
                },
                {
                    "name": "type",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "seconds",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Offer } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-offer-card',\r\n  templateUrl: './offer-card.component.html',\r\n  styleUrls: ['./offer-card.component.scss']\r\n})\r\nexport class OfferCardComponent implements OnInit {\r\n  @Input() offer: Offer;\r\n  @Input() type: string;\r\n\r\n  seconds = 0;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    const now = new Date();\r\n    this.seconds = parseInt(now.getTime().toString());\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n\r\n// .synergy-card {\r\n// \theight: calc(100% - 20px);\r\n// \tpadding-top: 0;\r\n\r\n// \t.offer-card {\r\n// \t\theight: 100%;\r\n// \t\tpadding-top: 0;\r\n\r\n// \t\t.amount {\r\n// \t\t\timg {\r\n// \t\t\t\twidth: 24px;\r\n// \t\t\t\tdisplay: inline;\r\n// \t\t\t}\r\n// \t\t}\r\n// \t}\r\n// }\r\n",
                    "styleUrl": "./offer-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"synergy-card\" *ngIf=\"offer\">\r\n\r\n  <mat-card class=\"item-card offer-card\">\r\n    <mat-card-content>\r\n\r\n      <!--begin::Content-->\r\n      <div class=\"wallet_offer_wrapper s_archive_wrapper\">\r\n        <div class=\"offer s_archive row\">\r\n          <div class=\"col-md-12\">\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-12 s_archive-img-container\">\r\n                <div class=\"s_archive-img\">\r\n                  <img src={{offer.offer_imageURL}} alt={{offer.title}} />\r\n                  <div *ngIf=\"offer.expiresAt>seconds\" class=\"s_archive-date\">\r\n                    {{'GENERAL.TO' | translate}}\r\n                    {{offer.expiresAt | date: 'd.M'}}</div>\r\n                  <div *ngIf=\"seconds>offer.expiresAt\" class=\"s_archive-date\">\r\n                    {{'OFFER.STATUS.EXPIRED' | translate}}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"s_archive-content container-fluid\">\r\n              <div class=\"s_archive-heading row\">\r\n                <h4 class=\"s_archive-title col-9\">{{offer.title}}</h4>\r\n                <div class=\"s_archive-points col-3\">\r\n                  <span class=\"amount\">\r\n                    <img src=\"../../../assets/media/images/Synergy-Icon.png\" alt=\"Synergy\" />\r\n                    {{ offer.cost }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div class=\"s_archive-subtitle row\">\r\n                <div class=\"col-md-12\">\r\n                  <p [innerHTML]=\"offer.description\"></p>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12 s_archive-info\">\r\n                  <div class=\"s_archive-partner\" *ngIf=\"type!='single'\">\r\n                    <div class=\"s_archive-merch-name\">\r\n                      <span class=\"mdi mdi-shopping\"></span> {{offer.partner_name}}\r\n                    </div>\r\n                    <div class=\"s_archive-merch-adress\" *ngIf=\"offer.partner_address\">\r\n                      <span class=\"mdi mdi-pin\"></span> {{offer.partner_address.street}}, {{offer.partner_address.city}}\r\n                    </div>\r\n                  </div>\r\n                  <sng-share-icon></sng-share-icon>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!--end::Content-->\r\n\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "OffersListCarouselComponent",
            "id": "component-OffersListCarouselComponent-c1903a3c123ac309f1159cf27ca4fc32",
            "file": "projects/sng-core/src/lib/components/lists/offers-list-carousel/offers-list-carousel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-offers-list-carousel",
            "styleUrls": [
                "./offers-list-carousel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./offers-list-carousel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "partner",
                    "description": "<p>Imported Variables</p>\n",
                    "line": 26,
                    "type": "Partner"
                },
                {
                    "name": "type",
                    "line": 27,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "customOptions",
                    "type": "OwlOptions",
                    "optional": false,
                    "description": "<p>Carousel &amp; Modal Variables</p>\n",
                    "line": 37
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "moved",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "offers",
                    "type": "Offer[]",
                    "optional": false,
                    "description": "<p>Content Variables</p>\n",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchStoreLoyaltyOffersData",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "description": "<p>Fetch Loyalty Offers List (for One Partner)</p>\n",
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "description": "<p>On destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "description": "<p>On Init</p>\n"
                },
                {
                    "name": "shuffle",
                    "args": [
                        {
                            "name": "array",
                            "type": "Offer[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<any>",
                    "typeParameters": [],
                    "line": 103,
                    "description": "<p>Randomize Data</p>\n",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "Offer[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Input, Component, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { tap, finalize } from 'rxjs/operators';\r\nimport { OwlOptions } from 'ngx-owl-carousel-o';\r\n\r\nimport {\r\n  IStaticDataService,\r\n  IItemsService\r\n} from '../../../services';\r\n\r\nimport {\r\n  Partner,\r\n  Offer\r\n} from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-offers-list-carousel',\r\n  templateUrl: './offers-list-carousel.component.html',\r\n  styleUrls: ['./offers-list-carousel.component.scss']\r\n})\r\nexport class OffersListCarouselComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Imported Variables\r\n   */\r\n  @Input() partner: Partner;\r\n  @Input() type: string; // 'single' Or 'all'\r\n\r\n  /**\r\n   * Content Variables\r\n   */\r\n  public offers: Offer[];\r\n\r\n  /**\r\n   * Carousel & Modal Variables\r\n   */\r\n  customOptions: OwlOptions;\r\n  moved: boolean;\r\n\r\n  private unsubscribe: Subject<any>;\r\n  loading = false;\r\n\r\n  /**\r\n   * Component Constructor\r\n   *\r\n   * @param cdRef: ChangeDetectorRef\r\n   * @param staticDataService: StaticDataService\r\n   * @param itemsService: ItemsService\r\n   */\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private staticDataService: IStaticDataService,\r\n    private itemsService: IItemsService,\r\n  ) {\r\n    this.customOptions = this.staticDataService.getOwlOptionsTwo;\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    this.fetchStoreLoyaltyOffersData(this.partner._id);\r\n  }\r\n\r\n  /**\r\n   * On destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n  /**\r\n   * Fetch Loyalty Offers List (for One Partner)\r\n   */\r\n  fetchStoreLoyaltyOffersData(partnerId: string): void {\r\n    this.itemsService.readOffersByStore(partnerId, '0-0-1')\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.offers = this.shuffle(data);\r\n\r\n            //TEMP FOR DEMO\r\n            if (this.offers.length && this.offers.length < 3) {\r\n              this.offers.push(this.offers[0]);\r\n              this.offers.push(this.offers[0]);\r\n            }\r\n          },\r\n          error => console.log),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Randomize Data\r\n   */\r\n  shuffle(array: Offer[]): Array<any> {\r\n    return array.sort(() => Math.random() - 0.5);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n",
                    "styleUrl": "./offers-list-carousel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "staticDataService",
                        "type": "IStaticDataService"
                    },
                    {
                        "name": "itemsService",
                        "type": "IItemsService"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1006,
                            "end": 1011,
                            "flags": 0,
                            "escapedText": "cdRef"
                        },
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "pos": 1000,
                            "end": 1005,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ChangeDetectorRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1044,
                            "end": 1061,
                            "flags": 0,
                            "escapedText": "staticDataService"
                        },
                        "type": "IStaticDataService",
                        "tagName": {
                            "pos": 1038,
                            "end": 1043,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: StaticDataService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1094,
                            "end": 1106,
                            "flags": 0,
                            "escapedText": "itemsService"
                        },
                        "type": "IItemsService",
                        "tagName": {
                            "pos": 1088,
                            "end": 1093,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ItemsService</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!--begin::Loaylty Offers List-->\r\n<div *ngIf=\"offers && offers.length\" class=\"row section-list\">\r\n  <div class=\"col-md-12\">\r\n    <h3 class=\"list-tiltle\">{{ 'OFFER.PLURAL' | translate }}</h3>\r\n    <owl-carousel-o [options]=\"customOptions\">\r\n      <ng-template carouselSlide *ngFor=\"let offer of (offers);\">\r\n        <sng-offer-card [offer]=\"offer\" type=\"single\"></sng-offer-card>\r\n      </ng-template>\r\n    </owl-carousel-o>\r\n  </div>\r\n</div>\r\n<!--end::Loaylty Offers List-->\r\n"
        },
        {
            "name": "OffersListScrollComponent",
            "id": "component-OffersListScrollComponent-3e58d06fd13612f45771183dccbed53c",
            "file": "projects/sng-core/src/lib/components/lists/offers-list-scroll/offers-list-scroll.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-offers-list-scroll",
            "styleUrls": [
                "./offers-list-scroll.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./offers-list-scroll.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Scroll &amp; Modal Variables</p>\n",
                    "line": 26
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "offers",
                    "defaultValue": "[]",
                    "type": "Offer[]",
                    "optional": false,
                    "description": "<p>Content Variables</p>\n",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "scroll",
                    "defaultValue": "6",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "translate",
                    "type": "TranslateService",
                    "optional": false,
                    "description": ": TranslateService",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchLoyaltyOffersData",
                    "args": [
                        {
                            "name": "counter",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "description": "<p>Fetch Loyalty Offers List</p>\n",
                    "jsdoctags": [
                        {
                            "name": "counter",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "description": "<p>On destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "description": "<p>On Init</p>\n"
                },
                {
                    "name": "onScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "description": "<p>On Scroll</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';\r\nimport { tap, finalize, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { IItemsService } from '../../../services';\r\n\r\nimport { Offer } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-offers-list-scroll',\r\n  templateUrl: './offers-list-scroll.component.html',\r\n  styleUrls: ['./offers-list-scroll.component.scss']\r\n})\r\nexport class OffersListScrollComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Content Variables\r\n   */\r\n  public offers: Offer[] = [];\r\n\r\n  /**\r\n   * Scroll & Modal Variables\r\n   */\r\n  counter = 0;\r\n  scroll = 6;\r\n\r\n  loading = false;\r\n  private unsubscribe: Subject<any>;\r\n\r\n  /**\r\n   * Component Constructor\r\n   *\r\n   * @param cdRef: ChangeDetectorRef\r\n   * @param translate: TranslateService\r\n   * @param itemsService: ItemsService\r\n   */\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    public translate: TranslateService,\r\n    private itemsService: IItemsService,\r\n  ) {\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    this.fetchLoyaltyOffersData(this.counter);\r\n  }\r\n\r\n  /**\r\n   * On destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n  /**\r\n   * Fetch Loyalty Offers List\r\n   */\r\n  fetchLoyaltyOffersData(counter: number): void {\r\n    this.itemsService.readAllOffers(`${this.scroll.toString()}-${counter.toString()}-1`)\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.offers = this.offers.concat(data);\r\n            if (true) console.log('Offers Data on \\'Offers List Scroll\\'', this.offers)\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }),\r\n        takeUntil(this.unsubscribe),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * On Scroll\r\n   */\r\n  onScroll() {\r\n    this.counter = this.counter + 1;\r\n    this.fetchLoyaltyOffersData(this.counter);\r\n    console.log('scrolled!!');\r\n    //\tthis.offers = this.offers.concat(this.offers);\r\n    this.cdRef.markForCheck();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n",
                    "styleUrl": "./offers-list-scroll.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "itemsService",
                        "type": "IItemsService"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 859,
                            "end": 864,
                            "flags": 0,
                            "escapedText": "cdRef"
                        },
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "pos": 853,
                            "end": 858,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ChangeDetectorRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 897,
                            "end": 906,
                            "flags": 0,
                            "escapedText": "translate"
                        },
                        "type": "TranslateService",
                        "tagName": {
                            "pos": 891,
                            "end": 896,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: TranslateService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 938,
                            "end": 950,
                            "flags": 0,
                            "escapedText": "itemsService"
                        },
                        "type": "IItemsService",
                        "tagName": {
                            "pos": 932,
                            "end": 937,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ItemsService</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!--begin::Loaylty Offers List-->\r\n<div *ngIf=\"offers && offers.length\" class=\"row section-list\">\r\n  <div class=\"col-md-12\">\r\n    <h3 class=\"list-tiltle\">{{ 'OFFER.PLURAL' | translate }}</h3>\r\n    <div class=\"row\" infiniteScroll [infiniteScrollDistance]=\"2\" [infiniteScrollThrottle]=\"50\" (scrolled)=\"onScroll()\">\r\n      <div class=\"col-md-4 item-wrapper\" *ngFor=\"let offer of (offers)\">\r\n        <sng-offer-card [offer]=\"offer\"></sng-offer-card>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!--end::Loaylty Offers List-->\r\n"
        },
        {
            "name": "PartnerCardComponent",
            "id": "component-PartnerCardComponent-7d478439b06e39c72971e5047b8c1382",
            "file": "projects/sng-core/src/lib/components/cards/partner-card/partner-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-partner-card",
            "styleUrls": [
                "./partner-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./partner-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "partner",
                    "description": "<p>Imported Variables</p>\n",
                    "line": 18,
                    "type": "Partner"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { Partner } from '../../../model';\r\n\r\n@Component({\r\n\tselector: 'sng-partner-card',\r\n\ttemplateUrl: './partner-card.component.html',\r\n\tstyleUrls: ['./partner-card.component.scss']\r\n})\r\nexport class PartnerCardComponent implements OnInit {\r\n\r\n  /**\r\n   * Imported Variables\r\n   */\r\n  @Input() partner: Partner;\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n\r\n// .synergy-card {\r\n// \theight: calc(100% - 20px);\r\n// \tpadding-top: 0;\r\n\r\n// \t.partner-card {\r\n// \t\theight: 100%;\r\n// \t\tpadding-top: 0;\r\n\r\n// \t\t.s_archive {\r\n// \t\t\t&-img {\r\n// \t\t\t\tbackground-color: #e9e9e9;\r\n// \t\t\t\timg {\r\n// \t\t\t\t\tmax-width: 60%;\r\n// \t\t\t\t\tmargin: auto;\r\n// \t\t\t\t\tdisplay: block;\r\n// \t\t\t\t\tmax-height: 75%;\r\n// \t\t\t\t\twidth: auto !important;\r\n// \t\t\t\t\theight: auto !important;\r\n// \t\t\t\t}\r\n// \t\t\t}\r\n// \t\t\t//     &-category {\r\n// \t\t\t//         bottom: -23px;\r\n// \t\t\t//     }\r\n// \t\t\t//     &-heading {\r\n// \t\t\t//         margin-top: 15px;\r\n// \t\t\t//     }\r\n// \t\t}\r\n// \t\tcursor: pointer;\r\n// \t}\r\n// }\r\n",
                    "styleUrl": "./partner-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"synergy-card\" *ngIf=\"partner\">\r\n\r\n  <mat-card class=\"item-card\">\r\n    <mat-card-content>\r\n\r\n      <!--begin::Content-->\r\n      <div class=\"wallet_coop_wrapper s_archive_wrapper\">\r\n        <div class=\"coop s_archive row\">\r\n          <div class=\"col-md-12\">\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-12 s_archive-img-container\">\r\n                <div class=\"s_archive-img partner-img\">\r\n                  <img src={{partner.imageURL}} alt={{partner.name}} />\r\n                  <div class=\"s_archive-category\">{{partner.sector}}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"s_archive-content container-fluid\">\r\n              <div class=\"s_archive-heading row\">\r\n                <h4 class=\"s_archive-title col-md-12\">{{partner.name}}</h4>\r\n              </div>\r\n              <div class=\"s_archive-subtitle row\">\r\n                <div class=\"col-md-12\">\r\n                  <p [innerHTML]=\"partner.subtitle\"></p>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12 s_archive-info\">\r\n                  <div class=\"s_archive-partner\">\r\n                    <div class=\"s_archive-merch-address\" *ngIf=\"partner.address\">\r\n                      <span class=\"mdi mdi-pin\"></span> {{partner.address.street}} , {{partner.address.city}}\r\n                    </div>\r\n                    <div class=\"s_archive-merch-phone\" *ngIf=\"partner.contact\">\r\n                      <a href=\"tel:+{{partner.contact.phone}}\"><span class=\"mdi mdi-phone\"></span>\r\n                        {{partner.contact.phone}}</a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <!--end::Content-->\r\n\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>"
        },
        {
            "name": "PartnerSingleComponent",
            "id": "component-PartnerSingleComponent-62ce1b666ff043108f8e2a793af4b212",
            "file": "projects/sng-core/src/lib/components/single-items/partner-single/partner-single.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-partner-single",
            "styleUrls": [
                "./partner-single.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./partner-single.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "partner",
                    "description": "<p>Imported Variables</p>\n",
                    "line": 19,
                    "type": "Partner"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "description": "<p>On destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "description": "<p>On Init</p>\n"
                },
                {
                    "name": "scrollTo",
                    "args": [
                        {
                            "name": "selectorName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "selectorName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { Partner } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-partner-single',\r\n  templateUrl: './partner-single.component.html',\r\n  styleUrls: ['./partner-single.component.scss']\r\n})\r\nexport class PartnerSingleComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Imported Variables\r\n   */\r\n  @Input() partner: Partner;\r\n\r\n  private unsubscribe: Subject<any>;\r\n  loading = false;\r\n\r\n  /**\r\n   * Component Constructor\r\n   */\r\n  constructor() {\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    console.log('Partner in SinglePartner', this.partner);\r\n  }\r\n\r\n  /**\r\n   * On destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n  scrollTo(selectorName: string): void {\r\n    document.getElementById(selectorName).scrollIntoView();\r\n  }\r\n\r\n  /**\r\n   * Children Modals\r\n   */\r\n  // @ViewChild('campaignModal', { static: false }) campaignModal: NgbModal;\r\n  // @ViewChild('postModal', { static: false }) postModal: NgbModal;\r\n\r\n  /**\r\n   * Content Variables\r\n   */\r\n  // public singleOffers: Offer[];\r\n  // public singlePosts: PostEvent[]; //Used to store posts\r\n  // public singlePost: PostEvent; //Used for the post to open in modal\r\n  // public singleMicrocredits: MicrocreditCampaign[]; //Used to store microcredits\r\n  // public singleMicrocredit: MicrocreditCampaign; //Used for the Microcreit to open in modal\r\n\r\n  /**\r\n   * Carousel Variables\r\n   */\r\n  // customOptions: OwlOptions;\r\n  // moved: boolean;\r\n\r\n  /**\r\n   * Close Modal on Browser Back Button\r\n\t */\r\n  // controlModalState(state: boolean) {\r\n  // \tif (state) {\r\n  // \t\tconst modalState = {\r\n  // \t\t\textra_modal: true,\r\n  // \t\t\tdesc: 'SinglePartnerModals'\r\n  // \t\t};\r\n  // \t\thistory.pushState(modalState, null);\r\n  // \t} else {\r\n  // \t\tif (window.history.state.extra_modal) {\r\n  // \t\t\thistory.back();\r\n  // \t\t}\r\n  // \t}\r\n  // }\r\n\r\n  /**\r\n\t * Fetch Microcredit Campaigns List (for One Partner)\r\n\t */\r\n  // fetchSingleMicrocreditsData(partner_id: string) {\r\n  // \tthis.singleMicrocredits = null;\r\n  // \tthis.itemsService.readPrivateMicrocreditCampaignsByStore(partner_id, '0-0-1')\r\n  // \t\t.pipe(\r\n  // \t\t\ttap(\r\n  // \t\t\t\tdata => {\r\n  // \t\t\t\t\tthis.singleMicrocredits = data;\r\n  // \t\t\t\t\t//TEMP FOR DEMO\r\n  // \t\t\t\t\tif (this.singleMicrocredits.length && this.singleMicrocredits.length < 3) {\r\n  // \t\t\t\t\t\tthis.singleMicrocredits.push(this.singleMicrocredits[0]);\r\n  // \t\t\t\t\t\tthis.singleMicrocredits.push(this.singleMicrocredits[0]);\r\n  // \t\t\t\t\t}\r\n  // \t\t\t\t},\r\n  // \t\t\t\terror => {\r\n  // \t\t\t\t\tconsole.log(error);\r\n  // \t\t\t\t}),\r\n  // \t\t\tfinalize(() => {\r\n  // \t\t\t\tthis.loading = false;\r\n  // \t\t\t\tthis.cdRef.markForCheck();\r\n  // \t\t\t})\r\n  // \t\t)\r\n  // \t\t.subscribe();\r\n  // }\r\n\r\n  /**\r\n   * Fetch Offers List (for One Partner)\r\n   */\r\n  // fetchSingleOffersData(partner_id: string) {\r\n  // \tthis.singleOffers = null;\r\n  // \tthis.itemsService.readOffersByStore(partner_id, '0-0-1')\r\n  // \t\t.pipe(\r\n  // \t\t\ttap(\r\n  // \t\t\t\tdata => {\r\n  // \t\t\t\t\tthis.singleOffers = data;\r\n  // \t\t\t\t\t//TEMP FOR DEMO\r\n  // \t\t\t\t\tif (this.singleOffers.length && this.singleOffers.length < 3) {\r\n  // \t\t\t\t\t\tthis.singleOffers.push(this.singleOffers[0]);\r\n  // \t\t\t\t\t\tthis.singleOffers.push(this.singleOffers[0]);\r\n  // \t\t\t\t\t}\r\n  // \t\t\t\t},\r\n  // \t\t\t\terror => {\r\n  // \t\t\t\t\tconsole.log(error);\r\n  // \t\t\t\t}),\r\n  // \t\t\tfinalize(() => {\r\n  // \t\t\t\tthis.loading = false;\r\n  // \t\t\t\tthis.cdRef.markForCheck();\r\n  // \t\t\t})\r\n  // \t\t)\r\n  // \t\t.subscribe();\r\n  // }\r\n\r\n  // /**\r\n  //  * Fetch Post & Events List (for One Partner)\r\n  //  */\r\n  // fetchSinglePostEventsData(partner_id: string) {\r\n  // \tthis.singlePosts = null;\r\n  // \tthis.itemsService.readPrivatePostsEventsByStore(partner_id, '0-0-0')\r\n  // \t\t.pipe(\r\n  // \t\t\ttap(\r\n  // \t\t\t\tdata => {\r\n  // \t\t\t\t\tthis.singlePosts = data;\r\n  // \t\t\t\t\t//TEMP FOR DEMO\r\n  // \t\t\t\t\tif (this.singlePosts.length && this.singlePosts.length < 3) {\r\n  // \t\t\t\t\t\tthis.singlePosts.push(this.singlePosts[0]);\r\n  // \t\t\t\t\t\tthis.singlePosts.push(this.singlePosts[0]);\r\n  // \t\t\t\t\t}\r\n  // \t\t\t\t},\r\n  // \t\t\t\terror => {\r\n  // \t\t\t\t\tconsole.log(error);\r\n  // \t\t\t\t}),\r\n  // \t\t\tfinalize(() => {\r\n  // \t\t\t\tthis.loading = false;\r\n  // \t\t\t\tthis.cdRef.markForCheck();\r\n  // \t\t\t})\r\n  // \t\t)\r\n  // \t\t.subscribe();\r\n  // }\r\n\r\n\r\n\t/**\r\n\t * Open Microcredit Campaign Modal\r\n\t */\r\n  // openMicrocredit(campaign: MicrocreditCampaign) {\r\n  // \tthis.singleMicrocredit = campaign;\r\n  // \tthis.modalService.open(\r\n  // \t\tthis.campaignModal,\r\n  // \t\t{\r\n  // \t\t\tariaLabelledBy: 'modal-basic-title',\r\n  // \t\t\tsize: 'lg',\r\n  // \t\t\tbackdropClass: 'fullscrenn-backdrop',\r\n  // \t\t\t//backdrop: 'static',\r\n  // \t\t\twindowClass: 'fullscreen-modal',\r\n  // \t\t}\r\n  // \t).result.then(\r\n  // \t\t(result) => { console.log('closed'); },\r\n  // \t\t(reason) => { console.log('dismissed'); });\r\n  // }\r\n\r\n\r\n  /**\r\n\t * Open PostEvent Modal\r\n\t */\r\n  // openPost(post: PostEvent) {\r\n  // \tthis.singlePost = post;\r\n  // \tthis.modalService.open(\r\n  // \t\tthis.postModal,\r\n  // \t\t{\r\n  // \t\t\tariaLabelledBy: 'modal-basic-title',\r\n  // \t\t\tsize: 'lg',\r\n  // \t\t\tbackdropClass: 'fullscrenn-backdrop',\r\n  // \t\t\t//backdrop: 'static',\r\n  // \t\t\twindowClass: 'fullscreen-modal',\r\n  // \t\t}\r\n  // \t).result.then(\r\n  // \t\t(result) => { console.log('closed'); },\r\n  // \t\t(reason) => { console.log('dismissed'); });\r\n  // }\r\n\r\n\r\n  /**\r\n   * Actions to Open Modals from Carousel\r\n   */\r\n  // mousedown() { this.moved = false; }\r\n  // mousemove() { this.moved = true; }\r\n  // mouseup(data: any, type: string) {\r\n  // \tif (this.moved) { }\r\n  // \telse {\r\n  // \t\tif (type == 'microcredit') {\r\n  // \t\t\t// this.openMicrocredit(data);\r\n  // \t\t} else if (type == 'post') {\r\n  // \t\t\tthis.openPost(data);\r\n  // \t\t} else { }\r\n  // \t}\r\n  // \tthis.moved = false;\r\n  // }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n\r\n.info-addess {\r\n  cursor: pointer;\r\n}\r\n// .coop-single > .s_single {\r\n// \t&-img-container {\r\n// \t\tmin-height: 300px;\r\n// \t}\r\n// \t&-img {\r\n// \t\timg {\r\n// \t\t\tposition: initial;\r\n// \t\t\twidth: auto;\r\n// \t\t\theight: auto;\r\n// \t\t\tmax-width: 50%;\r\n// \t\t\tmax-height: 80%;\r\n// \t\t}\r\n// \t}\r\n// }\r\n",
                    "styleUrl": "./partner-single.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"wallet_s_single_wrapper synergy-single coop-single row\">\r\n  <div class=\"s_single col-md-12\">\r\n\r\n    <div appSticky position=\"top\" class=\"row s_single-title-container\">\r\n      <div class=\"col-md-12\">\r\n        <h1 class=\"s_single-title\">{{partner.name}}</h1>\r\n      </div>\r\n    </div>\r\n    <div class=\"row s_single-img-area\">\r\n      <div class=\"col-md-12 s_single-img-container partner-img-container\">\r\n        <div class=\"s_single-img partner-img\">\r\n          <img src={{partner.imageURL}} alt={{partner.name}} />\r\n        </div>\r\n      </div>\r\n      <div class=\"s_single-category\">{{partner.sector}}</div>\r\n    </div>\r\n    <div class=\"row s_single-details\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"row s_single-info-container\">\r\n          <div class=\"col-md-6 s_single-info\">\r\n            <div *ngIf=\"partner.address\" class=\"info-row info-addess\" (click)=\"scrollTo('map-widget-partner')\">\r\n              <span class=\"mdi mdi-pin\"> </span>\r\n              {{partner.address.street}}, {{partner.address.city}}\r\n            </div>\r\n            <div *ngIf=\"partner.contact\" class=\"info-row\"><span class=\"mdi mdi-phone\"></span>{{partner.contact.phone}}\r\n            </div>\r\n            <div class=\"info-row\"><span class=\"mdi mdi-email\"></span>{{partner.email}}</div>\r\n            <div *ngIf=\"partner.contact\" class=\"info-row\"><span class=\"mdi mdi-web\"></span><a target=\"_blank\"\r\n                href=\"{{partner.contact.websiteURL}}\">{{partner.contact.websiteURL}}</a></div>\r\n          </div>\r\n          <div *ngIf=\"partner.timetable\" class=\"col-md-6 hours\">\r\n            <p [innerHTML]=\"partner.timetable\"></p>\r\n          </div>\r\n        </div>\r\n        <div class=\"row s_single-description\">\r\n          <div class=\"col-md-12\">\r\n            <p [innerHTML]=\"partner.description\"></p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!--begin::Microcredit Campaigns List-->\r\n    <sng-microcredit_campaigns-list-carousel [partner]='partner' type='single'>\r\n    </sng-microcredit_campaigns-list-carousel>\r\n    <!--end::Microcredit Campaigns List-->\r\n\r\n    <!--begin::Loyalty Offers List-->\r\n    <sng-offers-list-carousel [partner]='partner' type='single'></sng-offers-list-carousel>\r\n    <!--end::Loyalty Offers List-->\r\n\r\n    <!--begin::Post/Events List-->\r\n    <sng-posts_events-list-carousel [partner]='partner' type='single'></sng-posts_events-list-carousel>\r\n    <!--end::Post/Events List-->\r\n\r\n    <!--begin::Map Widget-->\r\n    <sng-map id=\"map-widget-partner\" [partner_id]='partner._id'></sng-map>\r\n    <!--end::Map Widget-->\r\n\r\n  </div>\r\n</div>\r\n\r\n<!-- List of Partner's Microcredit Campaigns\r\n    <div class=\"row section-list\" *ngIf=\"singleMicrocredits && singleMicrocredits.length\">\r\n      <div class=\"col-md-12\">\r\n        <h3 class=\"list-tiltle\">{{'CAMPAIGN.PLURAL' | translate }}</h3>\r\n        <owl-carousel-o [options]=\"customOptions\">\r\n          <ng-template carouselSlide *ngFor=\"let microcredit of (singleMicrocredits)\">\r\n            <sng-microcredit_campaign-card [campaign]=\"microcredit\" type=\"single\" (mousedown)=\"mousedown()\"\r\n              (mousemove)=\"mousemove()\" (mouseup)=\"mouseup(microcredit, 'microcredit')\">\r\n            </sng-microcredit_campaign-card>\r\n          </ng-template>\r\n        </owl-carousel-o>\r\n      </div>\r\n    </div> -->\r\n\r\n<!-- List of Partner's Offers -->\r\n<!-- <div class=\"row section-list\" *ngIf=\"singleOffers && singleOffers.length\">\r\n      <div class=\"col-md-12\">\r\n        <h3 class=\"list-tiltle\">{{ 'OFFER.PLURAL' | translate }}</h3>\r\n        <owl-carousel-o [options]=\"customOptions\">\r\n          <ng-template carouselSlide *ngFor=\"let offer of (singleOffers);\">\r\n            <sng-offer-card [offer]=\"offer\" type=\"single\"></sng-offer-card>\r\n          </ng-template>\r\n        </owl-carousel-o>\r\n      </div>\r\n    </div> -->\r\n\r\n<!-- List of Partner's News & Events -->\r\n<!--\r\n    <div class=\"row section-list\" *ngIf=\"singlePosts && singlePosts.length\">\r\n      <div class=\"col-md-12\">\r\n        <h3 class=\"list-tiltle\">{{ 'POST_EVENT.PLURAL' | translate }}</h3>\r\n        <owl-carousel-o [options]=\"customOptions\">\r\n          <ng-template carouselSlide *ngFor=\"let post of (singlePosts)\">\r\n            <sng-post_event-card [post_event]=\"post\" type=\"single\" (mousedown)=\"mousedown()\" (mousemove)=\"mousemove()\"\r\n              (mouseup)=\"mouseup(post, 'post')\"></sng-post_event-card>\r\n          </ng-template>\r\n        </owl-carousel-o>\r\n      </div>\r\n    </div> -->\r\n\r\n<!-- Post/Event Modal -->\r\n<!-- <ng-template #postModal let-c=\"close\" let-d=\"dismiss\">\r\n  <button type=\"button\" class=\"close-btn\" aria-label=\"Close\" (click)=\"d('Cross click')\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <sng-post_event-single [singlePost]=\"singlePost\"></sng-post_event-single>\r\n</ng-template> -->\r\n\r\n<!-- Microcredit Campaign Modal -->\r\n<!-- <ng-template #campaignModal let-c=\"close\" let-d=\"dismiss\">\r\n  <button type=\"button\" class=\"close-btn\" aria-label=\"Close\" (click)=\"d('Cross click')\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <sng-microcredit_campaign-single [campaign]=\"singleMicrocredit\"></sng-microcredit_campaign-single>\r\n</ng-template> -->\r\n"
        },
        {
            "name": "PartnersListCarouselComponent",
            "id": "component-PartnersListCarouselComponent-169c3e38960140900ab2ee83bb15c993",
            "file": "projects/sng-core/src/lib/components/lists/partners-list-carousel/partners-list-carousel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-partners-list-carousel",
            "styleUrls": [
                "./partners-list-carousel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./partners-list-carousel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configAccess",
                    "defaultValue": "this.enviromentService.access",
                    "type": "Boolean[]",
                    "optional": false,
                    "description": "<p>Configuration and Static Data</p>\n",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "customOptions",
                    "type": "OwlOptions",
                    "optional": false,
                    "description": "<p>Carousel Variables</p>\n",
                    "line": 38
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "moved",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "partner",
                    "type": "Partner",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "partnerModal",
                    "type": "NgbModal",
                    "optional": false,
                    "description": "<p>Children Modals</p>\n",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'partnerModal'"
                        }
                    ]
                },
                {
                    "name": "partners",
                    "type": "Partner[]",
                    "optional": false,
                    "description": "<p>Content Variables</p>\n",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "translate",
                    "type": "TranslateService",
                    "optional": false,
                    "description": ": TranslateService",
                    "line": 70,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "controlModalState",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "description": "<p>Close Modal on Browser Back Button</p>\n",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchPartnersData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "description": "<p>Fetch Partners List</p>\n"
                },
                {
                    "name": "mousedown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "description": "<p>Actions to Open Modals from Carousel</p>\n"
                },
                {
                    "name": "mousemove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174
                },
                {
                    "name": "mouseup",
                    "args": [
                        {
                            "name": "data",
                            "type": "Partner"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Partner",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "description": "<p>On Destory</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "description": "<p>On Init</p>\n"
                },
                {
                    "name": "openPartner",
                    "args": [
                        {
                            "name": "partner",
                            "type": "Partner"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "description": "<p>Open Partner Modal</p>\n",
                    "jsdoctags": [
                        {
                            "name": "partner",
                            "type": "Partner",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shuffle",
                    "args": [
                        {
                            "name": "array",
                            "type": "Partner[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<any>",
                    "typeParameters": [],
                    "line": 145,
                    "description": "<p>Randomize Data</p>\n",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "Partner[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:popstate",
                    "args": [],
                    "argsDecorator": [],
                    "line": 113
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ChangeDetectorRef, ViewChild, ElementRef, HostListener } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { tap, takeUntil, finalize } from 'rxjs/operators';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { OwlOptions } from 'ngx-owl-carousel-o';\r\n\r\nimport {\r\n  IPartnersService,\r\n  IStaticDataService,\r\n  IEnvironmentService\r\n} from '../../../services';\r\n\r\nimport {\r\n  Partner\r\n} from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-partners-list-carousel',\r\n  templateUrl: './partners-list-carousel.component.html',\r\n  styleUrls: ['./partners-list-carousel.component.scss']\r\n})\r\nexport class PartnersListCarouselComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Children Modals\r\n   */\r\n  @ViewChild('partnerModal') partnerModal: NgbModal;\r\n\r\n  /**\r\n   * Configuration and Static Data\r\n   */\r\n  public configAccess: Boolean[] = this.enviromentService.access;\r\n\r\n  /**\r\n   * Carousel Variables\r\n   */\r\n  customOptions: OwlOptions;\r\n  moved: boolean;\r\n\r\n  /**\r\n   * Content Variables\r\n   */\r\n  public partners: Partner[];\r\n  public partner: Partner;\r\n  // offers: Offer[];\r\n  // events: Event[];\r\n  // currentOpenModal: NgbModalRef;\r\n\r\n  // singleOffers: Offer;\r\n  // singleMicrocredit: MicrocreditCampaign;\r\n\r\n  private unsubscribe: Subject<any>;\r\n  loading: boolean = false;\r\n\r\n  /**\r\n   * Component Constructor\r\n   *\r\n   * @param cdRef: ChangeDetectorRef\r\n   * @param modalService: NgbModal\r\n   * @param translate: TranslateService\r\n   * @param staticDataService: StaticDataService\r\n   * @param loyaltyService: LoyaltyService\r\n   * @param microcreditService: MicrocreditService\r\n   * @param contentService: ContentService\r\n   */\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private modalService: NgbModal,\r\n    public translate: TranslateService,\r\n    private staticDataService: IStaticDataService,\r\n    private partnersService: IPartnersService,\r\n    private enviromentService: IEnvironmentService\r\n  ) {\r\n    this.customOptions = this.staticDataService.getOwlOptionsThree;\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    this.fetchPartnersData();\r\n  }\r\n\r\n  /**\r\n   * On Destory\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n  /**\r\n   * Close Modal on Browser Back Button\r\n   */\r\n  controlModalState(state: boolean): void {\r\n    if (state) {\r\n      const modalState = {\r\n        modal: true,\r\n        desc: 'MemberExploreModals'\r\n      };\r\n      history.pushState(modalState, null);\r\n    } else {\r\n      if (window.history.state.modal) {\r\n        history.back();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('window:popstate')\r\n  dismissModal(): void {\r\n    if (this.modalService.hasOpenModals()) {\r\n      this.modalService.dismissAll();\r\n      this.controlModalState(false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch Partners List\r\n   */\r\n  fetchPartnersData(): void {\r\n    this.partnersService.readPartners('0-0-0')\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.partners = this.shuffle(data);\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }),\r\n        takeUntil(this.unsubscribe),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Randomize Data\r\n   */\r\n  shuffle(array: Partner[]): Array<any> {\r\n    return array.sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n  /**\r\n   * Open Partner Modal\r\n   */\r\n  openPartner(partner: Partner): void {\r\n    this.partner = partner;\r\n    this.controlModalState(true);\r\n    this.modalService.open(\r\n      this.partnerModal,\r\n      {\r\n        ariaLabelledBy: 'modal-basic-title',\r\n        size: 'lg',\r\n        backdropClass: 'fullscrenn-backdrop',\r\n        backdrop: 'static',\r\n        windowClass: 'fullscreen-modal',\r\n      }\r\n    )\r\n      .result.then(\r\n        (result) => { this.controlModalState(false); console.log('closed'); },\r\n        (reason) => { this.controlModalState(false); console.log('dismissed'); });\r\n  }\r\n\r\n  /**\r\n   * Actions to Open Modals from Carousel\r\n   */\r\n  mousedown(): void { this.moved = false; }\r\n  mousemove(): void { this.moved = true; }\r\n  mouseup(data: Partner): void {\r\n    if (!this.moved) {\r\n      this.openPartner(data);\r\n    }\r\n    this.moved = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n",
                    "styleUrl": "./partners-list-carousel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "staticDataService",
                        "type": "IStaticDataService"
                    },
                    {
                        "name": "partnersService",
                        "type": "IPartnersService"
                    },
                    {
                        "name": "enviromentService",
                        "type": "IEnvironmentService"
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1469,
                            "end": 1474,
                            "flags": 0,
                            "escapedText": "cdRef"
                        },
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "pos": 1463,
                            "end": 1468,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ChangeDetectorRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1507,
                            "end": 1519,
                            "flags": 0,
                            "escapedText": "modalService"
                        },
                        "type": "NgbModal",
                        "tagName": {
                            "pos": 1501,
                            "end": 1506,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: NgbModal</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1543,
                            "end": 1552,
                            "flags": 0,
                            "escapedText": "translate"
                        },
                        "type": "TranslateService",
                        "tagName": {
                            "pos": 1537,
                            "end": 1542,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: TranslateService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1584,
                            "end": 1601,
                            "flags": 0,
                            "escapedText": "staticDataService"
                        },
                        "type": "IStaticDataService",
                        "tagName": {
                            "pos": 1578,
                            "end": 1583,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: StaticDataService</p>\n"
                    },
                    {
                        "name": "partnersService",
                        "type": "IPartnersService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "enviromentService",
                        "type": "IEnvironmentService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!--begin::Partners List-->\r\n<div *ngIf=\"partners && partners.length\" class=\"row section-list\">\r\n  <div class=\"col-md-12\">\r\n    <h3 class=\"list-tiltle\">{{ 'USER.PARTNER.PLURAL' | translate }}</h3>\r\n    <owl-carousel-o [options]=\"customOptions\">\r\n      <ng-template carouselSlide *ngFor=\"let partner of (partners)\">\r\n        <sng-partner-card [partner]=\"partner\" (mousedown)=\"mousedown()\" (mousemove)=\"mousemove()\"\r\n          (mouseup)=\"mouseup(partner)\"></sng-partner-card>\r\n      </ng-template>\r\n    </owl-carousel-o>\r\n    <div class=\"section-list-footer\"><a [routerLink]=\"['/partners']\">{{ 'USER.PARTNER.ALL' | translate }}</a>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!--end::Partners List-->\r\n\r\n<!--begin::Partner Modal-->\r\n<ng-template #partnerModal let-c=\"close\" let-d=\"dismiss\">\r\n  <button type=\"button\" class=\"close-btn\" aria-label=\"Close\" (click)=\"d('Cross click')\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <sng-partner-single [partner]=\"partner\">\r\n  </sng-partner-single>\r\n</ng-template>\r\n<!--end::Partner Modal-->\r\n"
        },
        {
            "name": "PartnersListScrollComponent",
            "id": "component-PartnersListScrollComponent-7b0f3114ffe5ea4d99c8c4a1f46d7952",
            "file": "projects/sng-core/src/lib/components/lists/partners-list-scroll/partners-list-scroll.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-partners-list-scroll",
            "styleUrls": [
                "./partners-list-scroll.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./partners-list-scroll.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Scroll &amp; Modal Variables</p>\n",
                    "line": 38
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "moved",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "partner",
                    "type": "Partner",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "partnerModal",
                    "type": "NgbModal",
                    "optional": false,
                    "description": "<p>Children Modals</p>\n",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'partnerModal'"
                        }
                    ]
                },
                {
                    "name": "partners",
                    "defaultValue": "[]",
                    "type": "Partner[]",
                    "optional": false,
                    "description": "<p>Content Variables</p>\n",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "scroll",
                    "defaultValue": "6",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "translate",
                    "type": "TranslateService",
                    "optional": false,
                    "description": ": TranslateService",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "controlModalState",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "description": "<p>Close Modal on Browser Back Button</p>\n",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchPartnersData",
                    "args": [
                        {
                            "name": "counter",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "description": "<p>Fetch Partners List</p>\n",
                    "jsdoctags": [
                        {
                            "name": "counter",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mousedown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "description": "<p>Actions to Open Modals from Carousel</p>\n"
                },
                {
                    "name": "mousemove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161
                },
                {
                    "name": "mouseup",
                    "args": [
                        {
                            "name": "data",
                            "type": "Partner"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Partner",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "description": "<p>On destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "description": "<p>On Init</p>\n"
                },
                {
                    "name": "onScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "description": "<p>On Scroll</p>\n"
                },
                {
                    "name": "openPartner",
                    "args": [
                        {
                            "name": "partner",
                            "type": "Partner"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "description": "<p>Open Partner Modal</p>\n",
                    "jsdoctags": [
                        {
                            "name": "partner",
                            "type": "Partner",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:popstate",
                    "args": [],
                    "argsDecorator": [],
                    "line": 96
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ChangeDetectorRef, ViewChild, HostListener } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { tap, takeUntil, finalize } from 'rxjs/operators';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n/**\r\n * Services\r\n */\r\nimport { IPartnersService } from '../../../services';\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { Partner } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-partners-list-scroll',\r\n  templateUrl: './partners-list-scroll.component.html',\r\n  styleUrls: ['./partners-list-scroll.component.scss']\r\n})\r\nexport class PartnersListScrollComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Children Modals\r\n   */\r\n  @ViewChild('partnerModal') partnerModal: NgbModal;\r\n\r\n  /**\r\n   * Content Variables\r\n   */\r\n  public partners: Partner[] = [];\r\n  public partner: Partner;\r\n\r\n  /**\r\n   * Scroll & Modal Variables\r\n   */\r\n  counter: number = 0;\r\n  scroll: number = 6;\r\n  moved: boolean;\r\n\r\n  loading = false;\r\n  private unsubscribe: Subject<any>;\r\n\r\n  /**\r\n   * Component Constructor\r\n   *\r\n   * @param cdRef: ChangeDetectorRef\r\n   * @param modalService: NgbModal\r\n   * @param translate: TranslateService\r\n   * @param partnersService: PartnersService\r\n   */\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private modalService: NgbModal,\r\n    public translate: TranslateService,\r\n    private partnersService: IPartnersService\r\n  ) {\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    this.fetchPartnersData(this.counter);\r\n  }\r\n\r\n  /**\r\n   * On destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n  /**\r\n   * Close Modal on Browser Back Button\r\n   */\r\n  controlModalState(state: boolean): void {\r\n    if (state) {\r\n      const modalState = {\r\n        modal: true,\r\n        desc: 'MemberExploreModals'\r\n      };\r\n      history.pushState(modalState, null);\r\n    } else {\r\n      if (window.history.state.modal) {\r\n        history.back();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('window:popstate')\r\n  dismissModal(): void {\r\n    if (this.modalService.hasOpenModals()) {\r\n      this.modalService.dismissAll();\r\n      this.controlModalState(false);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Fetch Partners List\r\n   */\r\n  fetchPartnersData(counter: number): void {\r\n    this.partnersService.readPartners(`${this.scroll.toString()}-${counter.toString()}-0`)\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.partners = this.partners.concat(data);\r\n          },\r\n          () => {\r\n          }),\r\n        takeUntil(this.unsubscribe),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * On Scroll\r\n   */\r\n  onScroll(): void {\r\n    this.counter = this.counter + 1;\r\n    this.fetchPartnersData(this.counter);\r\n    console.log('scrolled!!');\r\n    this.cdRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Open Partner Modal\r\n   */\r\n  openPartner(partner: Partner): void {\r\n    this.partner = partner;\r\n    this.controlModalState(true);\r\n    this.modalService.open(\r\n      this.partnerModal,\r\n      {\r\n        ariaLabelledBy: 'modal-basic-title',\r\n        size: 'lg',\r\n        backdropClass: 'fullscrenn-backdrop',\r\n        backdrop: 'static',\r\n        windowClass: 'fullscreen-modal',\r\n      }\r\n    )\r\n      .result.then(\r\n        () => { this.controlModalState(false); console.log('closed'); },\r\n        () => { this.controlModalState(false); console.log('dismissed'); });\r\n  }\r\n\r\n\r\n  /**\r\n   * Actions to Open Modals from Carousel\r\n   */\r\n  mousedown(): void { this.moved = false; }\r\n  mousemove(): void { this.moved = true; }\r\n  mouseup(data: Partner): void {\r\n    if (!this.moved) {\r\n      this.openPartner(data);\r\n    }\r\n    this.moved = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n",
                    "styleUrl": "./partners-list-scroll.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "partnersService",
                        "type": "IPartnersService"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1143,
                            "end": 1148,
                            "flags": 0,
                            "escapedText": "cdRef"
                        },
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "pos": 1137,
                            "end": 1142,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ChangeDetectorRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1181,
                            "end": 1193,
                            "flags": 0,
                            "escapedText": "modalService"
                        },
                        "type": "NgbModal",
                        "tagName": {
                            "pos": 1175,
                            "end": 1180,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: NgbModal</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1217,
                            "end": 1226,
                            "flags": 0,
                            "escapedText": "translate"
                        },
                        "type": "TranslateService",
                        "tagName": {
                            "pos": 1211,
                            "end": 1216,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: TranslateService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1258,
                            "end": 1273,
                            "flags": 0,
                            "escapedText": "partnersService"
                        },
                        "type": "IPartnersService",
                        "tagName": {
                            "pos": 1252,
                            "end": 1257,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: PartnersService</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!--begin::Partners List-->\r\n<div *ngIf=\"partners && partners.length\" class=\"row\" infiniteScroll [infiniteScrollDistance]=\"2\"\r\n  [infiniteScrollThrottle]=\"50\" (scrolled)=\"onScroll()\">\r\n  <div class=\"col-md-4 item-wrapper\" *ngFor=\"let partner of (partners)\">\r\n    <sng-partner-card [partner]=\"partner\" (mousedown)=\"mousedown()\" (mousemove)=\"mousemove()\"\r\n      (mouseup)=\"mouseup(partner)\">\r\n    </sng-partner-card>\r\n  </div>\r\n</div>\r\n<!--end::Partners List-->\r\n\r\n<!--begin::Partner Modal-->\r\n<ng-template #partnerModal let-c=\"close\" let-d=\"dismiss\">\r\n  <button type=\"button\" class=\"close-btn\" aria-label=\"Close\" (click)=\"d('Cross click')\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <sng-partner-single [partner]=\"partner\">\r\n  </sng-partner-single>\r\n</ng-template>\r\n<!--end::Partner Modal-->\r\n"
        },
        {
            "name": "PostEventCardComponent",
            "id": "component-PostEventCardComponent-0f9f63427b16487fff23699414e205fb",
            "file": "projects/sng-core/src/lib/components/cards/post_event-card/post_event-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-post_event-card",
            "styleUrls": [
                "./post_event-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post_event-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "post_event",
                    "description": "<p>Imported Variables</p>\n",
                    "line": 18,
                    "type": "PostEvent"
                },
                {
                    "name": "type",
                    "line": 19,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { PostEvent } from '../../../model';\r\n\r\n@Component({\r\n\tselector: 'sng-post_event-card',\r\n\ttemplateUrl: './post_event-card.component.html',\r\n\tstyleUrls: ['./post_event-card.component.scss']\r\n})\r\nexport class PostEventCardComponent implements OnInit {\r\n\r\n  /**\r\n   * Imported Variables\r\n   */\r\n\t@Input() post_event: PostEvent;\r\n\t@Input() type: string; // 'single' Or 'all'\r\n\r\n\tconstructor() { }\r\n\r\n\tngOnInit(): void {\r\n\t}\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n\r\n// .synergy-card {\r\n// \theight: calc(100% - 20px);\r\n// \tpadding-top: 0;\r\n\r\n// \t.post-card {\r\n// \t\tpadding-top: 0;\r\n// \t\theight: 100%;\r\n// \t\t.s_archive {\r\n// \t\t\t&-date {\r\n// \t\t\t\tbackground-color: $secondary;\r\n// \t\t\t}\r\n// \t\t}\r\n// \t\tcursor: pointer;\r\n// \t}\r\n// }\r\n",
                    "styleUrl": "./post_event-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"synergy-card\" *ngIf=\"post_event\">\r\n\r\n\t<mat-card class=\"item-card\">\r\n\t\t<mat-card-content>\r\n\r\n\t\t\t<!--begin::Content-->\r\n\t\t\t<div class=\"wallet_post_wrapper s_archive_wrapper\">\r\n\t\t\t\t<div class=\"post s_archive row\">\r\n\t\t\t\t\t<div class=\"col-md-12\">\r\n\r\n\t\t\t\t\t\t<!-- <div *ngIf=\"post_event.post_event_imageURL\" class=\"row\">\r\n\t\t\t\t\t\t\t<div class=\"col-sm-12 s_archive-img-container\">\r\n\t\t\t\t\t\t\t\t<div class=\"s_archive-img\">\r\n\t\t\t\t\t\t\t\t\t<img src={{post_event.post_event_imageURL}} alt={{post_event.title}} />\r\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"post_event.dateTime\" class=\"s_archive-date\">\r\n\t\t\t\t\t\t\t\t\t\t<span class=\"white mdi mdi-calendar\"></span> {{post_event.dateTime | date: 'd.M'}}</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div *ngIf=\"post_event.post_imageURL\" class=\"row\">\r\n\t\t\t\t\t\t\t<div class=\"col-sm-12 s_archive-img-container\">\r\n\t\t\t\t\t\t\t\t<div class=\"s_archive-img\">\r\n\t\t\t\t\t\t\t\t\t<img src={{post_event.post_imageURL}} alt={{post_event.title}} />\r\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"post_event.dateTime\" class=\"s_archive-date\">\r\n\t\t\t\t\t\t\t\t\t\t<span class=\"white mdi mdi-calendar\"></span> {{post_event.dateTime | date: 'd.M'}}</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div> -->\r\n\t\t\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t\t<div class=\"col-sm-12 s_archive-img-container\">\r\n\t\t\t\t\t\t\t\t<div class=\"s_archive-img\">\r\n\t\t\t\t\t\t\t\t\t<img *ngIf=\"post_event.post_event_imageURL\" src={{post_event.post_event_imageURL}}\r\n\t\t\t\t\t\t\t\t\t\talt={{post_event.title}} />\r\n\t\t\t\t\t\t\t\t\t<img *ngIf=\"post_event.post_imageURL\" src={{post_event.post_imageURL}} alt={{post_event.title}} />\r\n\t\t\t\t\t\t\t\t\t<img *ngIf=\"post_event.event_imageURL\" src={{post_event.event_imageURL}} alt={{post_event.title}} />\r\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"post_event.dateTime\" class=\"s_archive-date\">\r\n\t\t\t\t\t\t\t\t\t\t<span class=\"white mdi mdi-calendar\"></span> {{post_event.dateTime | date: 'd.M'}}</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div class=\"s_archive-content container-fluid\">\r\n\t\t\t\t\t\t\t<div class=\"s_archive-heading row\">\r\n\t\t\t\t\t\t\t\t<h4 class=\"s_archive-title col-md-9\">{{post_event.title}}</h4>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"s_archive-subtitle row\">\r\n\t\t\t\t\t\t\t\t<div class=\"col-md-12\">\r\n\t\t\t\t\t\t\t\t\t<p [innerHTML]=\"post_event.subtitle\"></p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"row\">\r\n\t\t\t\t\t\t\t\t<div class=\"col-md-12 s_archive-info\">\r\n\t\t\t\t\t\t\t\t\t<div class=\"s_archive-partner\">\r\n\t\t\t\t\t\t\t\t\t\t<div *ngIf=\"type=='all'\" class=\"s_archive-merch-name\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span class=\"mdi mdi-shopping\"></span> {{post_event.partner_name}}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div class=\"s_archive-merch-adress\" *ngIf=\"post_event.location\">\r\n\t\t\t\t\t\t\t\t\t\t\t<span class=\"mdi mdi-map\"></span> {{post_event.location}}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<!--end::Content-->\r\n\r\n\t\t</mat-card-content>\r\n\t</mat-card>\r\n</div>"
        },
        {
            "name": "PostEventSingleComponent",
            "id": "component-PostEventSingleComponent-b1a2ce769f8409998cf5282b9b06e91f",
            "file": "projects/sng-core/src/lib/components/single-items/post_event-single/post_event-single.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-post_event-single",
            "styleUrls": [
                "./post_event-single.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post_event-single.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "post_event",
                    "description": "<p>Imported Variables</p>\n",
                    "line": 16,
                    "type": "PostEvent"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "description": "<p>On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "description": "<p>On Init</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { PostEvent } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-post_event-single',\r\n  templateUrl: './post_event-single.component.html',\r\n  styleUrls: ['./post_event-single.component.scss']\r\n})\r\nexport class PostEventSingleComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Imported Variables\r\n   */\r\n  @Input() post_event: PostEvent;\r\n\r\n  private unsubscribe: Subject<any>;\r\n  loading = false;\r\n\r\n  /**\r\n   * Component Constructor\r\n   */\r\n  constructor() {\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    console.log('Post/Event in SinglePostEvent', this.post_event);\r\n  }\r\n\r\n  /**\r\n   * On Destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n\r\n// .s_single {\r\n//   &-date {\r\n//     background-color: $secondary;\r\n//   }\r\n// }\r\n",
                    "styleUrl": "./post_event-single.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"wallet_s_single_wrapper synergy-single post-single row\">\r\n  <div class=\"s_single col-md-12\">\r\n    <div appSticky position=\"top\" class=\"row s_single-title-container\">\r\n      <div class=\"col-md-12\">\r\n        <h1 class=\"s_single-title\">{{post_event.title}}</h1>\r\n      </div>\r\n    </div>\r\n    <div class=\"row s_single-img-area\">\r\n      <div class=\"col-md-12 s_single-img-container\">\r\n        <div class=\"s_single-img\">\r\n          <img src={{post_event.post_event_imageURL}} alt={{post_event.title}} />\r\n        </div>\r\n        <div *ngIf=\"post_event.dateTime\" class=\"s_single-date\">\r\n          <span class=\"white mdi mdi-calendar\"></span> {{ post_event.dateTime | date: 'd.M.y'}}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row s_single-details\">\r\n      <div class=\"col-md-12\">\r\n        <div class=\"row s_single-info-container\">\r\n          <div class=\"col-md-6 s_single-info\">\r\n            <div *ngIf=\"!post_event.dateTime\" class=\"info-row\"><span\r\n                class=\"mdi mdi-clock\"></span>{{ post_event.createdAt | date: 'd.M.y' }}\r\n            </div>\r\n            <div *ngIf=\"post_event.location\" class=\"info-row\"><span class=\"mdi mdi-map\"></span>{{post_event.location}}\r\n            </div>\r\n            <div class=\"info-row\"><span class=\"mdi mdi-shopping\"></span>{{post_event.partner_name}}\r\n            </div>\r\n          </div>\r\n          <div class=\"col-md-6 s_single-share\">\r\n            <sng-share-icon></sng-share-icon>\r\n          </div>\r\n        </div>\r\n        <div class=\"row s_single-description\">\r\n          <div class=\"col-md-12\">\r\n            <p [innerHTML]=\"post_event.content\"></p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PostsEventsListCarouselComponent",
            "id": "component-PostsEventsListCarouselComponent-b9e5ffa32a4a827cbaf942bb69ce0097",
            "file": "projects/sng-core/src/lib/components/lists/posts_events-list-carousel/posts_events-list-carousel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-posts_events-list-carousel",
            "styleUrls": [
                "./posts_events-list-carousel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./posts_events-list-carousel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "partner",
                    "description": "<p>Imported Variables</p>\n",
                    "line": 32,
                    "type": "Partner"
                },
                {
                    "name": "type",
                    "line": 33,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configAccess",
                    "defaultValue": "this.enviromentService.access",
                    "type": "Boolean[]",
                    "optional": false,
                    "description": "<p>Configuration and Static Data</p>\n",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "customOptions",
                    "type": "OwlOptions",
                    "optional": false,
                    "description": "<p>Carousel Variables</p>\n",
                    "line": 54
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "moved",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "post_event",
                    "type": "PostEvent",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "postEventModal",
                    "type": "NgbModal",
                    "optional": false,
                    "description": "<p>Children Modals</p>\n",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'postEventModal'"
                        }
                    ]
                },
                {
                    "name": "posts_events",
                    "type": "PostEvent[]",
                    "optional": false,
                    "description": "<p>Content Variables</p>\n",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "translate",
                    "type": "TranslateService",
                    "optional": false,
                    "description": ": TranslateService",
                    "line": 72,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "controlModalState",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "description": "<p>Close Modal on Browser Back Button</p>\n",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchPostsEventsData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "description": "<p>Fetch Posts &amp; Events List</p>\n"
                },
                {
                    "name": "fetchStorePostsEventsData",
                    "args": [
                        {
                            "name": "partnerId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "description": "<p>Fetch Posts &amp; Events List (for One Partner)</p>\n",
                    "jsdoctags": [
                        {
                            "name": "partnerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mousedown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "description": "<p>Actions to Open Modals from Carousel</p>\n"
                },
                {
                    "name": "mousemove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209
                },
                {
                    "name": "mouseup",
                    "args": [
                        {
                            "name": "data",
                            "type": "PostEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "PostEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "description": "<p>On Destory</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "description": "<p>On Init</p>\n"
                },
                {
                    "name": "openPostEvent",
                    "args": [
                        {
                            "name": "postEvent",
                            "type": "PostEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "description": "<p>Open Partner Modal</p>\n",
                    "jsdoctags": [
                        {
                            "name": "postEvent",
                            "type": "PostEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:popstate",
                    "args": [],
                    "argsDecorator": [],
                    "line": 121
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ChangeDetectorRef, ViewChild, Input, HostListener } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { tap, takeUntil, finalize } from 'rxjs/operators';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { OwlOptions } from 'ngx-owl-carousel-o';\r\n\r\n/**\r\n * Services\r\n */\r\nimport {\r\n  IStaticDataService,\r\n  IItemsService,\r\n  IEnvironmentService\r\n} from '../../../services';\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { Partner, PostEvent } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-posts_events-list-carousel',\r\n  templateUrl: './posts_events-list-carousel.component.html',\r\n  styleUrls: ['./posts_events-list-carousel.component.scss']\r\n})\r\nexport class PostsEventsListCarouselComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Imported Variables\r\n   */\r\n  @Input() partner: Partner;\r\n  @Input() type: string; // 'single' Or 'all'\r\n\r\n  /**\r\n   * Children Modals\r\n   */\r\n  @ViewChild('postEventModal') postEventModal: NgbModal;\r\n\r\n  /**\r\n   * Configuration and Static Data\r\n   */\r\n  public configAccess: Boolean[] = this.enviromentService.access;\r\n\r\n  /**\r\n   * Content Variables\r\n   */\r\n  public posts_events: PostEvent[];\r\n  public post_event: PostEvent;\r\n\r\n  /**\r\n   * Carousel Variables\r\n   */\r\n  customOptions: OwlOptions;\r\n  moved: boolean;\r\n\r\n  private unsubscribe: Subject<any>;\r\n  loading = false;\r\n\r\n  /**\r\n   * Component Constructor\r\n   *\r\n   * @param cdRef: ChangeDetectorRef\r\n   * @param modalService: NgbModal\r\n   * @param translate: TranslateService\r\n   * @param staticDataService: StaticDataService\r\n   * @param itemsService: ItemsService\r\n   */\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private modalService: NgbModal,\r\n    public translate: TranslateService,\r\n    private staticDataService: IStaticDataService,\r\n    private itemsService: IItemsService,\r\n    private enviromentService: IEnvironmentService\r\n  ) {\r\n    this.customOptions = (this.type === 'single') ? this.staticDataService.getOwlOptionsTwo : this.staticDataService.getOwlOptionsThree;\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    if (this.type == 'single') {\r\n      this.fetchStorePostsEventsData(this.partner._id);\r\n      console.log('a');\r\n    } else if (this.type == 'all') {\r\n      this.fetchPostsEventsData();\r\n      console.log('b');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Destory\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n  /**\r\n   * Close Modal on Browser Back Button\r\n   */\r\n  controlModalState(state: boolean): void {\r\n    if (state) {\r\n      const modalState = {\r\n        modal: true,\r\n        desc: 'MemberExploreModals'\r\n      };\r\n      history.pushState(modalState, null);\r\n    } else {\r\n      if (window.history.state.modal) {\r\n        history.back();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('window:popstate')\r\n  dismissModal(): void {\r\n    if (this.modalService.hasOpenModals()) {\r\n      this.modalService.dismissAll();\r\n      this.controlModalState(false);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Fetch Posts & Events List\r\n   */\r\n  fetchPostsEventsData(): void {\r\n    this.itemsService.readAllPrivatePostsEvents('0-0-0')\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.posts_events = data;\r\n            // Temp for DEMO\r\n            if (this.posts_events.length < 3) {\r\n              this.posts_events.push(this.posts_events[0]);\r\n              this.posts_events.push(this.posts_events[0]);\r\n            }\r\n            console.log(this.posts_events)\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }),\r\n        takeUntil(this.unsubscribe),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Fetch Posts & Events List (for One Partner)\r\n   */\r\n  fetchStorePostsEventsData(partnerId: string): void {\r\n    this.itemsService.readPrivatePostsEventsByStore(partnerId, '0-0-0')\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.posts_events = data;\r\n            // TEMP FOR DEMO\r\n            if (this.posts_events.length && this.posts_events.length < 3) {\r\n              this.posts_events.push(this.posts_events[0]);\r\n              this.posts_events.push(this.posts_events[0]);\r\n            }\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * Open Partner Modal\r\n   */\r\n  openPostEvent(postEvent: PostEvent): void {\r\n    this.post_event = postEvent;\r\n    this.controlModalState(true);\r\n    this.modalService.open(\r\n      this.postEventModal,\r\n      {\r\n        ariaLabelledBy: 'modal-basic-title',\r\n        size: 'lg',\r\n        backdropClass: 'fullscrenn-backdrop',\r\n        backdrop: 'static',\r\n        windowClass: 'fullscreen-modal',\r\n      }\r\n    )\r\n      .result.then(\r\n        () => { this.controlModalState(false); console.log('closed'); },\r\n        () => { this.controlModalState(false); console.log('dismissed'); });\r\n  }\r\n\r\n\r\n  /**\r\n   * Actions to Open Modals from Carousel\r\n   */\r\n  mousedown(): void { this.moved = false; }\r\n  mousemove(): void { this.moved = true; }\r\n  mouseup(data: PostEvent): void {\r\n    if (!this.moved) {\r\n      this.openPostEvent(data);\r\n    }\r\n    this.moved = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n",
                    "styleUrl": "./posts_events-list-carousel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "staticDataService",
                        "type": "IStaticDataService"
                    },
                    {
                        "name": "itemsService",
                        "type": "IItemsService"
                    },
                    {
                        "name": "enviromentService",
                        "type": "IEnvironmentService"
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1506,
                            "end": 1511,
                            "flags": 0,
                            "escapedText": "cdRef"
                        },
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "pos": 1500,
                            "end": 1505,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ChangeDetectorRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1544,
                            "end": 1556,
                            "flags": 0,
                            "escapedText": "modalService"
                        },
                        "type": "NgbModal",
                        "tagName": {
                            "pos": 1538,
                            "end": 1543,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: NgbModal</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1580,
                            "end": 1589,
                            "flags": 0,
                            "escapedText": "translate"
                        },
                        "type": "TranslateService",
                        "tagName": {
                            "pos": 1574,
                            "end": 1579,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: TranslateService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1621,
                            "end": 1638,
                            "flags": 0,
                            "escapedText": "staticDataService"
                        },
                        "type": "IStaticDataService",
                        "tagName": {
                            "pos": 1615,
                            "end": 1620,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: StaticDataService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1671,
                            "end": 1683,
                            "flags": 0,
                            "escapedText": "itemsService"
                        },
                        "type": "IItemsService",
                        "tagName": {
                            "pos": 1665,
                            "end": 1670,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ItemsService</p>\n"
                    },
                    {
                        "name": "enviromentService",
                        "type": "IEnvironmentService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!--begin::Posts/Events List-->\r\n<div *ngIf=\"posts_events && posts_events.length\" class=\"row section-list\">\r\n  <div class=\"col-md-12\">\r\n    <h3 class=\"list-tiltle\">{{ 'POST_EVENT.PLURAL' | translate }}</h3>\r\n    <owl-carousel-o [options]=\"customOptions\">\r\n      <ng-template carouselSlide *ngFor=\"let post_event of (posts_events)\">\r\n        <sng-post_event-card [post_event]=\"post_event\" type={{type}} (mousedown)=\"mousedown()\" (mousemove)=\"mousemove()\"\r\n          (mouseup)=\"mouseup(post_event)\"></sng-post_event-card>\r\n      </ng-template>\r\n    </owl-carousel-o>\r\n    <div *ngIf=\"type==='all'\" class=\"section-list-footer\"><a\r\n        [routerLink]=\"['/posts']\">{{ 'POST_EVENT.ALL' | translate }}</a>\r\n    </div>\r\n  </div>\r\n</div>\r\n<!--end::Posts/Events List-->\r\n\r\n<!--begin::Post/Event Modal-->\r\n<ng-template #postEventModal let-c=\"close\" let-d=\"dismiss\">\r\n  <button type=\"button\" class=\"close-btn\" aria-label=\"Close\" (click)=\"d('Cross click')\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <sng-post_event-single [post_event]=\"post_event\"> </sng-post_event-single>\r\n</ng-template>\r\n<!--end::Post/Event Modal-->\r\n"
        },
        {
            "name": "PostsEventsListScrollComponent",
            "id": "component-PostsEventsListScrollComponent-1f8019d63cc169de1bf066ee286bfdc1",
            "file": "projects/sng-core/src/lib/components/lists/posts_events-list-scroll/posts_events-list-scroll.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-posts_events-list-scroll",
            "styleUrls": [
                "./posts_events-list-scroll.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./posts_events-list-scroll.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "counter",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "moved",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "post_event",
                    "type": "PostEvent",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "postEventModal",
                    "type": "NgbModal",
                    "optional": false,
                    "description": "<p>Children Modals</p>\n",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'postEventModal'"
                        }
                    ]
                },
                {
                    "name": "posts_events",
                    "defaultValue": "[]",
                    "type": "PostEvent[]",
                    "optional": false,
                    "description": "<p>Content Variables</p>\n",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "scroll",
                    "defaultValue": "6",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "translate",
                    "type": "TranslateService",
                    "optional": false,
                    "description": ": TranslateService",
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "controlModalState",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "description": "<p>Close Modal on Browser Back Button</p>\n",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchPostsEventsData",
                    "args": [
                        {
                            "name": "counter",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "description": "<p>Fetch Post &amp; Events List</p>\n",
                    "jsdoctags": [
                        {
                            "name": "counter",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mousedown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "description": "<p>Actions to Open Modals from Carousel</p>\n"
                },
                {
                    "name": "mousemove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158
                },
                {
                    "name": "mouseup",
                    "args": [
                        {
                            "name": "data",
                            "type": "PostEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "PostEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "description": "<p>On destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "description": "<p>On Init</p>\n"
                },
                {
                    "name": "onScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "description": "<p>On Scroll</p>\n"
                },
                {
                    "name": "openPostEvent",
                    "args": [
                        {
                            "name": "postEvent",
                            "type": "PostEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "description": "<p>Open Partner Modal</p>\n",
                    "jsdoctags": [
                        {
                            "name": "postEvent",
                            "type": "PostEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:popstate",
                    "args": [],
                    "argsDecorator": [],
                    "line": 92
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ChangeDetectorRef, ViewChild, HostListener } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { tap, takeUntil, finalize } from 'rxjs/operators';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n/**\r\n * Services\r\n */\r\nimport { IItemsService } from '../../../services';\r\n\r\n/**\r\n * Models & Interfaces\r\n */\r\nimport { PostEvent } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-posts_events-list-scroll',\r\n  templateUrl: './posts_events-list-scroll.component.html',\r\n  styleUrls: ['./posts_events-list-scroll.component.scss']\r\n})\r\nexport class PostsEventsListScrollComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Children Modals\r\n   */\r\n  @ViewChild('postEventModal') postEventModal: NgbModal;\r\n\r\n  /**\r\n   * Content Variables\r\n   */\r\n  public posts_events: PostEvent[] = [];\r\n  post_event: PostEvent;\r\n\r\n  counter: number = 0;\r\n  scroll: number = 6;\r\n  moved: boolean;\r\n\r\n  loading: boolean = false;\r\n  private unsubscribe: Subject<any>;\r\n\r\n  /**\r\n   * Component Constructor\r\n   *\r\n   * @param cdRef: ChangeDetectorRef\r\n   * @param translate: TranslateService\r\n   * @param partnersService: PartnersService\r\n   */\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private modalService: NgbModal,\r\n    public translate: TranslateService,\r\n    private itemsService: IItemsService\r\n  ) {\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n  /**\r\n   * On Init\r\n   */\r\n  ngOnInit(): void {\r\n    this.fetchPostsEventsData(this.counter);\r\n  }\r\n\r\n  /**\r\n   * On destroy\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n  /**\r\n   * Close Modal on Browser Back Button\r\n   */\r\n  controlModalState(state: boolean): void {\r\n    if (state) {\r\n      const modalState = {\r\n        modal: true,\r\n        desc: 'MemberExploreModals'\r\n      };\r\n      history.pushState(modalState, null);\r\n    } else {\r\n      if (window.history.state.modal) {\r\n        history.back();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('window:popstate')\r\n  dismissModal(): void {\r\n    if (this.modalService.hasOpenModals()) {\r\n      this.modalService.dismissAll();\r\n      this.controlModalState(false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch Post & Events List\r\n   */\r\n  fetchPostsEventsData(counter: number): void {\r\n    this.itemsService.readAllPrivatePostsEvents(`${this.scroll.toString()}-${counter.toString()}-0`)\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.posts_events = this.posts_events.concat(data);\r\n            console.log('all posts');\r\n            console.log(this.posts_events)\r\n          },\r\n          () => {\r\n          }),\r\n        takeUntil(this.unsubscribe),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  /**\r\n   * On Scroll\r\n   */\r\n  onScroll(): void {\r\n    this.counter = this.counter + 1;\r\n    this.fetchPostsEventsData(this.counter);\r\n    console.log('scrolled!!');\r\n    this.cdRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Open Partner Modal\r\n   */\r\n  openPostEvent(postEvent: PostEvent): void {\r\n    this.post_event = postEvent;\r\n    this.controlModalState(true);\r\n    this.modalService.open(\r\n      this.postEventModal,\r\n      {\r\n        ariaLabelledBy: 'modal-basic-title',\r\n        size: 'lg',\r\n        backdropClass: 'fullscrenn-backdrop',\r\n        backdrop: 'static',\r\n        windowClass: 'fullscreen-modal',\r\n      }\r\n    )\r\n      .result.then(\r\n        () => { this.controlModalState(false); console.log('closed'); },\r\n        () => { this.controlModalState(false); console.log('dismissed'); });\r\n  }\r\n\r\n\r\n  /**\r\n   * Actions to Open Modals from Carousel\r\n   */\r\n  mousedown(): void { this.moved = false; }\r\n  mousemove(): void { this.moved = true; }\r\n  mouseup(data: PostEvent): void {\r\n    if (!this.moved) {\r\n      this.openPostEvent(data);\r\n    }\r\n    this.moved = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n",
                    "styleUrl": "./posts_events-list-scroll.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "itemsService",
                        "type": "IItemsService"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1129,
                            "end": 1134,
                            "flags": 0,
                            "escapedText": "cdRef"
                        },
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "pos": 1123,
                            "end": 1128,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ChangeDetectorRef</p>\n"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 1167,
                            "end": 1176,
                            "flags": 0,
                            "escapedText": "translate"
                        },
                        "type": "TranslateService",
                        "tagName": {
                            "pos": 1161,
                            "end": 1166,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: TranslateService</p>\n"
                    },
                    {
                        "name": "itemsService",
                        "type": "IItemsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!--begin::Posts/Events List-->\r\n<div *ngIf=\"posts_events && posts_events.length\" class=\"row\" infiniteScroll [infiniteScrollDistance]=\"2\"\r\n  [infiniteScrollThrottle]=\"50\" (scrolled)=\"onScroll()\">\r\n  <div class=\"col-md-4 item-wrapper\" *ngFor=\"let post_event of (posts_events)\">\r\n    <sng-post_event-card [post_event]=\"post_event\" (mousedown)=\"mousedown()\" (mousemove)=\"mousemove()\"\r\n      (mouseup)=\"mouseup(post_event)\"></sng-post_event-card>\r\n  </div>\r\n</div>\r\n<!--end::Posts/Events List-->\r\n\r\n<!--begin::Post/Event Modal-->\r\n<ng-template #postEventModal let-c=\"close\" let-d=\"dismiss\">\r\n  <button type=\"button\" class=\"close-btn\" aria-label=\"Close\" (click)=\"d('Cross click')\">\r\n    <span aria-hidden=\"true\">&times;</span>\r\n  </button>\r\n  <sng-post_event-single [post_event]=\"post_event\">\r\n  </sng-post_event-single>\r\n</ng-template>\r\n<!--end::Post/Event Modal-->\r\n"
        },
        {
            "name": "QRCodeCardComponent",
            "id": "component-QRCodeCardComponent-d50d1001027335642e68e119c803dffe",
            "file": "projects/sng-core/src/lib/components/cards/qr_code-card/qr_code-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-qr_code-card",
            "styleUrls": [
                "./qr_code-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./qr_code-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "myAngularxQrCode",
                    "defaultValue": "null",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Content Variables</p>\n",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "qrcode",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "qrcodeModal",
                    "type": "NgbModalRef",
                    "optional": false,
                    "description": "<p>Children Modals</p>\n",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'qrcodeModal'"
                        }
                    ]
                },
                {
                    "name": "translate",
                    "type": "TranslateService",
                    "optional": false,
                    "description": ": TranslateService",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "controlModalState",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "description": "<p>Close Modal on Browser Back Button</p>\n",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchQRCodeContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "description": "<p>Fetch QR Code Contentent</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "description": "<p>On Destroy</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "description": "<p>On Init</p>\n"
                },
                {
                    "name": "openQrcode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "description": "<p>Open QR Modal</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:popstate",
                    "args": [],
                    "argsDecorator": [],
                    "line": 86
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ChangeDetectorRef, ViewChild, HostListener } from '@angular/core';\r\nimport { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\r\nimport { Subject } from 'rxjs';\r\nimport { tap, finalize, takeUntil } from 'rxjs/operators';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\nimport { IAuthenticationService, IContentService } from '../../../services';\r\n\r\n@Component({\r\n  selector: 'sng-qr_code-card',\r\n  templateUrl: './qr_code-card.component.html',\r\n  styleUrls: ['./qr_code-card.component.scss']\r\n})\r\nexport class QRCodeCardComponent implements OnInit, OnDestroy {\r\n\r\n\t/**\r\n\t * Children Modals\r\n\t */\r\n  @ViewChild('qrcodeModal') qrcodeModal: NgbModalRef;\r\n\r\n\t/**\r\n\t * Content Variables\r\n\t */\r\n  public myAngularxQrCode: string = null;\r\n  public qrcode: any;\r\n\r\n  loading = false;\r\n  private unsubscribe: Subject<any>;\r\n\r\n\t/**\r\n\t * Component Constructor\r\n\t *\r\n\t * @param cdRef: ChangeDetectorRef\r\n\t * @param modalService: NgbModal\r\n\t * @param translate: TranslateService\r\n\t * @param authenticationService: AuthenticationService\r\n\t * @param contentService: ContentService\r\n\t */\r\n  constructor(\r\n    private cdRef: ChangeDetectorRef,\r\n    private modalService: NgbModal,\r\n    public translate: TranslateService,\r\n    private authenticationService: IAuthenticationService,\r\n    private contentService: IContentService\r\n  ) {\r\n    this.unsubscribe = new Subject();\r\n  }\r\n\r\n\t/**\r\n\t * On Init\r\n\t */\r\n  ngOnInit(): void {\r\n    this.myAngularxQrCode = this.authenticationService.currentUserValue.user['email'];\r\n    console.log('I am on QR Card', this.myAngularxQrCode)\r\n    this.fetchQRCodeContent();\r\n  }\r\n\r\n\t/**\r\n\t * On Destroy\r\n\t */\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe.next();\r\n    this.unsubscribe.complete();\r\n    this.loading = false;\r\n  }\r\n\r\n\t/**\r\n * Close Modal on Browser Back Button\r\n */\r\n  controlModalState(state: boolean): void {\r\n    if (state) {\r\n      const modalState = {\r\n        modal: true,\r\n        desc: 'MemberDashboardModals'\r\n      };\r\n      history.pushState(modalState, null);\r\n    } else {\r\n      if (window.history.state.modal) {\r\n        history.back();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('window:popstate')\r\n  dismissModal(): void {\r\n    if (this.modalService.hasOpenModals()) {\r\n      this.modalService.dismissAll();\r\n      this.controlModalState(false);\r\n    }\r\n  }\r\n\r\n\t/**\r\n\t * Fetch QR Code Contentent\r\n\t */\r\n  fetchQRCodeContent(): void {\r\n    this.contentService.readContentById('QR Code')\r\n      .pipe(\r\n        tap(\r\n          data => {\r\n            this.qrcode = { text: data };\r\n            console.log('QR Code Text', this.qrcode);\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }\r\n        ),\r\n        takeUntil(this.unsubscribe),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this.cdRef.markForCheck();\r\n        })\r\n      ).subscribe();\r\n  }\r\n\r\n\t/**\r\n\t * Open QR Modal\r\n\t */\r\n  openQrcode(): void {\r\n    //Open the QR code Modal\r\n    this.controlModalState(true);\r\n    this.modalService.open(this.qrcodeModal)\r\n      .result.then(\r\n        (result) => { this.controlModalState(false); console.log('closed'); },\r\n        (reason) => { this.controlModalState(false); console.log('dismissed'); });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../../variables.scss\";\r\n\r\n.wallet-card {\r\n  &-header {\r\n    border-bottom: 2px solid #eee;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  &-icon {\r\n    position: absolute;\r\n    top: -25px;\r\n    right: -8px;\r\n    cursor: pointer;\r\n    border-radius: 50%;\r\n    transition: box-shadow 0.3s;\r\n    color: #fff;\r\n    background-color: var(--tertiary-color);\r\n    font-size: 51px;\r\n    width: 75px;\r\n    height: 75px;\r\n    text-align: center;\r\n\r\n    &:hover {\r\n      box-shadow: 0 3px 11px -2px #d1cbcb;\r\n    }\r\n  }\r\n}\r\n\r\n.qr-container {\r\n  overflow: visible !important;\r\n  text-align: center;\r\n  box-shadow: none !important;\r\n\r\n  .heading {\r\n    margin-bottom: 10px;\r\n  }\r\n}\r\n\r\n.qr-text {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./qr_code-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Component Constructor</p>\n",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "modalService",
                        "type": "NgbModal"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "authenticationService",
                        "type": "IAuthenticationService"
                    },
                    {
                        "name": "contentService",
                        "type": "IContentService"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 950,
                            "end": 955,
                            "flags": 0,
                            "escapedText": "cdRef"
                        },
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "pos": 944,
                            "end": 949,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ChangeDetectorRef</p>\n"
                    },
                    {
                        "name": {
                            "pos": 987,
                            "end": 999,
                            "flags": 0,
                            "escapedText": "modalService"
                        },
                        "type": "NgbModal",
                        "tagName": {
                            "pos": 981,
                            "end": 986,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: NgbModal</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1022,
                            "end": 1031,
                            "flags": 0,
                            "escapedText": "translate"
                        },
                        "type": "TranslateService",
                        "tagName": {
                            "pos": 1016,
                            "end": 1021,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: TranslateService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1062,
                            "end": 1083,
                            "flags": 0,
                            "escapedText": "authenticationService"
                        },
                        "type": "IAuthenticationService",
                        "tagName": {
                            "pos": 1056,
                            "end": 1061,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: AuthenticationService</p>\n"
                    },
                    {
                        "name": {
                            "pos": 1119,
                            "end": 1133,
                            "flags": 0,
                            "escapedText": "contentService"
                        },
                        "type": "IContentService",
                        "tagName": {
                            "pos": 1113,
                            "end": 1118,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": "<p>: ContentService</p>\n"
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!--begin::QR Code-->\r\n<span class=\"mdi mdi-qrcode wallet-card-icon\" (click)=\"openQrcode()\"></span>\r\n<!--end::QR Code-->\r\n\r\n\r\n<!--begin::QR Code Modal-->\r\n<ng-template #qrcodeModal let-c=\"close\" let-d=\"dismiss\">\r\n  <div *ngIf=\"qrcode\" class=\"qrcode-popup\">\r\n    <button type=\"button\" class=\"close-btn\" aria-label=\"Close\" (click)=\"d('Cross click')\">\r\n      <span aria-hidden=\"true\">&times;</span>\r\n    </button>\r\n    <div class=\"qr-container mat-card\">\r\n      <div class=\"heading\">{{'MEMBER.DASHBOARD.QR_CODE' | translate}}</div>\r\n      <div class=\"qrcode\">\r\n        <qrcode [qrdata]=\"myAngularxQrCode\" [size]=\"300\" [level]=\"'L'\"></qrcode>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"qrcode.text\" class=\"qr-text\">\r\n      <p *ngIf=\"translate.currentLang == 'en'\" class=\"qr-code-text\" [innerHTML]=\"qrcode.text.en_content\"></p>\r\n      <p *ngIf=\"translate.currentLang == 'el'\" class=\"qr-code-text\" [innerHTML]=\"qrcode.text.el_content\"></p>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n<!--end::QR Code Modal-->"
        },
        {
            "name": "ShareIconComponent",
            "id": "component-ShareIconComponent-2b6816c9fec71c9112de83ab71345b42",
            "file": "projects/sng-core/src/lib/components/widgets/share-icon/share-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-share-icon",
            "styleUrls": [
                "./share-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./share-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sng-share-icon',\r\n  templateUrl: './share-icon.component.html',\r\n  styleUrls: ['./share-icon.component.scss']\r\n})\r\nexport class ShareIconComponent {\r\n  constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".share-dropdown {\r\n\t.dropdown-toggle {\r\n\t\t&:after {\r\n\t\t\tcontent: none;\r\n\t\t}\r\n\t}\r\n\t.dropdown-menu {\r\n\t\tmin-width: 0;\r\n\t\tmargin: 0;\r\n\t}\r\n\t.dropdown-item {\r\n\t\tpadding: 0.25rem 0.8rem;\r\n\t\tline-height: 1;\r\n\t\tspan {\r\n\t\t\tfont-size: 24px;\r\n\t\t\tmargin: 0;\r\n\t\t}\r\n\t\t&:hover,\r\n\t\t&:focus {\r\n\t\t\tbackground-color: transparent;\r\n\t\t\tspan {\r\n\t\t\t\tcolor: #222;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t.share-icon {\r\n\t\ttransition: color 0.3s;\r\n\t\t&:hover {\r\n\t\t\tcolor: var(--font-primary-color);\r\n\t\t}\r\n\t}\r\n\t&.show {\r\n\t\t.share-icon {\r\n\t\t\tcolor: var(--font-primary-color);\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./share-icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div ngbDropdown placement=\"left\" class=\"share-dropdown\">\r\n  <div ngbDropdownToggle class=\"share-dropdown-wrapper\">\r\n    <div class=\"share\">\r\n      <span class=\"mdi mdi-share-variant share-icon\"></span>\r\n      <!--<img src=\"../../../assets/media/images/Share.png\" alt=\"share\" />-->\r\n    </div>\r\n  </div>\r\n  <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-fit dropdown-menu-right\">\r\n    <!--begin::Navigation-->\r\n    <div class=\"navigation\">\r\n      <a ngbDropdownItem href=\"javascript:;\" class=\"navigation-item\">\r\n        <div class=\"navigation-item-details\">\r\n          <span class=\"mdi mdi-facebook\"></span>\r\n        </div>\r\n      </a>\r\n      <a ngbDropdownItem href=\"javascript:;\" class=\"navigation-item\">\r\n        <div class=\"navigation-item-details\">\r\n          <span class=\"mdi mdi-twitter\"></span>\r\n        </div>\r\n      </a>\r\n    </div>\r\n    <!--end::Navigation-->\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TabMenuComponent",
            "id": "component-TabMenuComponent-76a0c7a5eebe43dbd3d569eda847824a",
            "file": "projects/sng-core/src/lib/components/layout/tab-menu/tab-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-tab-menu",
            "styleUrls": [
                "./tab-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tab-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentRouteUrl",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "menu",
                    "type": "Menu[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getItemCssClasses",
                    "args": [
                        {
                            "name": "item",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "description": "<p>On Init</p>\n"
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { filter } from 'rxjs/operators';\r\nimport { NavigationEnd, Router } from '@angular/router';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { IAuthenticationService, IMenuService } from '../../../services';\r\n\r\nimport { Menu } from '../../../model';\r\n\r\n@Component({\r\n  selector: 'sng-tab-menu',\r\n  templateUrl: './tab-menu.component.html',\r\n  styleUrls: ['./tab-menu.component.scss']\r\n})\r\nexport class TabMenuComponent implements OnInit {\r\n  currentRouteUrl: string = '';\r\n  public menu: Menu[];\r\n\r\n  constructor(\r\n    private cdr: ChangeDetectorRef,\r\n    private router: Router,\r\n    private translate: TranslateService,\r\n    private menuService: IMenuService,\r\n    private authenticationService: IAuthenticationService\r\n  ) {\r\n    const currentUser = this.authenticationService.currentUserValue;\r\n    this.menu = (currentUser.user['access'] === 'member') ? this.menuService.getUserMenu : [];\r\n  }\r\n\r\n\t/**\r\n\t * On Init\r\n\t */\r\n  ngOnInit(): void {\r\n    this.currentRouteUrl = this.router.url.split(/[?#]/)[0];\r\n    this.router.events\r\n      .pipe(filter(event => event instanceof NavigationEnd))\r\n      .subscribe(event => {\r\n        this.currentRouteUrl = this.router.url.split(/[?#]/)[0];\r\n        this.cdr.markForCheck();\r\n      });\r\n  }\r\n\r\n  getItemCssClasses(item: string): string {\r\n    let classes = 'footer-menu-item';\r\n    if (this.currentRouteUrl.indexOf(item) !== -1) {\r\n      classes += ' footer-menu-item-active';\r\n    }\r\n    return classes;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"../../../../variables.scss\";\r\n\r\n$primary: #415daa;\r\n\r\n.dark-shadow {\r\n  -webkit-box-shadow: 17px 22px 45px 8px rgba(0, 0, 0, 0.2);\r\n  -moz-box-shadow: 17px 22px 45px 8px rgba(0, 0, 0, 0.2);\r\n  box-shadow: 17px 22px 45px 8px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n\r\n.footer-wrapper {\r\n\t@extend .dark-shadow;\r\n\tposition: fixed;\r\n\tbottom: 0;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbackground-color: #fff;\r\n\twidth: 100%;\r\n\tpadding: 10px;\r\n\tz-index: 1000;\r\n\t.footer-content {\r\n\t\tmax-width: 350px;\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: space-around;\r\n\t\tmargin: 0 auto;\r\n\t\ta {\r\n\t\t\ttext-align: center;\r\n\t\t\tdisplay: block;\r\n\t\t\tfont-weight: 600;\r\n\t\t\tcolor: #000;\r\n\t\t\t&:hover {\r\n\t\t\t\ttext-decoration: none;\r\n\t\t\t}\r\n\t\t\t.mdi {\r\n\t\t\t\tfont-size: 40px;\r\n\t\t\t\tline-height: 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t.footer-menu-item {\r\n\t\t\topacity: 0.5;\r\n\t\t\tmargin: 5px 5px;\r\n\t\t\ttransition: opacity 0.3s;\r\n\t\t\t&-active {\r\n\t\t\t\topacity: 1;\r\n\t\t\t\ta {\r\n\t\t\t\t\tcolor: $primary;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t&:hover {\r\n\t\t\t\topacity: 1;\r\n\t\t\t\ta {\r\n\t\t\t\t\tcolor: $primary;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
                    "styleUrl": "./tab-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "menuService",
                        "type": "IMenuService"
                    },
                    {
                        "name": "authenticationService",
                        "type": "IAuthenticationService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuService",
                        "type": "IMenuService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "IAuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"footer-wrapper\">\r\n  <div class=\"footer-content\">\r\n    <div *ngFor=\"let item of menu\" [ngClass]=\"getItemCssClasses(item.link)\">\r\n      <a [routerLink]=\"['/'+item.link]\">\r\n        <span class=\"mdi mdi-{{item.icon}}\"></span>\r\n        <div>\r\n          {{ item.title | translate }}\r\n        </div>\r\n      </a>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TopbarComponent",
            "id": "component-TopbarComponent-23d2e85d31c5b63de182e1a3dbbaf38c",
            "file": "projects/sng-core/src/lib/components/layout/topbar/topbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-topbar",
            "styleUrls": [
                "./topbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./topbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "user",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Title } from '@angular/platform-browser';\r\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { Router, NavigationEnd, ActivatedRoute } from '@angular/router';\r\n\r\nimport { TranslateService } from '@ngx-translate/core';\r\n// RxJS\r\nimport { filter, map, mergeMap } from 'rxjs/operators';\r\n\r\nimport { IAuthenticationService } from '../../../services';\r\n\r\n@Component({\r\n  selector: 'sng-topbar',\r\n  templateUrl: './topbar.component.html',\r\n  styleUrls: ['./topbar.component.scss'],\r\n})\r\nexport class TopbarComponent implements OnInit {\r\n  user: any;\r\n  title: string;\r\n\r\n  constructor(\r\n    private translate: TranslateService,\r\n    private authenticationService: IAuthenticationService,\r\n    private cDRef: ChangeDetectorRef,\r\n    private titleService: Title,\r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute\r\n  ) {\r\n    this.router.events\r\n      .pipe(\r\n        filter((event) => event instanceof NavigationEnd),\r\n        map(() => {\r\n          let route = this.activatedRoute;\r\n          while (route.firstChild) route = route.firstChild;\r\n          return route;\r\n        }),\r\n        filter((route) => route.outlet === 'primary'),\r\n        mergeMap((route) => route.data),\r\n        map((data) => {\r\n          if (data.title) {\r\n            return data.title;\r\n          } else {\r\n            return this.router.url.split('/').reduce((acc, frag) => {\r\n              if (acc && frag) {\r\n                acc += ' / ';\r\n              }\r\n              return acc + frag;\r\n            });\r\n          }\r\n          //\r\n        })\r\n      )\r\n      .subscribe((val) => {\r\n        this.title = val;\r\n        this.cDRef.markForCheck();\r\n        translate.get(val).subscribe((translation: string) => {\r\n          this.titleService.setTitle(translation);\r\n        });\r\n      });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.user = this.authenticationService.currentUserValue.user;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".topbar {\r\n\tfont-size: 1.4rem;\r\n\tcolor: var(--top-toolbar-color);\r\n  border-left-width: 1px;\r\n  border-left-style: solid;\r\n  border-left-color: var(--top-toolbar-color);\r\n\tpadding-left: 12px;\r\n  text-transform: capitalize;\r\n}\r\n",
                    "styleUrl": "./topbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translate",
                        "type": "TranslateService"
                    },
                    {
                        "name": "authenticationService",
                        "type": "IAuthenticationService"
                    },
                    {
                        "name": "cDRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "titleService",
                        "type": "Title"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "translate",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "IAuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cDRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "titleService",
                        "type": "Title",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"title\" class=\"topbar\">\r\n  {{ title | translate }}\r\n  <span *ngIf=\"user && title=='HEADER.MESSAGE'\">{{ user.name }}!</span>\r\n</div>\r\n"
        },
        {
            "name": "UserMenuComponent",
            "id": "component-UserMenuComponent-047867d36e55d7eb39db5690d9cb3843",
            "file": "projects/sng-core/src/lib/components/layout/user-menu/user-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sng-user-menu",
            "styleUrls": [
                "./user-menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "icon",
                    "defaultValue": "'./assets/media/images/menu.svg'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "menu",
                    "type": "Menu[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "user",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "userAvatar",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "openNav",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\n// Models\r\nimport { Menu } from '../../../model';\r\n// Services\r\nimport { IMenuService, IAuthenticationService } from '../../../services';\r\n\r\n@Component({\r\n  selector: 'sng-user-menu',\r\n  templateUrl: './user-menu.component.html',\r\n  styleUrls: ['./user-menu.component.scss'],\r\n})\r\nexport class UserMenuComponent implements OnInit {\r\n  public menu: Menu[];\r\n\r\n  icon: string = './assets/media/images/menu.svg';\r\n  user: any;\r\n  userAvatar: string;\r\n\r\n  constructor(\r\n    private cDRef: ChangeDetectorRef,\r\n    private menuService: IMenuService,\r\n    private authenticationService: IAuthenticationService\r\n  ) {\r\n    this.menu = this.menuService.getUserMenu;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.user = this.authenticationService.currentUserValue.user;\r\n    this.userAvatar =\r\n      this.user.imageURL || '../../../../assets/media/users/default.jpg';\r\n    this.cDRef.markForCheck();\r\n  }\r\n\r\n  openNav(): void {\r\n    this.menuService.openNav();\r\n  }\r\n\r\n  logout(): void {\r\n    this.authenticationService.logout();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".user-menu {\r\n\tdisplay: flex;\r\n\t.header-topbar {\r\n\t\t\r\n\t\t&-avatar {\r\n\t\t\theight: 30px;\r\n\t\t\twidth: 30px;\r\n\t\t\tborder-radius: 50%;\r\n\t\t\tbackground-size: cover;\r\n\t\t\tcursor: pointer;\r\n\t\t}\r\n\t\t&-name {\r\n\t\t\ttext-align: center;\r\n\t\t\tfont-size: 16px;\r\n\t\t\tcolor: #999;\r\n\t\t\t//margin-bottom: 1px;\r\n\t\t\tpadding: 0.8rem 0;\r\n\t\t\tborder-bottom: 1px solid #eee;\r\n\t\t\tbackground-color: #f4f8f8;\r\n\t\t}\r\n\t\t.dropdown-menu {\r\n\t\t\tpadding-top: 0;\r\n\t\t}\r\n\t\t.dropdown-toggle::after {\r\n\t\t\tcontent: none;\r\n\t\t}\r\n\t}\r\n\t.menu-icon {\r\n\t\twidth: 45px;\r\n\t\tpadding: 2px 7px;\r\n\t\tcursor: pointer;\r\n\t\ttransition: opacity 0.2s;\r\n\t\t&:hover {\r\n\t\t\topacity: 0.6;\r\n\t\t}\r\n\t}\r\n\r\n\t.navigation {\r\n\t\ttext-align: center;\r\n\t\t&-custom {\r\n\t\t\ttext-align: center;\r\n\t\t\tmargin-top: 20px;\r\n\t\t}\r\n\t}\r\n}\r\n@media screen and (min-width: 1025px) {\r\n\t.menu-icon {\r\n\t\tdisplay: none;\r\n\t}\r\n}",
                    "styleUrl": "./user-menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cDRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "menuService",
                        "type": "IMenuService"
                    },
                    {
                        "name": "authenticationService",
                        "type": "IAuthenticationService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "cDRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "menuService",
                        "type": "IMenuService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authenticationService",
                        "type": "IAuthenticationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"user-menu\">\r\n  <div *ngIf=\"user.access!=='member'\" (click)=\"openNav()\"><img src={{icon}} class=\"menu-icon\"></div>\r\n  <div ngbDropdown placement=\"bottom-right\" *ngIf=\"user\" class=\"header-topbar\">\r\n    <div ngbDropdownToggle class=\"header-topbar-wrapper\">\r\n      <div class=\"header-topbar-avatar\" [ngStyle]=\"{'background-image':'url(' + userAvatar + ')'}\">\r\n      </div>\r\n    </div>\r\n    <div ngbDropdownMenu\r\n      class=\"dropdown-menu dropdown-menu-fit dropdown-menu-right dropdown-menu-anim dropdown-menu-top-unround dropdown-menu-xl\">\r\n      <div class=\"header-topbar-name\">{{user.name}}</div>\r\n      <!--begin: Navigation -->\r\n      <div class=\"navigation\" style=\"padding-top: 10px;\">\r\n        <a *ngFor=\"let item of menu\" ngbDropdownItem [routerLink]=\"['/'+item.link]\" href=\"javascript:;\"\r\n          class=\"navigation-item\">\r\n          <div class=\"navigation-item-icon\">\r\n            <i class=\"flaticon2-calendar-3 font-success\"></i>\r\n          </div>\r\n          <div class=\"navigation-item-details\">\r\n            <div class=\"navigation-item-title font-bold\">\r\n              {{item.title | translate}}\r\n            </div>\r\n          </div>\r\n        </a>\r\n        <div class=\"navigation-custom\">\r\n          <a href=\"javascript:;\" (click)=\"logout()\"\r\n            class=\"btn btn-primary btn-upper btn-sm btn-bold\">{{'AUTH.LOGOUT.BUTTON' | translate}}</a>\r\n        </div>\r\n      </div>\r\n      <!--end: Navigation -->\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "SngCoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "LanguageSwitcherComponent"
                        },
                        {
                            "name": "LoyaltyBadgeCardComponent"
                        },
                        {
                            "name": "LoyaltyBalanceCardComponent"
                        },
                        {
                            "name": "MapComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "MicrocreditBadgeCardComponent"
                        },
                        {
                            "name": "MicrocreditCampaignCardComponent"
                        },
                        {
                            "name": "MicrocreditCampaignSingleComponent"
                        },
                        {
                            "name": "MicrocreditCampaignsListCarouselComponent"
                        },
                        {
                            "name": "MicrocreditCampaignsListScrollComponent"
                        },
                        {
                            "name": "MicrocreditSupportCardComponent"
                        },
                        {
                            "name": "MicrocreditSupportsListPaginationComponent"
                        },
                        {
                            "name": "OfferCardComponent"
                        },
                        {
                            "name": "OffersListCarouselComponent"
                        },
                        {
                            "name": "OffersListScrollComponent"
                        },
                        {
                            "name": "PartnerCardComponent"
                        },
                        {
                            "name": "PartnerSingleComponent"
                        },
                        {
                            "name": "PartnersListCarouselComponent"
                        },
                        {
                            "name": "PartnersListScrollComponent"
                        },
                        {
                            "name": "PostEventCardComponent"
                        },
                        {
                            "name": "PostEventSingleComponent"
                        },
                        {
                            "name": "PostsEventsListCarouselComponent"
                        },
                        {
                            "name": "PostsEventsListScrollComponent"
                        },
                        {
                            "name": "QRCodeCardComponent"
                        },
                        {
                            "name": "ShareIconComponent"
                        },
                        {
                            "name": "TabMenuComponent"
                        },
                        {
                            "name": "TopbarComponent"
                        },
                        {
                            "name": "UserMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "LanguageSwitcherComponent"
                        },
                        {
                            "name": "LoyaltyBadgeCardComponent"
                        },
                        {
                            "name": "LoyaltyBalanceCardComponent"
                        },
                        {
                            "name": "MapComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "MicrocreditBadgeCardComponent"
                        },
                        {
                            "name": "MicrocreditCampaignCardComponent"
                        },
                        {
                            "name": "MicrocreditCampaignSingleComponent"
                        },
                        {
                            "name": "MicrocreditCampaignsListCarouselComponent"
                        },
                        {
                            "name": "MicrocreditCampaignsListScrollComponent"
                        },
                        {
                            "name": "MicrocreditSupportCardComponent"
                        },
                        {
                            "name": "MicrocreditSupportsListPaginationComponent"
                        },
                        {
                            "name": "OfferCardComponent"
                        },
                        {
                            "name": "OffersListCarouselComponent"
                        },
                        {
                            "name": "OffersListScrollComponent"
                        },
                        {
                            "name": "PartnerCardComponent"
                        },
                        {
                            "name": "PartnerSingleComponent"
                        },
                        {
                            "name": "PartnersListCarouselComponent"
                        },
                        {
                            "name": "PartnersListScrollComponent"
                        },
                        {
                            "name": "PostEventCardComponent"
                        },
                        {
                            "name": "PostEventSingleComponent"
                        },
                        {
                            "name": "PostsEventsListCarouselComponent"
                        },
                        {
                            "name": "PostsEventsListScrollComponent"
                        },
                        {
                            "name": "QRCodeCardComponent"
                        },
                        {
                            "name": "ShareIconComponent"
                        },
                        {
                            "name": "TabMenuComponent"
                        },
                        {
                            "name": "TopbarComponent"
                        },
                        {
                            "name": "UserMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sng-core/src/lib/sng-core.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n  // Card Components\r\n  LoyaltyBadgeCardComponent,\r\n  LoyaltyBalanceCardComponent,\r\n  MicrocreditBadgeCardComponent,\r\n  MicrocreditCampaignCardComponent,\r\n  MicrocreditSupportCardComponent,\r\n  OfferCardComponent,\r\n  PartnerCardComponent,\r\n  PostEventCardComponent,\r\n  QRCodeCardComponent,\r\n\r\n  // Layout Components\r\n  FooterComponent,\r\n  LanguageSwitcherComponent,\r\n  MenuComponent,\r\n  TabMenuComponent,\r\n  TopbarComponent,\r\n  UserMenuComponent,\r\n\r\n  // List Components\r\n  MicrocreditCampaignsListCarouselComponent,\r\n  MicrocreditCampaignsListScrollComponent,\r\n  MicrocreditSupportsListPaginationComponent,\r\n  OffersListCarouselComponent,\r\n  OffersListScrollComponent,\r\n  PartnersListCarouselComponent,\r\n  PartnersListScrollComponent,\r\n  PostsEventsListCarouselComponent,\r\n  PostsEventsListScrollComponent,\r\n\r\n  // Single Items Components\r\n  MicrocreditCampaignSingleComponent,\r\n  PartnerSingleComponent,\r\n  PostEventSingleComponent,\r\n\r\n  // Widgets Components\r\n  ShareIconComponent,\r\n  MapComponent,\r\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sng-core/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "MapComponentStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/1-widgets/11-Map.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  template: `<h1>Test</h1>`,\r\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/sng-core/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "ShareIconComponentStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/1-widgets/12-Share.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n  template: `<sng-share-icon></sng-share-icon>`,\r\n  styleUrls: ['../styles/variables.css']\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "projects/sng-core/src/lib/sng-core.module.ts": [
                {
                    "name": "COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sng-core/src/lib/sng-core.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  // Card Components\r\n  LoyaltyBadgeCardComponent,\r\n  LoyaltyBalanceCardComponent,\r\n  MicrocreditBadgeCardComponent,\r\n  MicrocreditCampaignCardComponent,\r\n  MicrocreditSupportCardComponent,\r\n  OfferCardComponent,\r\n  PartnerCardComponent,\r\n  PostEventCardComponent,\r\n  QRCodeCardComponent,\r\n\r\n  // Layout Components\r\n  FooterComponent,\r\n  LanguageSwitcherComponent,\r\n  MenuComponent,\r\n  TabMenuComponent,\r\n  TopbarComponent,\r\n  UserMenuComponent,\r\n\r\n  // List Components\r\n  MicrocreditCampaignsListCarouselComponent,\r\n  MicrocreditCampaignsListScrollComponent,\r\n  MicrocreditSupportsListPaginationComponent,\r\n  OffersListCarouselComponent,\r\n  OffersListScrollComponent,\r\n  PartnersListCarouselComponent,\r\n  PartnersListScrollComponent,\r\n  PostsEventsListCarouselComponent,\r\n  PostsEventsListScrollComponent,\r\n\r\n  // Single Items Components\r\n  MicrocreditCampaignSingleComponent,\r\n  PartnerSingleComponent,\r\n  PostEventSingleComponent,\r\n\r\n  // Widgets Components\r\n  ShareIconComponent,\r\n  MapComponent,\r\n]"
                }
            ],
            "projects/sng-core/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sng-core/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/sng-core/src/test.ts",
                    "type": "literal type"
                }
            ],
            "stories/1-widgets/11-Map.stories.ts": [
                {
                    "name": "MapComponentStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/1-widgets/11-Map.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  template: `<h1>Test</h1>`,\r\n})"
                }
            ],
            "stories/1-widgets/12-Share.stories.ts": [
                {
                    "name": "ShareIconComponentStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/1-widgets/12-Share.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n  template: `<sng-share-icon></sng-share-icon>`,\r\n  styleUrls: ['../styles/variables.css']\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 13,
        "status": "low",
        "files": [
            {
                "filePath": "projects/sng-core/src/lib/components/cards/loyalty_badge-card/loyalty_badge-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoyaltyBadgeCardComponent",
                "coveragePercent": 54,
                "coverageCount": "6/11",
                "status": "good"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/cards/loyalty_balance-card/loyalty_balance-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoyaltyBalanceCardComponent",
                "coveragePercent": 69,
                "coverageCount": "9/13",
                "status": "good"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/cards/microcredit_badge-card/microcredit_badge-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MicrocreditBadgeCardComponent",
                "coveragePercent": 54,
                "coverageCount": "6/11",
                "status": "good"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/cards/microcredit_campaign-card/microcredit_campaign-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MicrocreditCampaignCardComponent",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/cards/microcredit_support-card/microcredit_support-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MicrocreditSupportCardComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/cards/offer-card/offer-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OfferCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/cards/partner-card/partner-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PartnerCardComponent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/cards/post_event-card/post_event-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostEventCardComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/cards/qr_code-card/qr_code-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QRCodeCardComponent",
                "coveragePercent": 64,
                "coverageCount": "9/14",
                "status": "good"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/layout/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/layout/language-switcher/language-switcher.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LanguageSwitcherComponent",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/layout/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/layout/tab-menu/tab-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabMenuComponent",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/layout/topbar/topbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TopbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/layout/user-menu/user-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/lists/microcredit_campaigns-list-carousel/microcredit_campaigns-list-carousel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MicrocreditCampaignsListCarouselComponent",
                "coveragePercent": 57,
                "coverageCount": "12/21",
                "status": "good"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/lists/microcredit_campaigns-list-scroll/microcredit_campaigns-list-scroll.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MicrocreditCampaignsListScrollComponent",
                "coveragePercent": 57,
                "coverageCount": "12/21",
                "status": "good"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/lists/microcredit_supports-list-pagination/microcredit_supports-list-pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MicrocreditSupportsListPaginationComponent",
                "coveragePercent": 60,
                "coverageCount": "9/15",
                "status": "good"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/lists/offers-list-carousel/offers-list-carousel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OffersListCarouselComponent",
                "coveragePercent": 61,
                "coverageCount": "8/13",
                "status": "good"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/lists/offers-list-scroll/offers-list-scroll.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OffersListScrollComponent",
                "coveragePercent": 66,
                "coverageCount": "8/12",
                "status": "good"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/lists/partners-list-carousel/partners-list-carousel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PartnersListCarouselComponent",
                "coveragePercent": 61,
                "coverageCount": "13/21",
                "status": "good"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/lists/partners-list-scroll/partners-list-scroll.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PartnersListScrollComponent",
                "coveragePercent": 57,
                "coverageCount": "12/21",
                "status": "good"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/lists/posts_events-list-carousel/posts_events-list-carousel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostsEventsListCarouselComponent",
                "coveragePercent": 60,
                "coverageCount": "14/23",
                "status": "good"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/lists/posts_events-list-scroll/posts_events-list-scroll.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostsEventsListScrollComponent",
                "coveragePercent": 52,
                "coverageCount": "11/21",
                "status": "good"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/single-items/microcredit_campaign-single/microcredit_campaign-single.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MicrocreditCampaignSingleComponent",
                "coveragePercent": 28,
                "coverageCount": "4/14",
                "status": "medium"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/single-items/partner-single/partner-single.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PartnerSingleComponent",
                "coveragePercent": 50,
                "coverageCount": "4/8",
                "status": "medium"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/single-items/post_event-single/post_event-single.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostEventSingleComponent",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/widgets/map/map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "projects/sng-core/src/lib/components/widgets/share-icon/share-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShareIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/activity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Activity",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/auth/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthUser",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/auth/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Token",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/auth/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/auth/one_click_token.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OneClickToken",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/auth/registration_status.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegistrationStatus",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/auth/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/auth/verification_required.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "VerificationRequired",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/content.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Content",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/event.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Event",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/general-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GeneralList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/loyalty/balance.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Balance",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/loyalty/points.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Points",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/loyalty/transaction.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoyaltyTransaction",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/marker.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Marker",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/member.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Member",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/menu.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Menu",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/message.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Message",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/microcredit/campaign.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MicrocreditCampaign",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/microcredit/campaign.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Tokens",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/microcredit/support.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MicrocreditSupport",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/microcredit/transaction.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MicrocreditTransaction",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/offer.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Offer",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/partner/address.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PartnerAddress",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/partner/contact.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PartnerContact",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/partner/partner.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Partner",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/partner/payment.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PartnerPayment",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/payment/payment-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PaymentList",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/payment/payment_details.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PaymentDetails",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/post/event.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PostEvent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/post/post.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Post",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/statistics.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Statistics",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/translate/language-flag.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LanguageFlag",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/model/translate/locale.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Locale",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/services/authentication.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IAuthenticationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/services/content.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IContentService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/services/enviroment.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IEnvironmentService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/services/item.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IItemsService",
                "coveragePercent": 13,
                "coverageCount": "4/29",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/services/loyalty.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ILoyaltyService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/services/menu.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IMenuService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/services/microcredit.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IMicrocreditService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/services/partners.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IPartnersService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/services/static-data.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IStaticDataService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/services/translation.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ITranslationService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/lib/sng-core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/sng-core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/1-widgets/11-Map.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MapComponentStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/1-widgets/12-Share.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ShareIconComponentStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}